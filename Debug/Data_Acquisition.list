
Data_Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cfc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08007e0c  08007e0c  00008e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f28  08007f28  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007f28  08007f28  00009064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007f28  08007f28  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f28  08007f28  00008f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f2c  08007f2c  00008f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007f30  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eac  20000064  08007f94  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f10  08007f94  00009f10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a68  00000000  00000000  0000908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e9  00000000  00000000  00021af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  00025ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001051  00000000  00000000  00027238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bad5  00000000  00000000  00028289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cb0  00000000  00000000  00043d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ae97  00000000  00000000  0005da0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f88a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d6c  00000000  00000000  000f88e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000fe654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08007df4 	.word	0x08007df4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08007df4 	.word	0x08007df4

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2uiz>:
 80006f8:	0042      	lsls	r2, r0, #1
 80006fa:	d20e      	bcs.n	800071a <__aeabi_f2uiz+0x22>
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000700:	d30b      	bcc.n	800071a <__aeabi_f2uiz+0x22>
 8000702:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d409      	bmi.n	8000720 <__aeabi_f2uiz+0x28>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2uiz+0x32>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d102      	bne.n	8000730 <__aeabi_f2uiz+0x38>
 800072a:	f04f 30ff 	mov.w	r0, #4294967295
 800072e:	4770      	bx	lr
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000748:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <MX_ADC1_Init+0x74>)
 800074a:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <MX_ADC1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074e:	4b17      	ldr	r3, [pc, #92]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000754:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000756:	2201      	movs	r2, #1
 8000758:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075a:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_ADC1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000762:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_ADC1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000770:	2201      	movs	r2, #1
 8000772:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000774:	480d      	ldr	r0, [pc, #52]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000776:	f001 fd1b 	bl	80021b0 <HAL_ADC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000780:	f001 f9ce 	bl	8001b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000788:	2301      	movs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800078c:	2302      	movs	r3, #2
 800078e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000796:	f001 ffcf 	bl	8002738 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007a0:	f001 f9be 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000080 	.word	0x20000080
 80007b0:	40012400 	.word	0x40012400

080007b4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007c6:	4a19      	ldr	r2, [pc, #100]	@ (800082c <MX_ADC2_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007de:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80007e2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007f2:	f001 fcdd 	bl	80021b0 <HAL_ADC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f001 f990 	bl	8001b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000804:	2301      	movs	r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000808:	2302      	movs	r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_ADC2_Init+0x74>)
 8000812:	f001 ff91 	bl	8002738 <HAL_ADC_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800081c:	f001 f980 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000b0 	.word	0x200000b0
 800082c:	40012800 	.word	0x40012800

08000830 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0318 	add.w	r3, r7, #24
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a28      	ldr	r2, [pc, #160]	@ (80008ec <HAL_ADC_MspInit+0xbc>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d122      	bne.n	8000896 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a26      	ldr	r2, [pc, #152]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 8000856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a20      	ldr	r2, [pc, #128]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000880:	230e      	movs	r3, #14
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000884:	2303      	movs	r3, #3
 8000886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	4619      	mov	r1, r3
 800088e:	4819      	ldr	r0, [pc, #100]	@ (80008f4 <HAL_ADC_MspInit+0xc4>)
 8000890:	f002 fbf6 	bl	8003080 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000894:	e026      	b.n	80008e4 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <HAL_ADC_MspInit+0xc8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d121      	bne.n	80008e4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80008a0:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a0c      	ldr	r2, [pc, #48]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80008d0:	2371      	movs	r3, #113	@ 0x71
 80008d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d4:	2303      	movs	r3, #3
 80008d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	4619      	mov	r1, r3
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <HAL_ADC_MspInit+0xc4>)
 80008e0:	f002 fbce 	bl	8003080 <HAL_GPIO_Init>
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40012400 	.word	0x40012400
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40012800 	.word	0x40012800

080008fc <setADCChannel1>:
unsigned char readings_qtt=5;


unsigned short sensorData[sensor_qtt][sensor_buffer_size];

HAL_StatusTypeDef setADCChannel1(unsigned char channel){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	switch(channel) {
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b11      	cmp	r3, #17
 800090a:	d86f      	bhi.n	80009ec <setADCChannel1+0xf0>
 800090c:	a201      	add	r2, pc, #4	@ (adr r2, 8000914 <setADCChannel1+0x18>)
 800090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000912:	bf00      	nop
 8000914:	0800095d 	.word	0x0800095d
 8000918:	08000965 	.word	0x08000965
 800091c:	0800096d 	.word	0x0800096d
 8000920:	08000975 	.word	0x08000975
 8000924:	0800097d 	.word	0x0800097d
 8000928:	08000985 	.word	0x08000985
 800092c:	0800098d 	.word	0x0800098d
 8000930:	08000995 	.word	0x08000995
 8000934:	0800099d 	.word	0x0800099d
 8000938:	080009a5 	.word	0x080009a5
 800093c:	080009ad 	.word	0x080009ad
 8000940:	080009b5 	.word	0x080009b5
 8000944:	080009bd 	.word	0x080009bd
 8000948:	080009c5 	.word	0x080009c5
 800094c:	080009cd 	.word	0x080009cd
 8000950:	080009d5 	.word	0x080009d5
 8000954:	080009dd 	.word	0x080009dd
 8000958:	080009e5 	.word	0x080009e5
	       	case 0:
	            sConfig1.Channel = ADC_CHANNEL_0;
 800095c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <setADCChannel1+0x114>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
	            break;
 8000962:	e045      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 1:
	            sConfig1.Channel = ADC_CHANNEL_1;
 8000964:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <setADCChannel1+0x114>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
	            break;
 800096a:	e041      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 2:
	            sConfig1.Channel = ADC_CHANNEL_2;
 800096c:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <setADCChannel1+0x114>)
 800096e:	2202      	movs	r2, #2
 8000970:	601a      	str	r2, [r3, #0]
	            break;
 8000972:	e03d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 3:
	            sConfig1.Channel = ADC_CHANNEL_3;
 8000974:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <setADCChannel1+0x114>)
 8000976:	2203      	movs	r2, #3
 8000978:	601a      	str	r2, [r3, #0]
	            break;
 800097a:	e039      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 4:
	            sConfig1.Channel = ADC_CHANNEL_4;
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <setADCChannel1+0x114>)
 800097e:	2204      	movs	r2, #4
 8000980:	601a      	str	r2, [r3, #0]
	            break;
 8000982:	e035      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 5:
	            sConfig1.Channel = ADC_CHANNEL_5;
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <setADCChannel1+0x114>)
 8000986:	2205      	movs	r2, #5
 8000988:	601a      	str	r2, [r3, #0]
	            break;
 800098a:	e031      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 6:
	            sConfig1.Channel = ADC_CHANNEL_6;
 800098c:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <setADCChannel1+0x114>)
 800098e:	2206      	movs	r2, #6
 8000990:	601a      	str	r2, [r3, #0]
	            break;
 8000992:	e02d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 7:
	            sConfig1.Channel = ADC_CHANNEL_7;
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <setADCChannel1+0x114>)
 8000996:	2207      	movs	r2, #7
 8000998:	601a      	str	r2, [r3, #0]
	            break;
 800099a:	e029      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 8:
	            sConfig1.Channel = ADC_CHANNEL_8;
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <setADCChannel1+0x114>)
 800099e:	2208      	movs	r2, #8
 80009a0:	601a      	str	r2, [r3, #0]
	            break;
 80009a2:	e025      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 9:
	            sConfig1.Channel = ADC_CHANNEL_9;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <setADCChannel1+0x114>)
 80009a6:	2209      	movs	r2, #9
 80009a8:	601a      	str	r2, [r3, #0]
	            break;
 80009aa:	e021      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 10:
	            sConfig1.Channel = ADC_CHANNEL_10;
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <setADCChannel1+0x114>)
 80009ae:	220a      	movs	r2, #10
 80009b0:	601a      	str	r2, [r3, #0]
	            break;
 80009b2:	e01d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 11:
	            sConfig1.Channel = ADC_CHANNEL_11;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <setADCChannel1+0x114>)
 80009b6:	220b      	movs	r2, #11
 80009b8:	601a      	str	r2, [r3, #0]
	            break;
 80009ba:	e019      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 12:
	            sConfig1.Channel = ADC_CHANNEL_12;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <setADCChannel1+0x114>)
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
	            break;
 80009c2:	e015      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 13:
	            sConfig1.Channel = ADC_CHANNEL_13;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <setADCChannel1+0x114>)
 80009c6:	220d      	movs	r2, #13
 80009c8:	601a      	str	r2, [r3, #0]
	            break;
 80009ca:	e011      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 14:
	            sConfig1.Channel = ADC_CHANNEL_14;
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <setADCChannel1+0x114>)
 80009ce:	220e      	movs	r2, #14
 80009d0:	601a      	str	r2, [r3, #0]
	            break;
 80009d2:	e00d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 15:
	            sConfig1.Channel = ADC_CHANNEL_15;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <setADCChannel1+0x114>)
 80009d6:	220f      	movs	r2, #15
 80009d8:	601a      	str	r2, [r3, #0]
	            break;
 80009da:	e009      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 16:
	            sConfig1.Channel = ADC_CHANNEL_16;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <setADCChannel1+0x114>)
 80009de:	2210      	movs	r2, #16
 80009e0:	601a      	str	r2, [r3, #0]
	            break;
 80009e2:	e005      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 17:
	            sConfig1.Channel = ADC_CHANNEL_17;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <setADCChannel1+0x114>)
 80009e6:	2211      	movs	r2, #17
 80009e8:	601a      	str	r2, [r3, #0]
	            break;
 80009ea:	e001      	b.n	80009f0 <setADCChannel1+0xf4>
	        default:
	            return HAL_ERROR; // Canal inválido
 80009ec:	2301      	movs	r3, #1
 80009ee:	e00a      	b.n	8000a06 <setADCChannel1+0x10a>
	    }

	    sConfig1.Rank = ADC_REGULAR_RANK_1;
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <setADCChannel1+0x114>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	605a      	str	r2, [r3, #4]
	    sConfig1.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <setADCChannel1+0x114>)
 80009f8:	2205      	movs	r2, #5
 80009fa:	609a      	str	r2, [r3, #8]

	    return HAL_ADC_ConfigChannel(&hadc1, &sConfig1);
 80009fc:	4904      	ldr	r1, [pc, #16]	@ (8000a10 <setADCChannel1+0x114>)
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <setADCChannel1+0x118>)
 8000a00:	f001 fe9a 	bl	8002738 <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0

}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000e0 	.word	0x200000e0
 8000a14:	20000080 	.word	0x20000080

08000a18 <setADCChannel2>:

HAL_StatusTypeDef setADCChannel2(unsigned char channel){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	switch(channel) {
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b11      	cmp	r3, #17
 8000a26:	d86f      	bhi.n	8000b08 <setADCChannel2+0xf0>
 8000a28:	a201      	add	r2, pc, #4	@ (adr r2, 8000a30 <setADCChannel2+0x18>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a79 	.word	0x08000a79
 8000a34:	08000a81 	.word	0x08000a81
 8000a38:	08000a89 	.word	0x08000a89
 8000a3c:	08000a91 	.word	0x08000a91
 8000a40:	08000a99 	.word	0x08000a99
 8000a44:	08000aa1 	.word	0x08000aa1
 8000a48:	08000aa9 	.word	0x08000aa9
 8000a4c:	08000ab1 	.word	0x08000ab1
 8000a50:	08000ab9 	.word	0x08000ab9
 8000a54:	08000ac1 	.word	0x08000ac1
 8000a58:	08000ac9 	.word	0x08000ac9
 8000a5c:	08000ad1 	.word	0x08000ad1
 8000a60:	08000ad9 	.word	0x08000ad9
 8000a64:	08000ae1 	.word	0x08000ae1
 8000a68:	08000ae9 	.word	0x08000ae9
 8000a6c:	08000af1 	.word	0x08000af1
 8000a70:	08000af9 	.word	0x08000af9
 8000a74:	08000b01 	.word	0x08000b01
	        case 0:
	            sConfig2.Channel = ADC_CHANNEL_0;
 8000a78:	4b2c      	ldr	r3, [pc, #176]	@ (8000b2c <setADCChannel2+0x114>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
	            break;
 8000a7e:	e045      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 1:
	            sConfig2.Channel = ADC_CHANNEL_1;
 8000a80:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <setADCChannel2+0x114>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
	            break;
 8000a86:	e041      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 2:
	            sConfig2.Channel = ADC_CHANNEL_2;
 8000a88:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <setADCChannel2+0x114>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	601a      	str	r2, [r3, #0]
	            break;
 8000a8e:	e03d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 3:
	            sConfig2.Channel = ADC_CHANNEL_3;
 8000a90:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <setADCChannel2+0x114>)
 8000a92:	2203      	movs	r2, #3
 8000a94:	601a      	str	r2, [r3, #0]
	            break;
 8000a96:	e039      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 4:
	            sConfig2.Channel = ADC_CHANNEL_4;
 8000a98:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <setADCChannel2+0x114>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	601a      	str	r2, [r3, #0]
	            break;
 8000a9e:	e035      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 5:
	            sConfig2.Channel = ADC_CHANNEL_5;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <setADCChannel2+0x114>)
 8000aa2:	2205      	movs	r2, #5
 8000aa4:	601a      	str	r2, [r3, #0]
	            break;
 8000aa6:	e031      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 6:
	            sConfig2.Channel = ADC_CHANNEL_6;
 8000aa8:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <setADCChannel2+0x114>)
 8000aaa:	2206      	movs	r2, #6
 8000aac:	601a      	str	r2, [r3, #0]
	            break;
 8000aae:	e02d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 7:
	            sConfig2.Channel = ADC_CHANNEL_7;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <setADCChannel2+0x114>)
 8000ab2:	2207      	movs	r2, #7
 8000ab4:	601a      	str	r2, [r3, #0]
	            break;
 8000ab6:	e029      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 8:
	            sConfig2.Channel = ADC_CHANNEL_8;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <setADCChannel2+0x114>)
 8000aba:	2208      	movs	r2, #8
 8000abc:	601a      	str	r2, [r3, #0]
	            break;
 8000abe:	e025      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 9:
	            sConfig2.Channel = ADC_CHANNEL_9;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <setADCChannel2+0x114>)
 8000ac2:	2209      	movs	r2, #9
 8000ac4:	601a      	str	r2, [r3, #0]
	            break;
 8000ac6:	e021      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 10:
	            sConfig2.Channel = ADC_CHANNEL_10;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <setADCChannel2+0x114>)
 8000aca:	220a      	movs	r2, #10
 8000acc:	601a      	str	r2, [r3, #0]
	            break;
 8000ace:	e01d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 11:
	            sConfig2.Channel = ADC_CHANNEL_11;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <setADCChannel2+0x114>)
 8000ad2:	220b      	movs	r2, #11
 8000ad4:	601a      	str	r2, [r3, #0]
	            break;
 8000ad6:	e019      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 12:
	            sConfig2.Channel = ADC_CHANNEL_12;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <setADCChannel2+0x114>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
	            break;
 8000ade:	e015      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 13:
	            sConfig2.Channel = ADC_CHANNEL_13;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <setADCChannel2+0x114>)
 8000ae2:	220d      	movs	r2, #13
 8000ae4:	601a      	str	r2, [r3, #0]
	            break;
 8000ae6:	e011      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 14:
	            sConfig2.Channel = ADC_CHANNEL_14;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <setADCChannel2+0x114>)
 8000aea:	220e      	movs	r2, #14
 8000aec:	601a      	str	r2, [r3, #0]
	            break;
 8000aee:	e00d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 15:
	            sConfig2.Channel = ADC_CHANNEL_15;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <setADCChannel2+0x114>)
 8000af2:	220f      	movs	r2, #15
 8000af4:	601a      	str	r2, [r3, #0]
	            break;
 8000af6:	e009      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 16:
	            sConfig2.Channel = ADC_CHANNEL_16;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <setADCChannel2+0x114>)
 8000afa:	2210      	movs	r2, #16
 8000afc:	601a      	str	r2, [r3, #0]
	            break;
 8000afe:	e005      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 17:
	            sConfig2.Channel = ADC_CHANNEL_17;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <setADCChannel2+0x114>)
 8000b02:	2211      	movs	r2, #17
 8000b04:	601a      	str	r2, [r3, #0]
	            break;
 8000b06:	e001      	b.n	8000b0c <setADCChannel2+0xf4>
	        default:
	            return HAL_ERROR; // canal inválido
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e00a      	b.n	8000b22 <setADCChannel2+0x10a>
	    }

	    sConfig2.Rank = ADC_REGULAR_RANK_1;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <setADCChannel2+0x114>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	605a      	str	r2, [r3, #4]
	    sConfig2.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <setADCChannel2+0x114>)
 8000b14:	2205      	movs	r2, #5
 8000b16:	609a      	str	r2, [r3, #8]
	    return HAL_ADC_ConfigChannel(&hadc2, &sConfig2);
 8000b18:	4904      	ldr	r1, [pc, #16]	@ (8000b2c <setADCChannel2+0x114>)
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <setADCChannel2+0x118>)
 8000b1c:	f001 fe0c 	bl	8002738 <HAL_ADC_ConfigChannel>
 8000b20:	4603      	mov	r3, r0

}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000ec 	.word	0x200000ec
 8000b30:	200000b0 	.word	0x200000b0

08000b34 <readADCValue1>:

uint16_t readADCValue1(unsigned char channelNumber) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]

    if (setADCChannel1(channelNumber) != HAL_OK) {
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fedb 	bl	80008fc <setADCChannel1>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <readADCValue1+0x1e>
        return 0xFFFF;  // erro
 8000b4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b50:	e031      	b.n	8000bb6 <readADCValue1+0x82>
    }
    delay_us(10);
 8000b52:	200a      	movs	r0, #10
 8000b54:	f000 f91a 	bl	8000d8c <delay_us>
    uint32_t sum=0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Start(&hadc1);
 8000b5c:	4818      	ldr	r0, [pc, #96]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b5e:	f001 fbff 	bl	8002360 <HAL_ADC_Start>
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	72fb      	strb	r3, [r7, #11]
 8000b66:	e017      	b.n	8000b98 <readADCValue1+0x64>
    	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	4814      	ldr	r0, [pc, #80]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b6e:	f001 fcd1 	bl	8002514 <HAL_ADC_PollForConversion>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d005      	beq.n	8000b84 <readADCValue1+0x50>
    		HAL_ADC_Stop(&hadc1);
 8000b78:	4811      	ldr	r0, [pc, #68]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b7a:	f001 fc9f 	bl	80024bc <HAL_ADC_Stop>
    		return 0xFFFF;  // erro
 8000b7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b82:	e018      	b.n	8000bb6 <readADCValue1+0x82>
    	}
    	sum += HAL_ADC_GetValue(&hadc1);
 8000b84:	480e      	ldr	r0, [pc, #56]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b86:	f001 fdcb 	bl	8002720 <HAL_ADC_GetValue>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000b92:	7afb      	ldrb	r3, [r7, #11]
 8000b94:	3301      	adds	r3, #1
 8000b96:	72fb      	strb	r3, [r7, #11]
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <readADCValue1+0x90>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	7afa      	ldrb	r2, [r7, #11]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d3e2      	bcc.n	8000b68 <readADCValue1+0x34>
    }
    HAL_ADC_Stop(&hadc1);
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <readADCValue1+0x8c>)
 8000ba4:	f001 fc8a 	bl	80024bc <HAL_ADC_Stop>
    return (uint16_t)(sum / readings_qtt);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <readADCValue1+0x90>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bb4:	b29b      	uxth	r3, r3
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000080 	.word	0x20000080
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <readADCValue2>:

uint16_t readADCValue2(unsigned char channelNumber) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
    if (setADCChannel2(channelNumber) != HAL_OK) {
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff1f 	bl	8000a18 <setADCChannel2>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <readADCValue2+0x1e>
        return 0xFFFF;  // erro
 8000be0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be4:	e031      	b.n	8000c4a <readADCValue2+0x82>
    }
    delay_us(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f000 f8d0 	bl	8000d8c <delay_us>
    uint32_t sum=0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Start(&hadc2);
 8000bf0:	4818      	ldr	r0, [pc, #96]	@ (8000c54 <readADCValue2+0x8c>)
 8000bf2:	f001 fbb5 	bl	8002360 <HAL_ADC_Start>
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	72fb      	strb	r3, [r7, #11]
 8000bfa:	e017      	b.n	8000c2c <readADCValue2+0x64>
        if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) != HAL_OK) {
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	4814      	ldr	r0, [pc, #80]	@ (8000c54 <readADCValue2+0x8c>)
 8000c02:	f001 fc87 	bl	8002514 <HAL_ADC_PollForConversion>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d005      	beq.n	8000c18 <readADCValue2+0x50>
            HAL_ADC_Stop(&hadc2);
 8000c0c:	4811      	ldr	r0, [pc, #68]	@ (8000c54 <readADCValue2+0x8c>)
 8000c0e:	f001 fc55 	bl	80024bc <HAL_ADC_Stop>
            return 0xFFFF;
 8000c12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c16:	e018      	b.n	8000c4a <readADCValue2+0x82>
        }
        sum += HAL_ADC_GetValue(&hadc2);
 8000c18:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <readADCValue2+0x8c>)
 8000c1a:	f001 fd81 	bl	8002720 <HAL_ADC_GetValue>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000c26:	7afb      	ldrb	r3, [r7, #11]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	72fb      	strb	r3, [r7, #11]
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <readADCValue2+0x90>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	7afa      	ldrb	r2, [r7, #11]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d3e2      	bcc.n	8000bfc <readADCValue2+0x34>
    }
    HAL_ADC_Stop(&hadc2);
 8000c36:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <readADCValue2+0x8c>)
 8000c38:	f001 fc40 	bl	80024bc <HAL_ADC_Stop>
    return (uint16_t)(sum / readings_qtt);
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <readADCValue2+0x90>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c48:	b29b      	uxth	r3, r3
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000b0 	.word	0x200000b0
 8000c58:	20000000 	.word	0x20000000

08000c5c <readSensor>:

uint16_t readSensor(unsigned char mux_pin, unsigned char index){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	unsigned char mux = mux_pin>>4;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	091b      	lsrs	r3, r3, #4
 8000c70:	737b      	strb	r3, [r7, #13]
	unsigned char porta  = mux_pin&0b1111;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	733b      	strb	r3, [r7, #12]
	_Bool s0 = porta&0b0001;
 8000c7a:	7b3b      	ldrb	r3, [r7, #12]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	bf14      	ite	ne
 8000c84:	2301      	movne	r3, #1
 8000c86:	2300      	moveq	r3, #0
 8000c88:	72fb      	strb	r3, [r7, #11]
	_Bool s1 = (porta&0b0010)>>1;
 8000c8a:	7b3b      	ldrb	r3, [r7, #12]
 8000c8c:	105b      	asrs	r3, r3, #1
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf14      	ite	ne
 8000c96:	2301      	movne	r3, #1
 8000c98:	2300      	moveq	r3, #0
 8000c9a:	72bb      	strb	r3, [r7, #10]
	_Bool s2 = (porta&0b0100)>>2;
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	109b      	asrs	r3, r3, #2
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf14      	ite	ne
 8000ca8:	2301      	movne	r3, #1
 8000caa:	2300      	moveq	r3, #0
 8000cac:	727b      	strb	r3, [r7, #9]
	_Bool s3 = (porta&0b1000)>>3;
 8000cae:	7b3b      	ldrb	r3, [r7, #12]
 8000cb0:	10db      	asrs	r3, r3, #3
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf14      	ite	ne
 8000cba:	2301      	movne	r3, #1
 8000cbc:	2300      	moveq	r3, #0
 8000cbe:	723b      	strb	r3, [r7, #8]

	HAL_GPIO_WritePin(EN1_GPIO, EN1_PIN, GPIO_PIN_SET); // EN1 (B4)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	482f      	ldr	r0, [pc, #188]	@ (8000d84 <readSensor+0x128>)
 8000cc6:	f002 fb5f 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO, EN2_PIN, GPIO_PIN_SET); // EN2 (B3)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2108      	movs	r1, #8
 8000cce:	482d      	ldr	r0, [pc, #180]	@ (8000d84 <readSensor+0x128>)
 8000cd0:	f002 fb5a 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO, EN3_PIN, GPIO_PIN_SET); // EN3 (A15)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cda:	482b      	ldr	r0, [pc, #172]	@ (8000d88 <readSensor+0x12c>)
 8000cdc:	f002 fb54 	bl	8003388 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(S0_GPIO, S0_PIN, s0);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	2180      	movs	r1, #128	@ 0x80
 8000ce6:	4827      	ldr	r0, [pc, #156]	@ (8000d84 <readSensor+0x128>)
 8000ce8:	f002 fb4e 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S1_GPIO, S1_PIN, s1);
 8000cec:	7abb      	ldrb	r3, [r7, #10]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cf4:	4823      	ldr	r0, [pc, #140]	@ (8000d84 <readSensor+0x128>)
 8000cf6:	f002 fb47 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO, S2_PIN, s2);
 8000cfa:	7a7b      	ldrb	r3, [r7, #9]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	2120      	movs	r1, #32
 8000d00:	4820      	ldr	r0, [pc, #128]	@ (8000d84 <readSensor+0x128>)
 8000d02:	f002 fb41 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO, S3_PIN, s3);
 8000d06:	7a3b      	ldrb	r3, [r7, #8]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2140      	movs	r1, #64	@ 0x40
 8000d0c:	481d      	ldr	r0, [pc, #116]	@ (8000d84 <readSensor+0x128>)
 8000d0e:	f002 fb3b 	bl	8003388 <HAL_GPIO_WritePin>

	uint16_t value;
	switch (mux) {
 8000d12:	7b7b      	ldrb	r3, [r7, #13]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d01c      	beq.n	8000d52 <readSensor+0xf6>
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	dc26      	bgt.n	8000d6a <readSensor+0x10e>
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d002      	beq.n	8000d26 <readSensor+0xca>
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d00b      	beq.n	8000d3c <readSensor+0xe0>
	        case 3:
	            HAL_GPIO_WritePin(EN3_GPIO, EN3_PIN, GPIO_PIN_RESET); // Ativa EN3 (A15)
	            value = readADCValue1(3);
	            break;
	        default:
	            break;
 8000d24:	e021      	b.n	8000d6a <readSensor+0x10e>
	            HAL_GPIO_WritePin(EN1_GPIO, EN1_PIN, GPIO_PIN_RESET); // Ativa EN1 (B4)
 8000d26:	2200      	movs	r2, #0
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4816      	ldr	r0, [pc, #88]	@ (8000d84 <readSensor+0x128>)
 8000d2c:	f002 fb2c 	bl	8003388 <HAL_GPIO_WritePin>
	            value = readADCValue1(1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff feff 	bl	8000b34 <readADCValue1>
 8000d36:	4603      	mov	r3, r0
 8000d38:	81fb      	strh	r3, [r7, #14]
	            break;
 8000d3a:	e017      	b.n	8000d6c <readSensor+0x110>
	            HAL_GPIO_WritePin(EN2_GPIO, EN2_PIN, GPIO_PIN_RESET); // Ativa EN2 (B3)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2108      	movs	r1, #8
 8000d40:	4810      	ldr	r0, [pc, #64]	@ (8000d84 <readSensor+0x128>)
 8000d42:	f002 fb21 	bl	8003388 <HAL_GPIO_WritePin>
	            value = readADCValue1(2);
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff fef4 	bl	8000b34 <readADCValue1>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	81fb      	strh	r3, [r7, #14]
	            break;
 8000d50:	e00c      	b.n	8000d6c <readSensor+0x110>
	            HAL_GPIO_WritePin(EN3_GPIO, EN3_PIN, GPIO_PIN_RESET); // Ativa EN3 (A15)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d58:	480b      	ldr	r0, [pc, #44]	@ (8000d88 <readSensor+0x12c>)
 8000d5a:	f002 fb15 	bl	8003388 <HAL_GPIO_WritePin>
	            value = readADCValue1(3);
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f7ff fee8 	bl	8000b34 <readADCValue1>
 8000d64:	4603      	mov	r3, r0
 8000d66:	81fb      	strh	r3, [r7, #14]
	            break;
 8000d68:	e000      	b.n	8000d6c <readSensor+0x110>
	            break;
 8000d6a:	bf00      	nop
	    }
	return returnAvgData(value,index);
 8000d6c:	79ba      	ldrb	r2, [r7, #6]
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f826 	bl	8000dc4 <returnAvgData>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40010c00 	.word	0x40010c00
 8000d88:	40010800 	.word	0x40010800

08000d8c <delay_us>:

void delay_us(unsigned short us)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <delay_us+0x34>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim1);
 8000d9e:	4808      	ldr	r0, [pc, #32]	@ (8000dc0 <delay_us+0x34>)
 8000da0:	f003 f906 	bl	8003fb0 <HAL_TIM_Base_Start>

    while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000da4:	bf00      	nop
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <delay_us+0x34>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3f9      	bcc.n	8000da6 <delay_us+0x1a>

    HAL_TIM_Base_Stop(&htim1);
 8000db2:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <delay_us+0x34>)
 8000db4:	f003 f946 	bl	8004044 <HAL_TIM_Base_Stop>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000394 	.word	0x20000394

08000dc4 <returnAvgData>:

uint16_t returnAvgData(uint16_t data, uint8_t index){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	460a      	mov	r2, r1
 8000dce:	80fb      	strh	r3, [r7, #6]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	717b      	strb	r3, [r7, #5]
	uint8_t weight = 3;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	743b      	strb	r3, [r7, #16]
	uint32_t sum=data*weight;
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	7c3a      	ldrb	r2, [r7, #16]
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
  float factor = 0.95;
 8000de2:	4b60      	ldr	r3, [pc, #384]	@ (8000f64 <returnAvgData+0x1a0>)
 8000de4:	60fb      	str	r3, [r7, #12]
	uint8_t n = weight;
 8000de6:	7c3b      	ldrb	r3, [r7, #16]
 8000de8:	74fb      	strb	r3, [r7, #19]
	for (uint8_t i=0;i<sensor_buffer_size;i++){
 8000dea:	2300      	movs	r3, #0
 8000dec:	74bb      	strb	r3, [r7, #18]
 8000dee:	e07c      	b.n	8000eea <returnAvgData+0x126>
		if (sensorData[index][i]==0xFFFF){
 8000df0:	797a      	ldrb	r2, [r7, #5]
 8000df2:	7cb9      	ldrb	r1, [r7, #18]
 8000df4:	485c      	ldr	r0, [pc, #368]	@ (8000f68 <returnAvgData+0x1a4>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d113      	bne.n	8000e32 <returnAvgData+0x6e>
			sensorData[index][i]=data;
 8000e0a:	797a      	ldrb	r2, [r7, #5]
 8000e0c:	7cb9      	ldrb	r1, [r7, #18]
 8000e0e:	4856      	ldr	r0, [pc, #344]	@ (8000f68 <returnAvgData+0x1a4>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	88fa      	ldrh	r2, [r7, #6]
 8000e1a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			return sensorData[index][i];
 8000e1e:	797a      	ldrb	r2, [r7, #5]
 8000e20:	7cb9      	ldrb	r1, [r7, #18]
 8000e22:	4851      	ldr	r0, [pc, #324]	@ (8000f68 <returnAvgData+0x1a4>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e30:	e094      	b.n	8000f5c <returnAvgData+0x198>
		}
		else{
      if (sensorData[index][i]>(factor*data)&&sensorData[index][i]<((1+(1-factor))*data)){
 8000e32:	797a      	ldrb	r2, [r7, #5]
 8000e34:	7cb9      	ldrb	r1, [r7, #18]
 8000e36:	484c      	ldr	r0, [pc, #304]	@ (8000f68 <returnAvgData+0x1a4>)
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fa3d 	bl	80002c4 <__aeabi_i2f>
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fa38 	bl	80002c4 <__aeabi_i2f>
 8000e54:	4603      	mov	r3, r0
 8000e56:	68f9      	ldr	r1, [r7, #12]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fa87 	bl	800036c <__aeabi_fmul>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4619      	mov	r1, r3
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fc3e 	bl	80006e4 <__aeabi_fcmpgt>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d03a      	beq.n	8000ee4 <returnAvgData+0x120>
 8000e6e:	797a      	ldrb	r2, [r7, #5]
 8000e70:	7cb9      	ldrb	r1, [r7, #18]
 8000e72:	483d      	ldr	r0, [pc, #244]	@ (8000f68 <returnAvgData+0x1a4>)
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fa1f 	bl	80002c4 <__aeabi_i2f>
 8000e86:	4604      	mov	r4, r0
 8000e88:	68f9      	ldr	r1, [r7, #12]
 8000e8a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000e8e:	f7ff f963 	bl	8000158 <__aeabi_fsub>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff f95f 	bl	800015c <__addsf3>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461d      	mov	r5, r3
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fa0d 	bl	80002c4 <__aeabi_i2f>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f7ff fa5c 	bl	800036c <__aeabi_fmul>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f7ff fbf5 	bl	80006a8 <__aeabi_fcmplt>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00f      	beq.n	8000ee4 <returnAvgData+0x120>
			sum = sum+sensorData[index][i];
 8000ec4:	797a      	ldrb	r2, [r7, #5]
 8000ec6:	7cb9      	ldrb	r1, [r7, #18]
 8000ec8:	4827      	ldr	r0, [pc, #156]	@ (8000f68 <returnAvgData+0x1a4>)
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
			n++;
 8000ede:	7cfb      	ldrb	r3, [r7, #19]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	74fb      	strb	r3, [r7, #19]
	for (uint8_t i=0;i<sensor_buffer_size;i++){
 8000ee4:	7cbb      	ldrb	r3, [r7, #18]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	74bb      	strb	r3, [r7, #18]
 8000eea:	7cbb      	ldrb	r3, [r7, #18]
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	f67f af7f 	bls.w	8000df0 <returnAvgData+0x2c>
      }
		}
	}
  for (uint8_t i=0;i<sensor_buffer_size-1;i++){
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	747b      	strb	r3, [r7, #17]
 8000ef6:	e016      	b.n	8000f26 <returnAvgData+0x162>
    sensorData[index][i]=sensorData[index][i+1];
 8000ef8:	7979      	ldrb	r1, [r7, #5]
 8000efa:	7c7b      	ldrb	r3, [r7, #17]
 8000efc:	1c5c      	adds	r4, r3, #1
 8000efe:	797a      	ldrb	r2, [r7, #5]
 8000f00:	7c78      	ldrb	r0, [r7, #17]
 8000f02:	4d19      	ldr	r5, [pc, #100]	@ (8000f68 <returnAvgData+0x1a4>)
 8000f04:	460b      	mov	r3, r1
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	4423      	add	r3, r4
 8000f0c:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8000f10:	4915      	ldr	r1, [pc, #84]	@ (8000f68 <returnAvgData+0x1a4>)
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	4403      	add	r3, r0
 8000f1a:	4622      	mov	r2, r4
 8000f1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint8_t i=0;i<sensor_buffer_size-1;i++){
 8000f20:	7c7b      	ldrb	r3, [r7, #17]
 8000f22:	3301      	adds	r3, #1
 8000f24:	747b      	strb	r3, [r7, #17]
 8000f26:	7c7b      	ldrb	r3, [r7, #17]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d9e5      	bls.n	8000ef8 <returnAvgData+0x134>
  }
	sensorData[index][sensor_buffer_size-1]=sum/n;
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f34:	797a      	ldrb	r2, [r7, #5]
 8000f36:	b298      	uxth	r0, r3
 8000f38:	490b      	ldr	r1, [pc, #44]	@ (8000f68 <returnAvgData+0x1a4>)
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	440b      	add	r3, r1
 8000f44:	3308      	adds	r3, #8
 8000f46:	4602      	mov	r2, r0
 8000f48:	801a      	strh	r2, [r3, #0]
	return sensorData[index][sensor_buffer_size-1];
 8000f4a:	797a      	ldrb	r2, [r7, #5]
 8000f4c:	4906      	ldr	r1, [pc, #24]	@ (8000f68 <returnAvgData+0x1a4>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	440b      	add	r3, r1
 8000f58:	3308      	adds	r3, #8
 8000f5a:	881b      	ldrh	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bdb0      	pop	{r4, r5, r7, pc}
 8000f64:	3f733333 	.word	0x3f733333
 8000f68:	200000f8 	.word	0x200000f8

08000f6c <setAvgDataEmpty>:

void setAvgDataEmpty(){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<sensor_qtt;i++){
 8000f72:	2300      	movs	r3, #0
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	e016      	b.n	8000fa6 <setAvgDataEmpty+0x3a>
		for (uint8_t j=0;j<sensor_buffer_size;j++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	71bb      	strb	r3, [r7, #6]
 8000f7c:	e00d      	b.n	8000f9a <setAvgDataEmpty+0x2e>
			sensorData[i][j]=0xFFFF;
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	79b9      	ldrb	r1, [r7, #6]
 8000f82:	480d      	ldr	r0, [pc, #52]	@ (8000fb8 <setAvgDataEmpty+0x4c>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f90:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (uint8_t j=0;j<sensor_buffer_size;j++){
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	3301      	adds	r3, #1
 8000f98:	71bb      	strb	r3, [r7, #6]
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d9ee      	bls.n	8000f7e <setAvgDataEmpty+0x12>
	for (uint8_t i=0;i<sensor_qtt;i++){
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b24      	cmp	r3, #36	@ 0x24
 8000faa:	d9e5      	bls.n	8000f78 <setAvgDataEmpty+0xc>
		}
	}
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	200000f8 	.word	0x200000f8

08000fbc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000fc0:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fc2:	4a18      	ldr	r2, [pc, #96]	@ (8001024 <MX_CAN_Init+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fc8:	2204      	movs	r2, #4
 8000fca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fda:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000fde:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fe2:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000fe6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_CAN_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <MX_CAN_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_CAN_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001000:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <MX_CAN_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_CAN_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800100c:	4804      	ldr	r0, [pc, #16]	@ (8001020 <MX_CAN_Init+0x64>)
 800100e:	f001 fd26 	bl	8002a5e <HAL_CAN_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001018:	f000 fd82 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000026c 	.word	0x2000026c
 8001024:	40006400 	.word	0x40006400

08001028 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a1c      	ldr	r2, [pc, #112]	@ (80010b4 <HAL_CAN_MspInit+0x8c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d131      	bne.n	80010ac <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001048:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	4a1a      	ldr	r2, [pc, #104]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 800104e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001052:	61d3      	str	r3, [r2, #28]
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001078:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800107c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	480b      	ldr	r0, [pc, #44]	@ (80010bc <HAL_CAN_MspInit+0x94>)
 800108e:	f001 fff7 	bl	8003080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <HAL_CAN_MspInit+0x94>)
 80010a8:	f001 ffea 	bl	8003080 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40006400 	.word	0x40006400
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800

080010c0 <sendCANString>:


const unsigned char DEBUG_ID = 0x7B;
const unsigned char DEBUG_DLC = 8;

HAL_StatusTypeDef sendCANString(const char* message){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	@ 0x38
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	unsigned long txMailbox;
	unsigned char txData[8];
	
	HAL_StatusTypeDef status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	
	txHeader.StdId = DEBUG_ID;
 80010ce:	237b      	movs	r3, #123	@ 0x7b
 80010d0:	61bb      	str	r3, [r7, #24]
    txHeader.ExtId = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    txHeader.IDE = CAN_ID_STD;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
    txHeader.RTR = CAN_RTR_DATA;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = DEBUG_DLC;
 80010de:	2308      	movs	r3, #8
 80010e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.TransmitGlobalTime = DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	
	unsigned char len = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while (1) {
        if (message[len] == '\0') {
 80010ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d109      	bne.n	8001110 <sendCANString+0x50>
        	  len++;
 80010fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001100:	3301      	adds	r3, #1
 8001102:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
              break;
 8001106:	bf00      	nop
        }
        len++;
    }
	
	for (unsigned char i = 0; i < len; i += 8) {
 8001108:	2300      	movs	r3, #0
 800110a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800110e:	e060      	b.n	80011d2 <sendCANString+0x112>
        len++;
 8001110:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001114:	3301      	adds	r3, #1
 8001116:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if (message[len] == '\0') {
 800111a:	e7e8      	b.n	80010ee <sendCANString+0x2e>
        txHeader.DLC = (len - i > 8) ? 8 : (len - i);
 800111c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001120:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b08      	cmp	r3, #8
 8001128:	bfa8      	it	ge
 800112a:	2308      	movge	r3, #8
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (unsigned char j = 0; j < 8; j++) {
 800112e:	2300      	movs	r3, #0
 8001130:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001134:	e00b      	b.n	800114e <sendCANString+0x8e>
            txData[j] = 0;
 8001136:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800113a:	3338      	adds	r3, #56	@ 0x38
 800113c:	443b      	add	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	f803 2c2c 	strb.w	r2, [r3, #-44]
        for (unsigned char j = 0; j < 8; j++) {
 8001144:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001148:	3301      	adds	r3, #1
 800114a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800114e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001152:	2b07      	cmp	r3, #7
 8001154:	d9ef      	bls.n	8001136 <sendCANString+0x76>
        }
        for (unsigned char j = 0; j < txHeader.DLC; j++) {
 8001156:	2300      	movs	r3, #0
 8001158:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800115c:	e013      	b.n	8001186 <sendCANString+0xc6>
            txData[j] = message[i + j];
 800115e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001162:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001166:	4413      	add	r3, r2
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	441a      	add	r2, r3
 800116e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001172:	7812      	ldrb	r2, [r2, #0]
 8001174:	3338      	adds	r3, #56	@ 0x38
 8001176:	443b      	add	r3, r7
 8001178:	f803 2c2c 	strb.w	r2, [r3, #-44]
        for (unsigned char j = 0; j < txHeader.DLC; j++) {
 800117c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001180:	3301      	adds	r3, #1
 8001182:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001186:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800118a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118c:	429a      	cmp	r2, r3
 800118e:	d3e6      	bcc.n	800115e <sendCANString+0x9e>
        }
        status = HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	f107 020c 	add.w	r2, r7, #12
 8001198:	f107 0118 	add.w	r1, r7, #24
 800119c:	4812      	ldr	r0, [pc, #72]	@ (80011e8 <sendCANString+0x128>)
 800119e:	f001 fd9d 	bl	8002cdc <HAL_CAN_AddTxMessage>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (status != HAL_OK) {
 80011a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <sendCANString+0xf6>
            return status;
 80011b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011b4:	e014      	b.n	80011e0 <sendCANString+0x120>
        }
        while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox));
 80011b6:	bf00      	nop
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	4619      	mov	r1, r3
 80011bc:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <sendCANString+0x128>)
 80011be:	f001 fe5c 	bl	8002e7a <HAL_CAN_IsTxMessagePending>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f7      	bne.n	80011b8 <sendCANString+0xf8>
	for (unsigned char i = 0; i < len; i += 8) {
 80011c8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80011cc:	3308      	adds	r3, #8
 80011ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80011d2:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80011d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011da:	429a      	cmp	r2, r3
 80011dc:	d39e      	bcc.n	800111c <sendCANString+0x5c>
    }
	return HAL_OK;
 80011de:	2300      	movs	r3, #0

}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3738      	adds	r7, #56	@ 0x38
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000026c 	.word	0x2000026c

080011ec <sendCANData>:


HAL_StatusTypeDef sendCANData(unsigned char message[8], unsigned char CAN_ID, unsigned char CAN_DLC){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
 80011f8:	4613      	mov	r3, r2
 80011fa:	70bb      	strb	r3, [r7, #2]
	CAN_TxHeaderTypeDef txHeader;
	unsigned long txMailbox;

	HAL_StatusTypeDef status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	txHeader.StdId = CAN_ID;
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	60fb      	str	r3, [r7, #12]
    txHeader.ExtId = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
    txHeader.IDE = CAN_ID_STD;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
    txHeader.RTR = CAN_RTR_DATA;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
    txHeader.DLC = CAN_DLC;
 8001212:	78bb      	ldrb	r3, [r7, #2]
 8001214:	61fb      	str	r3, [r7, #28]
    txHeader.TransmitGlobalTime = DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3020 	strb.w	r3, [r7, #32]

    status = HAL_CAN_AddTxMessage(&hcan, &txHeader, message, &txMailbox);
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	f107 010c 	add.w	r1, r7, #12
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	480d      	ldr	r0, [pc, #52]	@ (800125c <sendCANData+0x70>)
 8001228:	f001 fd58 	bl	8002cdc <HAL_CAN_AddTxMessage>
 800122c:	4603      	mov	r3, r0
 800122e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8001232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <sendCANData+0x54>
        return status;
 800123a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800123e:	e009      	b.n	8001254 <sendCANData+0x68>
    }
    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){}
 8001240:	bf00      	nop
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	4619      	mov	r1, r3
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <sendCANData+0x70>)
 8001248:	f001 fe17 	bl	8002e7a <HAL_CAN_IsTxMessagePending>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f7      	bne.n	8001242 <sendCANData+0x56>
	return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3728      	adds	r7, #40	@ 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000026c 	.word	0x2000026c

08001260 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	setAvgDataEmpty();
 8001264:	f7ff fe82 	bl	8000f6c <setAvgDataEmpty>
	hal_message=setupSensors();
 8001268:	f000 fc60 	bl	8001b2c <setupSensors>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <MX_FREERTOS_Init+0x9c>)
 8001272:	701a      	strb	r2, [r3, #0]

	Message_Debug_Time = HAL_GetTick();
 8001274:	f000 ff92 	bl	800219c <HAL_GetTick>
 8001278:	4603      	mov	r3, r0
 800127a:	4a21      	ldr	r2, [pc, #132]	@ (8001300 <MX_FREERTOS_Init+0xa0>)
 800127c:	6013      	str	r3, [r2, #0]

	DATA_01.time = HAL_GetTick();
 800127e:	f000 ff8d 	bl	800219c <HAL_GetTick>
 8001282:	4603      	mov	r3, r0
 8001284:	4a1f      	ldr	r2, [pc, #124]	@ (8001304 <MX_FREERTOS_Init+0xa4>)
 8001286:	6013      	str	r3, [r2, #0]
	DATA_02.time = HAL_GetTick();
 8001288:	f000 ff88 	bl	800219c <HAL_GetTick>
 800128c:	4603      	mov	r3, r0
 800128e:	4a1e      	ldr	r2, [pc, #120]	@ (8001308 <MX_FREERTOS_Init+0xa8>)
 8001290:	6013      	str	r3, [r2, #0]
	DATA_03.time = HAL_GetTick();
 8001292:	f000 ff83 	bl	800219c <HAL_GetTick>
 8001296:	4603      	mov	r3, r0
 8001298:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <MX_FREERTOS_Init+0xac>)
 800129a:	6013      	str	r3, [r2, #0]
	DATA_04.time = HAL_GetTick();
 800129c:	f000 ff7e 	bl	800219c <HAL_GetTick>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001310 <MX_FREERTOS_Init+0xb0>)
 80012a4:	6013      	str	r3, [r2, #0]
	DATA_05.time = HAL_GetTick();
 80012a6:	f000 ff79 	bl	800219c <HAL_GetTick>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <MX_FREERTOS_Init+0xb4>)
 80012ae:	6013      	str	r3, [r2, #0]
	DATA_06.time = HAL_GetTick();
 80012b0:	f000 ff74 	bl	800219c <HAL_GetTick>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <MX_FREERTOS_Init+0xb8>)
 80012b8:	6013      	str	r3, [r2, #0]
	DATA_07.time = HAL_GetTick();
 80012ba:	f000 ff6f 	bl	800219c <HAL_GetTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a16      	ldr	r2, [pc, #88]	@ (800131c <MX_FREERTOS_Init+0xbc>)
 80012c2:	6013      	str	r3, [r2, #0]
	DATA_08.time = HAL_GetTick();
 80012c4:	f000 ff6a 	bl	800219c <HAL_GetTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a15      	ldr	r2, [pc, #84]	@ (8001320 <MX_FREERTOS_Init+0xc0>)
 80012cc:	6013      	str	r3, [r2, #0]
	DATA_09.time = HAL_GetTick();
 80012ce:	f000 ff65 	bl	800219c <HAL_GetTick>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a13      	ldr	r2, [pc, #76]	@ (8001324 <MX_FREERTOS_Init+0xc4>)
 80012d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensor_Task */
  sensor_TaskHandle = osThreadNew(sensorTask, NULL, &sensor_Task_attributes);
 80012d8:	4a13      	ldr	r2, [pc, #76]	@ (8001328 <MX_FREERTOS_Init+0xc8>)
 80012da:	2100      	movs	r1, #0
 80012dc:	4813      	ldr	r0, [pc, #76]	@ (800132c <MX_FREERTOS_Init+0xcc>)
 80012de:	f003 fb05 	bl	80048ec <osThreadNew>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <MX_FREERTOS_Init+0xd0>)
 80012e6:	6013      	str	r3, [r2, #0]

  /* creation of CAN_Task */
  CAN_TaskHandle = osThreadNew(StartTask02, NULL, &CAN_Task_attributes);
 80012e8:	4a12      	ldr	r2, [pc, #72]	@ (8001334 <MX_FREERTOS_Init+0xd4>)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4812      	ldr	r0, [pc, #72]	@ (8001338 <MX_FREERTOS_Init+0xd8>)
 80012ee:	f003 fafd 	bl	80048ec <osThreadNew>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a11      	ldr	r2, [pc, #68]	@ (800133c <MX_FREERTOS_Init+0xdc>)
 80012f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000294 	.word	0x20000294
 8001300:	200002a4 	.word	0x200002a4
 8001304:	200002a8 	.word	0x200002a8
 8001308:	200002b8 	.word	0x200002b8
 800130c:	200002c8 	.word	0x200002c8
 8001310:	200002d8 	.word	0x200002d8
 8001314:	200002e8 	.word	0x200002e8
 8001318:	200002f8 	.word	0x200002f8
 800131c:	20000308 	.word	0x20000308
 8001320:	20000318 	.word	0x20000318
 8001324:	20000328 	.word	0x20000328
 8001328:	08007e4c 	.word	0x08007e4c
 800132c:	08001341 	.word	0x08001341
 8001330:	20000298 	.word	0x20000298
 8001334:	08007e70 	.word	0x08007e70
 8001338:	08001921 	.word	0x08001921
 800133c:	2000029c 	.word	0x2000029c

08001340 <sensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensorTask */
void sensorTask(void *argument)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorTask */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001348:	f004 fce8 	bl	8005d1c <xTaskGetTickCount>
 800134c:	4603      	mov	r3, r0
 800134e:	623b      	str	r3, [r7, #32]
	uint16_t adc_value;
	char value[20];
  /* Infinite loop */
  for(;;)
  {
	RTOS_Time = HAL_GetTick();
 8001350:	f000 ff24 	bl	800219c <HAL_GetTick>
 8001354:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uint16_t v_ref = vRefValue(returnAvgData(readADCValue1(VREF_PIN),V_Ref_index));
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff fbec 	bl	8000b34 <readADCValue1>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b72      	ldr	r3, [pc, #456]	@ (800152c <sensorTask+0x1ec>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	4610      	mov	r0, r2
 8001368:	f7ff fd2c 	bl	8000dc4 <returnAvgData>
 800136c:	4603      	mov	r3, r0
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fcae 	bl	8001cd0 <vRefValue>
 8001374:	4603      	mov	r3, r0
 8001376:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t data;
	if (RTOS_Time - Message_Debug_Time >= MESSAGE_DEBUG_REFRESH_RATE) {
 8001378:	4b6d      	ldr	r3, [pc, #436]	@ (8001530 <sensorTask+0x1f0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	4a6c      	ldr	r2, [pc, #432]	@ (8001534 <sensorTask+0x1f4>)
 8001382:	8812      	ldrh	r2, [r2, #0]
 8001384:	4293      	cmp	r3, r2
 8001386:	d321      	bcc.n	80013cc <sensorTask+0x8c>
		Message_Debug_Time = RTOS_Time;
 8001388:	4a69      	ldr	r2, [pc, #420]	@ (8001530 <sensorTask+0x1f0>)
 800138a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138c:	6013      	str	r3, [r2, #0]
		adc_value=resistorValue(readSensor(C1_1,Teste_index),v_ref);
 800138e:	4b6a      	ldr	r3, [pc, #424]	@ (8001538 <sensorTask+0x1f8>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	202b      	movs	r0, #43	@ 0x2b
 8001396:	f7ff fc61 	bl	8000c5c <readSensor>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f000 fcc4 	bl	8001d30 <resistorValue>
 80013a8:	4603      	mov	r3, r0
 80013aa:	853b      	strh	r3, [r7, #40]	@ 0x28
		//adc_value=readSensor(C1_1);
		//hal_message = sendCANString("Teste: ");
		sprintf(value, "%u$", adc_value);
 80013ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4962      	ldr	r1, [pc, #392]	@ (800153c <sensorTask+0x1fc>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f006 f80f 	bl	80073d8 <siprintf>
		//sprintf(value, "%u$", v_ref);
		hal_message = sendCANString(value);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fe7e 	bl	80010c0 <sendCANString>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b5d      	ldr	r3, [pc, #372]	@ (8001540 <sensorTask+0x200>)
 80013ca:	701a      	strb	r2, [r3, #0]
		}

	if (RTOS_Time - DATA_01.time >= DATA_01.refresh_rate) {
 80013cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001544 <sensorTask+0x204>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	4a5b      	ldr	r2, [pc, #364]	@ (8001544 <sensorTask+0x204>)
 80013d6:	7912      	ldrb	r2, [r2, #4]
 80013d8:	4293      	cmp	r3, r2
 80013da:	f0c0 80ce 	bcc.w	800157a <sensorTask+0x23a>
	    DATA_01.time = RTOS_Time;
 80013de:	4a59      	ldr	r2, [pc, #356]	@ (8001544 <sensorTask+0x204>)
 80013e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e2:	6013      	str	r3, [r2, #0]

	    data = vBatValue(returnAvgData(readADCValue2(VBAT_PIN),V_Bat_index));  // Tensao da Bateria
 80013e4:	2004      	movs	r0, #4
 80013e6:	f7ff fbef 	bl	8000bc8 <readADCValue2>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b56      	ldr	r3, [pc, #344]	@ (8001548 <sensorTask+0x208>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	4610      	mov	r0, r2
 80013f6:	f7ff fce5 	bl	8000dc4 <returnAvgData>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fc37 	bl	8001c70 <vBatValue>
 8001402:	4603      	mov	r3, r0
 8001404:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_01.data[0] = data&0xFF;
 8001406:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b4e      	ldr	r3, [pc, #312]	@ (8001544 <sensorTask+0x204>)
 800140c:	71da      	strb	r2, [r3, #7]
	    DATA_01.data[1] = (data>>8)&0x0F;
 800140e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b29b      	uxth	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b49      	ldr	r3, [pc, #292]	@ (8001544 <sensorTask+0x204>)
 800141e:	721a      	strb	r2, [r3, #8]
	    data = readADCValue2(returnAvgData(TEMP_PIN,Temp_index));  // Sensor de Temperatura Interno
 8001420:	4b4a      	ldr	r3, [pc, #296]	@ (800154c <sensorTask+0x20c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	2006      	movs	r0, #6
 8001428:	f7ff fccc 	bl	8000dc4 <returnAvgData>
 800142c:	4603      	mov	r3, r0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fbc9 	bl	8000bc8 <readADCValue2>
 8001436:	4603      	mov	r3, r0
 8001438:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_01.data[1]|=(data&0x0F)<<4;
 800143a:	4b42      	ldr	r3, [pc, #264]	@ (8001544 <sensorTask+0x204>)
 800143c:	7a1b      	ldrb	r3, [r3, #8]
 800143e:	b25a      	sxtb	r2, r3
 8001440:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001442:	b25b      	sxtb	r3, r3
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	b25b      	sxtb	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b25b      	sxtb	r3, r3
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b3d      	ldr	r3, [pc, #244]	@ (8001544 <sensorTask+0x204>)
 8001450:	721a      	strb	r2, [r3, #8]
	    DATA_01.data[2] = (data>>4)&0xFF;
 8001452:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	b29b      	uxth	r3, r3
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b3a      	ldr	r3, [pc, #232]	@ (8001544 <sensorTask+0x204>)
 800145c:	725a      	strb	r2, [r3, #9]
	    DATA_01.data[3] = v_ref&0xFF;    // Tensao Referencia
 800145e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b38      	ldr	r3, [pc, #224]	@ (8001544 <sensorTask+0x204>)
 8001464:	729a      	strb	r2, [r3, #10]
	    DATA_01.data[4] = (v_ref>>8)&0x0F;
 8001466:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	b29b      	uxth	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b33      	ldr	r3, [pc, #204]	@ (8001544 <sensorTask+0x204>)
 8001476:	72da      	strb	r2, [r3, #11]
	    data = readADCValue2(returnAvgData(GEAR_PIN,Gear_index));  // Sensor de Marcha
 8001478:	4b35      	ldr	r3, [pc, #212]	@ (8001550 <sensorTask+0x210>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	2005      	movs	r0, #5
 8001480:	f7ff fca0 	bl	8000dc4 <returnAvgData>
 8001484:	4603      	mov	r3, r0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fb9d 	bl	8000bc8 <readADCValue2>
 800148e:	4603      	mov	r3, r0
 8001490:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    if (data>3682){
 8001492:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001494:	f640 6262 	movw	r2, #3682	@ 0xe62
 8001498:	4293      	cmp	r3, r2
 800149a:	d907      	bls.n	80014ac <sensorTask+0x16c>
	    	DATA_01.data[4] |= (7<<4);
 800149c:	4b29      	ldr	r3, [pc, #164]	@ (8001544 <sensorTask+0x204>)
 800149e:	7adb      	ldrb	r3, [r3, #11]
 80014a0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <sensorTask+0x204>)
 80014a8:	72da      	strb	r2, [r3, #11]
 80014aa:	e05a      	b.n	8001562 <sensorTask+0x222>
	    	}
	    else if (data>2995){
 80014ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014ae:	f640 32b3 	movw	r2, #2995	@ 0xbb3
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d907      	bls.n	80014c6 <sensorTask+0x186>
	    	DATA_01.data[4] |= (1<<4);
 80014b6:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <sensorTask+0x204>)
 80014b8:	7adb      	ldrb	r3, [r3, #11]
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <sensorTask+0x204>)
 80014c2:	72da      	strb	r2, [r3, #11]
 80014c4:	e04d      	b.n	8001562 <sensorTask+0x222>
	    }
	    else if (data>2432){
 80014c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014c8:	f5b3 6f18 	cmp.w	r3, #2432	@ 0x980
 80014cc:	d907      	bls.n	80014de <sensorTask+0x19e>
	    	DATA_01.data[4] |= (2<<4);
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <sensorTask+0x204>)
 80014d0:	7adb      	ldrb	r3, [r3, #11]
 80014d2:	f043 0320 	orr.w	r3, r3, #32
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <sensorTask+0x204>)
 80014da:	72da      	strb	r2, [r3, #11]
 80014dc:	e041      	b.n	8001562 <sensorTask+0x222>
	    }
	    else if (data>1852){
 80014de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014e0:	f240 723c 	movw	r2, #1852	@ 0x73c
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d907      	bls.n	80014f8 <sensorTask+0x1b8>
	    	DATA_01.data[4] |= (3<<4);
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <sensorTask+0x204>)
 80014ea:	7adb      	ldrb	r3, [r3, #11]
 80014ec:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <sensorTask+0x204>)
 80014f4:	72da      	strb	r2, [r3, #11]
 80014f6:	e034      	b.n	8001562 <sensorTask+0x222>
	    }
	    else if (data>1249){
 80014f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014fa:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80014fe:	4293      	cmp	r3, r2
 8001500:	d907      	bls.n	8001512 <sensorTask+0x1d2>
	    	DATA_01.data[4] |= (4<<4);
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <sensorTask+0x204>)
 8001504:	7adb      	ldrb	r3, [r3, #11]
 8001506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <sensorTask+0x204>)
 800150e:	72da      	strb	r2, [r3, #11]
 8001510:	e027      	b.n	8001562 <sensorTask+0x222>
	    }
	    else if (data>672){
 8001512:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001514:	f5b3 7f28 	cmp.w	r3, #672	@ 0x2a0
 8001518:	d91c      	bls.n	8001554 <sensorTask+0x214>
	    	DATA_01.data[4] |= (5<<4);
 800151a:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <sensorTask+0x204>)
 800151c:	7adb      	ldrb	r3, [r3, #11]
 800151e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <sensorTask+0x204>)
 8001526:	72da      	strb	r2, [r3, #11]
 8001528:	e01b      	b.n	8001562 <sensorTask+0x222>
 800152a:	bf00      	nop
 800152c:	08007ea3 	.word	0x08007ea3
 8001530:	200002a4 	.word	0x200002a4
 8001534:	08007e96 	.word	0x08007e96
 8001538:	08007eb1 	.word	0x08007eb1
 800153c:	08007e24 	.word	0x08007e24
 8001540:	20000294 	.word	0x20000294
 8001544:	200002a8 	.word	0x200002a8
 8001548:	08007ea4 	.word	0x08007ea4
 800154c:	08007ea5 	.word	0x08007ea5
 8001550:	08007ea6 	.word	0x08007ea6
	    }
	    else {
	    	DATA_01.data[4] |= (6<<4);
 8001554:	4b9d      	ldr	r3, [pc, #628]	@ (80017cc <sensorTask+0x48c>)
 8001556:	7adb      	ldrb	r3, [r3, #11]
 8001558:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b9b      	ldr	r3, [pc, #620]	@ (80017cc <sensorTask+0x48c>)
 8001560:	72da      	strb	r2, [r3, #11]
	    }
	    hal_message = sendCANData(DATA_01.data,DATA_01.id,DATA_01.dlc);
 8001562:	4b9a      	ldr	r3, [pc, #616]	@ (80017cc <sensorTask+0x48c>)
 8001564:	795b      	ldrb	r3, [r3, #5]
 8001566:	4a99      	ldr	r2, [pc, #612]	@ (80017cc <sensorTask+0x48c>)
 8001568:	7992      	ldrb	r2, [r2, #6]
 800156a:	4619      	mov	r1, r3
 800156c:	4898      	ldr	r0, [pc, #608]	@ (80017d0 <sensorTask+0x490>)
 800156e:	f7ff fe3d 	bl	80011ec <sendCANData>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b97      	ldr	r3, [pc, #604]	@ (80017d4 <sensorTask+0x494>)
 8001578:	701a      	strb	r2, [r3, #0]
	}

	if (RTOS_Time - DATA_02.time >= DATA_02.refresh_rate) {
 800157a:	4b97      	ldr	r3, [pc, #604]	@ (80017d8 <sensorTask+0x498>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	4a95      	ldr	r2, [pc, #596]	@ (80017d8 <sensorTask+0x498>)
 8001584:	7912      	ldrb	r2, [r2, #4]
 8001586:	4293      	cmp	r3, r2
 8001588:	f0c0 808c 	bcc.w	80016a4 <sensorTask+0x364>
	    DATA_02.time = RTOS_Time;
 800158c:	4a92      	ldr	r2, [pc, #584]	@ (80017d8 <sensorTask+0x498>)
 800158e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001590:	6013      	str	r3, [r2, #0]

	    data = readSensor(FR_Susp_Angle,FR_Susp_Angle_index);
 8001592:	4b92      	ldr	r3, [pc, #584]	@ (80017dc <sensorTask+0x49c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4a92      	ldr	r2, [pc, #584]	@ (80017e0 <sensorTask+0x4a0>)
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fb5d 	bl	8000c5c <readSensor>
 80015a2:	4603      	mov	r3, r0
 80015a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_02.data[0] = data&0xFF;;
 80015a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b8b      	ldr	r3, [pc, #556]	@ (80017d8 <sensorTask+0x498>)
 80015ac:	71da      	strb	r2, [r3, #7]
	    DATA_02.data[1] = (data>>8)&0xF;
 80015ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4b86      	ldr	r3, [pc, #536]	@ (80017d8 <sensorTask+0x498>)
 80015be:	721a      	strb	r2, [r3, #8]

	    data = readSensor(FL_Susp_Angle,FL_Susp_Angle_index);
 80015c0:	4b88      	ldr	r3, [pc, #544]	@ (80017e4 <sensorTask+0x4a4>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4a88      	ldr	r2, [pc, #544]	@ (80017e8 <sensorTask+0x4a8>)
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fb46 	bl	8000c5c <readSensor>
 80015d0:	4603      	mov	r3, r0
 80015d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_02.data[1] |= (data&0xF)<<4;
 80015d4:	4b80      	ldr	r3, [pc, #512]	@ (80017d8 <sensorTask+0x498>)
 80015d6:	7a1b      	ldrb	r3, [r3, #8]
 80015d8:	b25a      	sxtb	r2, r3
 80015da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	4b7b      	ldr	r3, [pc, #492]	@ (80017d8 <sensorTask+0x498>)
 80015ea:	721a      	strb	r2, [r3, #8]
	    DATA_02.data[2] = (data>>4)&0xFF;
 80015ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b78      	ldr	r3, [pc, #480]	@ (80017d8 <sensorTask+0x498>)
 80015f6:	725a      	strb	r2, [r3, #9]

	    data = readSensor(RR_Susp_Angle,RR_Susp_Angle_index);
 80015f8:	4b7c      	ldr	r3, [pc, #496]	@ (80017ec <sensorTask+0x4ac>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4a7c      	ldr	r2, [pc, #496]	@ (80017f0 <sensorTask+0x4b0>)
 80015fe:	7812      	ldrb	r2, [r2, #0]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fb2a 	bl	8000c5c <readSensor>
 8001608:	4603      	mov	r3, r0
 800160a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_02.data[3] = data&0xFF;;
 800160c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b71      	ldr	r3, [pc, #452]	@ (80017d8 <sensorTask+0x498>)
 8001612:	729a      	strb	r2, [r3, #10]
	    DATA_02.data[4] = (data>>8)&0xF;
 8001614:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	b29b      	uxth	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b6d      	ldr	r3, [pc, #436]	@ (80017d8 <sensorTask+0x498>)
 8001624:	72da      	strb	r2, [r3, #11]

	    data = readSensor(RL_Susp_Angle,RL_Susp_Angle_index);
 8001626:	4b73      	ldr	r3, [pc, #460]	@ (80017f4 <sensorTask+0x4b4>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	4a73      	ldr	r2, [pc, #460]	@ (80017f8 <sensorTask+0x4b8>)
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fb13 	bl	8000c5c <readSensor>
 8001636:	4603      	mov	r3, r0
 8001638:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_02.data[4] |= (data&0xF)<<4;
 800163a:	4b67      	ldr	r3, [pc, #412]	@ (80017d8 <sensorTask+0x498>)
 800163c:	7adb      	ldrb	r3, [r3, #11]
 800163e:	b25a      	sxtb	r2, r3
 8001640:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001642:	b25b      	sxtb	r3, r3
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	b25b      	sxtb	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b25b      	sxtb	r3, r3
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b62      	ldr	r3, [pc, #392]	@ (80017d8 <sensorTask+0x498>)
 8001650:	72da      	strb	r2, [r3, #11]
	    DATA_02.data[5] = (data>>4)&0xFF;
 8001652:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	b29b      	uxth	r3, r3
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b5f      	ldr	r3, [pc, #380]	@ (80017d8 <sensorTask+0x498>)
 800165c:	731a      	strb	r2, [r3, #12]

	    data = readSensor(Wheel_Angle,Wheel_Angle_index);
 800165e:	4b67      	ldr	r3, [pc, #412]	@ (80017fc <sensorTask+0x4bc>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4a67      	ldr	r2, [pc, #412]	@ (8001800 <sensorTask+0x4c0>)
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff faf7 	bl	8000c5c <readSensor>
 800166e:	4603      	mov	r3, r0
 8001670:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_02.data[6] = data&0xFF;;
 8001672:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b58      	ldr	r3, [pc, #352]	@ (80017d8 <sensorTask+0x498>)
 8001678:	735a      	strb	r2, [r3, #13]
	    DATA_02.data[7] = (data>>8)&0xF;
 800167a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	b29b      	uxth	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b53      	ldr	r3, [pc, #332]	@ (80017d8 <sensorTask+0x498>)
 800168a:	739a      	strb	r2, [r3, #14]

	    hal_message = sendCANData(DATA_02.data,DATA_02.id,DATA_02.dlc);
 800168c:	4b52      	ldr	r3, [pc, #328]	@ (80017d8 <sensorTask+0x498>)
 800168e:	795b      	ldrb	r3, [r3, #5]
 8001690:	4a51      	ldr	r2, [pc, #324]	@ (80017d8 <sensorTask+0x498>)
 8001692:	7992      	ldrb	r2, [r2, #6]
 8001694:	4619      	mov	r1, r3
 8001696:	485b      	ldr	r0, [pc, #364]	@ (8001804 <sensorTask+0x4c4>)
 8001698:	f7ff fda8 	bl	80011ec <sendCANData>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b4c      	ldr	r3, [pc, #304]	@ (80017d4 <sensorTask+0x494>)
 80016a2:	701a      	strb	r2, [r3, #0]
	}

	if (RTOS_Time - DATA_03.time >= DATA_03.refresh_rate) {
 80016a4:	4b58      	ldr	r3, [pc, #352]	@ (8001808 <sensorTask+0x4c8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a56      	ldr	r2, [pc, #344]	@ (8001808 <sensorTask+0x4c8>)
 80016ae:	7912      	ldrb	r2, [r2, #4]
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d374      	bcc.n	800179e <sensorTask+0x45e>
	    DATA_03.time = RTOS_Time;
 80016b4:	4a54      	ldr	r2, [pc, #336]	@ (8001808 <sensorTask+0x4c8>)
 80016b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b8:	6013      	str	r3, [r2, #0]

	    data = readSensor(FR_Hall,FR_Hall_index);
 80016ba:	4b54      	ldr	r3, [pc, #336]	@ (800180c <sensorTask+0x4cc>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4a54      	ldr	r2, [pc, #336]	@ (8001810 <sensorTask+0x4d0>)
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fac9 	bl	8000c5c <readSensor>
 80016ca:	4603      	mov	r3, r0
 80016cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_03.data[0] = data&0xFF;;
 80016ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001808 <sensorTask+0x4c8>)
 80016d4:	71da      	strb	r2, [r3, #7]
	    DATA_03.data[1] = (data>>8)&0xF;
 80016d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	b29b      	uxth	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b48      	ldr	r3, [pc, #288]	@ (8001808 <sensorTask+0x4c8>)
 80016e6:	721a      	strb	r2, [r3, #8]

	    data = readSensor(FL_Hall,FL_Hall_index);
 80016e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <sensorTask+0x4d4>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001818 <sensorTask+0x4d8>)
 80016ee:	7812      	ldrb	r2, [r2, #0]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fab2 	bl	8000c5c <readSensor>
 80016f8:	4603      	mov	r3, r0
 80016fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_03.data[1] |= (data&0xF)<<4;
 80016fc:	4b42      	ldr	r3, [pc, #264]	@ (8001808 <sensorTask+0x4c8>)
 80016fe:	7a1b      	ldrb	r3, [r3, #8]
 8001700:	b25a      	sxtb	r2, r3
 8001702:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001704:	b25b      	sxtb	r3, r3
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	b25b      	sxtb	r3, r3
 800170a:	4313      	orrs	r3, r2
 800170c:	b25b      	sxtb	r3, r3
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b3d      	ldr	r3, [pc, #244]	@ (8001808 <sensorTask+0x4c8>)
 8001712:	721a      	strb	r2, [r3, #8]
	    DATA_03.data[2] = (data>>4)&0xFF;
 8001714:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	b29b      	uxth	r3, r3
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b3a      	ldr	r3, [pc, #232]	@ (8001808 <sensorTask+0x4c8>)
 800171e:	725a      	strb	r2, [r3, #9]

	    data = readSensor(RR_Hall,FL_Hall_index);
 8001720:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <sensorTask+0x4dc>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4a3c      	ldr	r2, [pc, #240]	@ (8001818 <sensorTask+0x4d8>)
 8001726:	7812      	ldrb	r2, [r2, #0]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fa96 	bl	8000c5c <readSensor>
 8001730:	4603      	mov	r3, r0
 8001732:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_03.data[3] = data&0xFF;;
 8001734:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b33      	ldr	r3, [pc, #204]	@ (8001808 <sensorTask+0x4c8>)
 800173a:	729a      	strb	r2, [r3, #10]
	    DATA_03.data[4] = (data>>8)&0xF;
 800173c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	b29b      	uxth	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <sensorTask+0x4c8>)
 800174c:	72da      	strb	r2, [r3, #11]

	    data = readSensor(RL_Hall,RL_Hall_index);
 800174e:	4b34      	ldr	r3, [pc, #208]	@ (8001820 <sensorTask+0x4e0>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4a34      	ldr	r2, [pc, #208]	@ (8001824 <sensorTask+0x4e4>)
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fa7f 	bl	8000c5c <readSensor>
 800175e:	4603      	mov	r3, r0
 8001760:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_03.data[4] |= (data&0xF)<<4;
 8001762:	4b29      	ldr	r3, [pc, #164]	@ (8001808 <sensorTask+0x4c8>)
 8001764:	7adb      	ldrb	r3, [r3, #11]
 8001766:	b25a      	sxtb	r2, r3
 8001768:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800176a:	b25b      	sxtb	r3, r3
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	b25b      	sxtb	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b25b      	sxtb	r3, r3
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <sensorTask+0x4c8>)
 8001778:	72da      	strb	r2, [r3, #11]
	    DATA_03.data[5] = (data>>4)&0xFF;
 800177a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	b29b      	uxth	r3, r3
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <sensorTask+0x4c8>)
 8001784:	731a      	strb	r2, [r3, #12]

	    hal_message = sendCANData(DATA_03.data,DATA_03.id,DATA_03.dlc);
 8001786:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <sensorTask+0x4c8>)
 8001788:	795b      	ldrb	r3, [r3, #5]
 800178a:	4a1f      	ldr	r2, [pc, #124]	@ (8001808 <sensorTask+0x4c8>)
 800178c:	7992      	ldrb	r2, [r2, #6]
 800178e:	4619      	mov	r1, r3
 8001790:	4825      	ldr	r0, [pc, #148]	@ (8001828 <sensorTask+0x4e8>)
 8001792:	f7ff fd2b 	bl	80011ec <sendCANData>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <sensorTask+0x494>)
 800179c:	701a      	strb	r2, [r3, #0]
	    DATA_05.data[5] = (data>>4)&0xFF;

	    hal_message = sendCANData(DATA_05.data,DATA_05.id,DATA_05.dlc);
	}*/

	if (RTOS_Time - DATA_06.time >= DATA_06.refresh_rate) {
 800179e:	4b23      	ldr	r3, [pc, #140]	@ (800182c <sensorTask+0x4ec>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	4a21      	ldr	r2, [pc, #132]	@ (800182c <sensorTask+0x4ec>)
 80017a8:	7912      	ldrb	r2, [r2, #4]
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d379      	bcc.n	80018a2 <sensorTask+0x562>
	    DATA_06.time = RTOS_Time;
 80017ae:	4a1f      	ldr	r2, [pc, #124]	@ (800182c <sensorTask+0x4ec>)
 80017b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b2:	6013      	str	r3, [r2, #0]

	    data = readSensor(Brake_Pedal_Angle,Brake_Pedal_Angle_index);
	    DATA_06.data[1] |= (data&0xF)<<4;
	    DATA_06.data[2] = (data>>4)&0xFF;*/

	    data = readSensor(F_Brakeline_Pressure,F_Brakeline_Pressure_index);
 80017b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <sensorTask+0x4f0>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001834 <sensorTask+0x4f4>)
 80017ba:	7812      	ldrb	r2, [r2, #0]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fa4c 	bl	8000c5c <readSensor>
 80017c4:	4603      	mov	r3, r0
 80017c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80017c8:	e036      	b.n	8001838 <sensorTask+0x4f8>
 80017ca:	bf00      	nop
 80017cc:	200002a8 	.word	0x200002a8
 80017d0:	200002af 	.word	0x200002af
 80017d4:	20000294 	.word	0x20000294
 80017d8:	200002b8 	.word	0x200002b8
 80017dc:	08007e9f 	.word	0x08007e9f
 80017e0:	08007ead 	.word	0x08007ead
 80017e4:	08007ea0 	.word	0x08007ea0
 80017e8:	08007eae 	.word	0x08007eae
 80017ec:	08007ea1 	.word	0x08007ea1
 80017f0:	08007eaf 	.word	0x08007eaf
 80017f4:	08007ea2 	.word	0x08007ea2
 80017f8:	08007eb0 	.word	0x08007eb0
 80017fc:	08007e98 	.word	0x08007e98
 8001800:	08007ea7 	.word	0x08007ea7
 8001804:	200002bf 	.word	0x200002bf
 8001808:	200002c8 	.word	0x200002c8
 800180c:	08007e99 	.word	0x08007e99
 8001810:	08007ea8 	.word	0x08007ea8
 8001814:	08007e9a 	.word	0x08007e9a
 8001818:	08007ea9 	.word	0x08007ea9
 800181c:	08007e9b 	.word	0x08007e9b
 8001820:	08007e9c 	.word	0x08007e9c
 8001824:	08007eaa 	.word	0x08007eaa
 8001828:	200002cf 	.word	0x200002cf
 800182c:	200002f8 	.word	0x200002f8
 8001830:	08007e9d 	.word	0x08007e9d
 8001834:	08007eab 	.word	0x08007eab
	    DATA_06.data[3] = data&0xFF;;
 8001838:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b2f      	ldr	r3, [pc, #188]	@ (80018fc <sensorTask+0x5bc>)
 800183e:	729a      	strb	r2, [r3, #10]
	    DATA_06.data[4] = (data>>8)&0xF;
 8001840:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	b29b      	uxth	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <sensorTask+0x5bc>)
 8001850:	72da      	strb	r2, [r3, #11]

	    data = readSensor(R_Brakeline_Pressure,R_Brakeline_Pressure_index);
 8001852:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <sensorTask+0x5c0>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4a2b      	ldr	r2, [pc, #172]	@ (8001904 <sensorTask+0x5c4>)
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f9fd 	bl	8000c5c <readSensor>
 8001862:	4603      	mov	r3, r0
 8001864:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_06.data[4] |= (data&0xF)<<4;
 8001866:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <sensorTask+0x5bc>)
 8001868:	7adb      	ldrb	r3, [r3, #11]
 800186a:	b25a      	sxtb	r2, r3
 800186c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800186e:	b25b      	sxtb	r3, r3
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	b25b      	sxtb	r3, r3
 8001874:	4313      	orrs	r3, r2
 8001876:	b25b      	sxtb	r3, r3
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <sensorTask+0x5bc>)
 800187c:	72da      	strb	r2, [r3, #11]
	    DATA_06.data[5] = (data>>4)&0xFF;
 800187e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	b29b      	uxth	r3, r3
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <sensorTask+0x5bc>)
 8001888:	731a      	strb	r2, [r3, #12]

	    hal_message = sendCANData(DATA_06.data,DATA_06.id,DATA_06.dlc);
 800188a:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <sensorTask+0x5bc>)
 800188c:	795b      	ldrb	r3, [r3, #5]
 800188e:	4a1b      	ldr	r2, [pc, #108]	@ (80018fc <sensorTask+0x5bc>)
 8001890:	7992      	ldrb	r2, [r2, #6]
 8001892:	4619      	mov	r1, r3
 8001894:	481c      	ldr	r0, [pc, #112]	@ (8001908 <sensorTask+0x5c8>)
 8001896:	f7ff fca9 	bl	80011ec <sendCANData>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <sensorTask+0x5cc>)
 80018a0:	701a      	strb	r2, [r3, #0]
	if (RTOS_Time - DATA_09.time >= DATA_09.refresh_rate) {
	    DATA_09.time = RTOS_Time;
	}*/


	if (RTOS_Time - BUFFER_ACK.time >= BUFFER_ACK.refresh_rate) {
 80018a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <sensorTask+0x5d0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	4a19      	ldr	r2, [pc, #100]	@ (8001910 <sensorTask+0x5d0>)
 80018ac:	7912      	ldrb	r2, [r2, #4]
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d311      	bcc.n	80018d6 <sensorTask+0x596>
		BUFFER_ACK.time = RTOS_Time;
 80018b2:	4a17      	ldr	r2, [pc, #92]	@ (8001910 <sensorTask+0x5d0>)
 80018b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b6:	6013      	str	r3, [r2, #0]
		BUFFER_ACK.data[0]='1';
 80018b8:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <sensorTask+0x5d0>)
 80018ba:	2231      	movs	r2, #49	@ 0x31
 80018bc:	71da      	strb	r2, [r3, #7]
		hal_message = sendCANData(BUFFER_ACK.data,BUFFER_ACK.id,BUFFER_ACK.dlc);
 80018be:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <sensorTask+0x5d0>)
 80018c0:	795b      	ldrb	r3, [r3, #5]
 80018c2:	4a13      	ldr	r2, [pc, #76]	@ (8001910 <sensorTask+0x5d0>)
 80018c4:	7992      	ldrb	r2, [r2, #6]
 80018c6:	4619      	mov	r1, r3
 80018c8:	4812      	ldr	r0, [pc, #72]	@ (8001914 <sensorTask+0x5d4>)
 80018ca:	f7ff fc8f 	bl	80011ec <sendCANData>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <sensorTask+0x5cc>)
 80018d4:	701a      	strb	r2, [r3, #0]
	}
	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(Time_Mult));
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <sensorTask+0x5d8>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	4a0d      	ldr	r2, [pc, #52]	@ (800191c <sensorTask+0x5dc>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	099a      	lsrs	r2, r3, #6
 80018ec:	f107 0320 	add.w	r3, r7, #32
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 f840 	bl	8005978 <vTaskDelayUntil>
  {
 80018f8:	e52a      	b.n	8001350 <sensorTask+0x10>
 80018fa:	bf00      	nop
 80018fc:	200002f8 	.word	0x200002f8
 8001900:	08007e9e 	.word	0x08007e9e
 8001904:	08007eac 	.word	0x08007eac
 8001908:	200002ff 	.word	0x200002ff
 800190c:	20000294 	.word	0x20000294
 8001910:	20000338 	.word	0x20000338
 8001914:	2000033f 	.word	0x2000033f
 8001918:	08007e94 	.word	0x08007e94
 800191c:	10624dd3 	.word	0x10624dd3

08001920 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f003 f871 	bl	8004a10 <osDelay>
 800192e:	e7fb      	b.n	8001928 <StartTask02+0x8>

08001930 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001944:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <MX_GPIO_Init+0xb8>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a27      	ldr	r2, [pc, #156]	@ (80019e8 <MX_GPIO_Init+0xb8>)
 800194a:	f043 0320 	orr.w	r3, r3, #32
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <MX_GPIO_Init+0xb8>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0320 	and.w	r3, r3, #32
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <MX_GPIO_Init+0xb8>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a21      	ldr	r2, [pc, #132]	@ (80019e8 <MX_GPIO_Init+0xb8>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <MX_GPIO_Init+0xb8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001974:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <MX_GPIO_Init+0xb8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a1b      	ldr	r2, [pc, #108]	@ (80019e8 <MX_GPIO_Init+0xb8>)
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <MX_GPIO_Init+0xb8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 8001992:	4816      	ldr	r0, [pc, #88]	@ (80019ec <MX_GPIO_Init+0xbc>)
 8001994:	f001 fcf8 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 800199e:	4814      	ldr	r0, [pc, #80]	@ (80019f0 <MX_GPIO_Init+0xc0>)
 80019a0:	f001 fcf2 	bl	8003388 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80019a4:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80019a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4619      	mov	r1, r3
 80019bc:	480b      	ldr	r0, [pc, #44]	@ (80019ec <MX_GPIO_Init+0xbc>)
 80019be:	f001 fb5f 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80019c2:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80019c6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4619      	mov	r1, r3
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_GPIO_Init+0xc0>)
 80019dc:	f001 fb50 	bl	8003080 <HAL_GPIO_Init>

}
 80019e0:	bf00      	nop
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010800 	.word	0x40010800
 80019f0:	40010c00 	.word	0x40010c00

080019f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f8:	f000 fba8 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fc:	f000 f822 	bl	8001a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a00:	f7ff ff96 	bl	8001930 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a04:	f7fe fe98 	bl	8000738 <MX_ADC1_Init>
  MX_CAN_Init();
 8001a08:	f7ff fad8 	bl	8000fbc <MX_CAN_Init>
  MX_ADC2_Init();
 8001a0c:	f7fe fed2 	bl	80007b4 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001a10:	f000 fb08 	bl	8002024 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8001a14:	4808      	ldr	r0, [pc, #32]	@ (8001a38 <main+0x44>)
 8001a16:	f001 f91d 	bl	8002c54 <HAL_CAN_Start>
  can_msg = sendCANString("CAN Started");
 8001a1a:	4808      	ldr	r0, [pc, #32]	@ (8001a3c <main+0x48>)
 8001a1c:	f7ff fb50 	bl	80010c0 <sendCANString>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <main+0x4c>)
 8001a26:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a28:	f002 ff18 	bl	800485c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001a2c:	f7ff fc18 	bl	8001260 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a30:	f002 ff36 	bl	80048a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <main+0x40>
 8001a38:	2000026c 	.word	0x2000026c
 8001a3c:	08007e28 	.word	0x08007e28
 8001a40:	200002a0 	.word	0x200002a0

08001a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b094      	sub	sp, #80	@ 0x50
 8001a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a4e:	2228      	movs	r2, #40	@ 0x28
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f005 fce2 	bl	800741c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a74:	2301      	movs	r3, #1
 8001a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a82:	2301      	movs	r3, #1
 8001a84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a86:	2302      	movs	r3, #2
 8001a88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a90:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 fc8c 	bl	80033b8 <HAL_RCC_OscConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001aa6:	f000 f83b 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aaa:	230f      	movs	r3, #15
 8001aac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fef8 	bl	80038bc <HAL_RCC_ClockConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ad2:	f000 f825 	bl	8001b20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ade:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 f8a8 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001aee:	f000 f817 	bl	8001b20 <Error_Handler>
  }
}
 8001af2:	bf00      	nop
 8001af4:	3750      	adds	r7, #80	@ 0x50
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001b0e:	f000 fb33 	bl	8002178 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40000800 	.word	0x40000800

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <Error_Handler+0x8>

08001b2c <setupSensors>:
Sensor DATA_08;
Sensor DATA_09;
Sensor BUFFER_ACK;


HAL_StatusTypeDef setupSensors(){
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
	DATA_01.refresh_rate = Time_Mult;
 8001b30:	2202      	movs	r2, #2
 8001b32:	4b45      	ldr	r3, [pc, #276]	@ (8001c48 <setupSensors+0x11c>)
 8001b34:	711a      	strb	r2, [r3, #4]
	DATA_01.id = 0x02;
 8001b36:	4b44      	ldr	r3, [pc, #272]	@ (8001c48 <setupSensors+0x11c>)
 8001b38:	2202      	movs	r2, #2
 8001b3a:	715a      	strb	r2, [r3, #5]
	DATA_01.dlc = 5;
 8001b3c:	4b42      	ldr	r3, [pc, #264]	@ (8001c48 <setupSensors+0x11c>)
 8001b3e:	2205      	movs	r2, #5
 8001b40:	719a      	strb	r2, [r3, #6]

	DATA_02.refresh_rate = Time_Mult;
 8001b42:	2202      	movs	r2, #2
 8001b44:	4b41      	ldr	r3, [pc, #260]	@ (8001c4c <setupSensors+0x120>)
 8001b46:	711a      	strb	r2, [r3, #4]
	DATA_02.id = 0x03;
 8001b48:	4b40      	ldr	r3, [pc, #256]	@ (8001c4c <setupSensors+0x120>)
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	715a      	strb	r2, [r3, #5]
	DATA_02.dlc = 8;
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c4c <setupSensors+0x120>)
 8001b50:	2208      	movs	r2, #8
 8001b52:	719a      	strb	r2, [r3, #6]

	DATA_03.refresh_rate = Time_Mult;
 8001b54:	2202      	movs	r2, #2
 8001b56:	4b3e      	ldr	r3, [pc, #248]	@ (8001c50 <setupSensors+0x124>)
 8001b58:	711a      	strb	r2, [r3, #4]
	DATA_03.id = 0x04;
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c50 <setupSensors+0x124>)
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	715a      	strb	r2, [r3, #5]
	DATA_03.dlc = 8;
 8001b60:	4b3b      	ldr	r3, [pc, #236]	@ (8001c50 <setupSensors+0x124>)
 8001b62:	2208      	movs	r2, #8
 8001b64:	719a      	strb	r2, [r3, #6]

	DATA_04.refresh_rate = 25*Time_Mult;
 8001b66:	2302      	movs	r3, #2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	461a      	mov	r2, r3
 8001b70:	0091      	lsls	r1, r2, #2
 8001b72:	461a      	mov	r2, r3
 8001b74:	460b      	mov	r3, r1
 8001b76:	4413      	add	r3, r2
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b36      	ldr	r3, [pc, #216]	@ (8001c54 <setupSensors+0x128>)
 8001b7c:	711a      	strb	r2, [r3, #4]
	DATA_04.id = 0x05;
 8001b7e:	4b35      	ldr	r3, [pc, #212]	@ (8001c54 <setupSensors+0x128>)
 8001b80:	2205      	movs	r2, #5
 8001b82:	715a      	strb	r2, [r3, #5]
	DATA_04.dlc = 8;
 8001b84:	4b33      	ldr	r3, [pc, #204]	@ (8001c54 <setupSensors+0x128>)
 8001b86:	2208      	movs	r2, #8
 8001b88:	719a      	strb	r2, [r3, #6]

	DATA_05.refresh_rate = 25*Time_Mult;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	0092      	lsls	r2, r2, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	461a      	mov	r2, r3
 8001b94:	0091      	lsls	r1, r2, #2
 8001b96:	461a      	mov	r2, r3
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c58 <setupSensors+0x12c>)
 8001ba0:	711a      	strb	r2, [r3, #4]
	DATA_05.id = 0x06;
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c58 <setupSensors+0x12c>)
 8001ba4:	2206      	movs	r2, #6
 8001ba6:	715a      	strb	r2, [r3, #5]
	DATA_05.dlc = 6;
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c58 <setupSensors+0x12c>)
 8001baa:	2206      	movs	r2, #6
 8001bac:	719a      	strb	r2, [r3, #6]

	DATA_06.refresh_rate = Time_Mult;
 8001bae:	2202      	movs	r2, #2
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <setupSensors+0x130>)
 8001bb2:	711a      	strb	r2, [r3, #4]
	DATA_06.id = 0x07;
 8001bb4:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <setupSensors+0x130>)
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	715a      	strb	r2, [r3, #5]
	DATA_06.dlc = 6;
 8001bba:	4b28      	ldr	r3, [pc, #160]	@ (8001c5c <setupSensors+0x130>)
 8001bbc:	2206      	movs	r2, #6
 8001bbe:	719a      	strb	r2, [r3, #6]

	DATA_07.refresh_rate = 25*Time_Mult;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	0091      	lsls	r1, r2, #2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <setupSensors+0x134>)
 8001bd6:	711a      	strb	r2, [r3, #4]
	DATA_07.id = 0x08;
 8001bd8:	4b21      	ldr	r3, [pc, #132]	@ (8001c60 <setupSensors+0x134>)
 8001bda:	2208      	movs	r2, #8
 8001bdc:	715a      	strb	r2, [r3, #5]
	DATA_07.dlc = 8;
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <setupSensors+0x134>)
 8001be0:	2208      	movs	r2, #8
 8001be2:	719a      	strb	r2, [r3, #6]

	DATA_08.refresh_rate = 25*Time_Mult;
 8001be4:	2302      	movs	r3, #2
 8001be6:	461a      	mov	r2, r3
 8001be8:	0092      	lsls	r2, r2, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	0091      	lsls	r1, r2, #2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <setupSensors+0x138>)
 8001bfa:	711a      	strb	r2, [r3, #4]
	DATA_08.id = 0x09;
 8001bfc:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <setupSensors+0x138>)
 8001bfe:	2209      	movs	r2, #9
 8001c00:	715a      	strb	r2, [r3, #5]
	DATA_08.dlc = 8;
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <setupSensors+0x138>)
 8001c04:	2208      	movs	r2, #8
 8001c06:	719a      	strb	r2, [r3, #6]

	DATA_09.refresh_rate = 25*Time_Mult;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	0091      	lsls	r1, r2, #2
 8001c14:	461a      	mov	r2, r3
 8001c16:	460b      	mov	r3, r1
 8001c18:	4413      	add	r3, r2
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <setupSensors+0x13c>)
 8001c1e:	711a      	strb	r2, [r3, #4]
	DATA_09.id = 0x0A;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <setupSensors+0x13c>)
 8001c22:	220a      	movs	r2, #10
 8001c24:	715a      	strb	r2, [r3, #5]
	DATA_09.dlc = 6;
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <setupSensors+0x13c>)
 8001c28:	2206      	movs	r2, #6
 8001c2a:	719a      	strb	r2, [r3, #6]

	BUFFER_ACK.refresh_rate = Time_Mult;
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <setupSensors+0x140>)
 8001c30:	711a      	strb	r2, [r3, #4]
	BUFFER_ACK.id = 0x0B;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <setupSensors+0x140>)
 8001c34:	220b      	movs	r2, #11
 8001c36:	715a      	strb	r2, [r3, #5]
	BUFFER_ACK.dlc = 1;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <setupSensors+0x140>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	200002a8 	.word	0x200002a8
 8001c4c:	200002b8 	.word	0x200002b8
 8001c50:	200002c8 	.word	0x200002c8
 8001c54:	200002d8 	.word	0x200002d8
 8001c58:	200002e8 	.word	0x200002e8
 8001c5c:	200002f8 	.word	0x200002f8
 8001c60:	20000308 	.word	0x20000308
 8001c64:	20000318 	.word	0x20000318
 8001c68:	20000328 	.word	0x20000328
 8001c6c:	20000338 	.word	0x20000338

08001c70 <vBatValue>:

unsigned short vBatValue(unsigned short ADC_Value){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
	float vBat = ADC_Value*(VBAT_R1 + VBAT_R2)/VBAT_R2;
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	f645 525c 	movw	r2, #23900	@ 0x5d5c
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <vBatValue+0x54>)
 8001c86:	fb82 1203 	smull	r1, r2, r2, r3
 8001c8a:	1252      	asrs	r2, r2, #9
 8001c8c:	17db      	asrs	r3, r3, #31
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fb17 	bl	80002c4 <__aeabi_i2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	60fb      	str	r3, [r7, #12]
	unsigned short vBat0 = vBat/A_20V * 4095;
 8001c9a:	490b      	ldr	r1, [pc, #44]	@ (8001cc8 <vBatValue+0x58>)
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7fe fc19 	bl	80004d4 <__aeabi_fdiv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4909      	ldr	r1, [pc, #36]	@ (8001ccc <vBatValue+0x5c>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fb60 	bl	800036c <__aeabi_fmul>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fd22 	bl	80006f8 <__aeabi_f2uiz>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	817b      	strh	r3, [r7, #10]
	return vBat0;
 8001cb8:	897b      	ldrh	r3, [r7, #10]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	219bb355 	.word	0x219bb355
 8001cc8:	46c1e400 	.word	0x46c1e400
 8001ccc:	457ff000 	.word	0x457ff000

08001cd0 <vRefValue>:

unsigned short vRefValue(unsigned short ADC_Value){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
	float vRef = ADC_Value*(V_REF_R1 + V_REF_R2)/V_REF_R2;
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	f241 72d4 	movw	r2, #6100	@ 0x17d4
 8001ce0:	fb02 f303 	mul.w	r3, r2, r3
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d24 <vRefValue+0x54>)
 8001ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cea:	1252      	asrs	r2, r2, #9
 8001cec:	17db      	asrs	r3, r3, #31
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fae7 	bl	80002c4 <__aeabi_i2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	60fb      	str	r3, [r7, #12]
	unsigned short vRef0 = vRef/A_5_5V * 4095;
 8001cfa:	490b      	ldr	r1, [pc, #44]	@ (8001d28 <vRefValue+0x58>)
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7fe fbe9 	bl	80004d4 <__aeabi_fdiv>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4909      	ldr	r1, [pc, #36]	@ (8001d2c <vRefValue+0x5c>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fb30 	bl	800036c <__aeabi_fmul>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fcf2 	bl	80006f8 <__aeabi_f2uiz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	817b      	strh	r3, [r7, #10]
	return vRef0;
 8001d18:	897b      	ldrh	r3, [r7, #10]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	219bb355 	.word	0x219bb355
 8001d28:	45d54800 	.word	0x45d54800
 8001d2c:	457ff000 	.word	0x457ff000

08001d30 <resistorValue>:

unsigned short resistorValue(unsigned short ADC_Value,unsigned short vRef){
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	80fb      	strh	r3, [r7, #6]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	80bb      	strh	r3, [r7, #4]
	if(ADC_Value==0){
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <resistorValue+0x1a>
		return 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e029      	b.n	8001d9e <resistorValue+0x6e>
	}
	unsigned short vRefProp = propVRef(vRef);
 8001d4a:	88bb      	ldrh	r3, [r7, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f82f 	bl	8001db0 <propVRef>
 8001d52:	4603      	mov	r3, r0
 8001d54:	81fb      	strh	r3, [r7, #14]
	float Rvalue = (((float)vRefProp/ADC_Value)* MUX2_R2) - MUX2_R1 - MUX2_R2;
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe faaf 	bl	80002bc <__aeabi_ui2f>
 8001d5e:	4604      	mov	r4, r0
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe faae 	bl	80002c4 <__aeabi_i2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7fe fbb1 	bl	80004d4 <__aeabi_fdiv>
 8001d72:	4603      	mov	r3, r0
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <resistorValue+0x78>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe faf8 	bl	800036c <__aeabi_fmul>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	490b      	ldr	r1, [pc, #44]	@ (8001dac <resistorValue+0x7c>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe f9e9 	bl	8000158 <__aeabi_fsub>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4907      	ldr	r1, [pc, #28]	@ (8001da8 <resistorValue+0x78>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe f9e4 	bl	8000158 <__aeabi_fsub>
 8001d90:	4603      	mov	r3, r0
 8001d92:	60bb      	str	r3, [r7, #8]
	return (unsigned short)Rvalue;
 8001d94:	68b8      	ldr	r0, [r7, #8]
 8001d96:	f7fe fcaf 	bl	80006f8 <__aeabi_f2uiz>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b29b      	uxth	r3, r3
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd90      	pop	{r4, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	4573c000 	.word	0x4573c000
 8001dac:	45098000 	.word	0x45098000

08001db0 <propVRef>:

unsigned short propVRef(unsigned short vRef){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
	float prop = (float)vRef/4095;
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fa7d 	bl	80002bc <__aeabi_ui2f>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	490a      	ldr	r1, [pc, #40]	@ (8001df0 <propVRef+0x40>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fb84 	bl	80004d4 <__aeabi_fdiv>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60fb      	str	r3, [r7, #12]
	prop = prop * A_5_5V;
 8001dd0:	4908      	ldr	r1, [pc, #32]	@ (8001df4 <propVRef+0x44>)
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7fe faca 	bl	800036c <__aeabi_fmul>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60fb      	str	r3, [r7, #12]
	return (unsigned short)prop;
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7fe fc8b 	bl	80006f8 <__aeabi_f2uiz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29b      	uxth	r3, r3
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	457ff000 	.word	0x457ff000
 8001df4:	45d54800 	.word	0x45d54800

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dfe:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <HAL_MspInit+0x68>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	4a17      	ldr	r2, [pc, #92]	@ (8001e60 <HAL_MspInit+0x68>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6193      	str	r3, [r2, #24]
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <HAL_MspInit+0x68>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_MspInit+0x68>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <HAL_MspInit+0x68>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]
 8001e22:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <HAL_MspInit+0x68>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	210f      	movs	r1, #15
 8001e32:	f06f 0001 	mvn.w	r0, #1
 8001e36:	f001 f8f8 	bl	800302a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_MspInit+0x6c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <HAL_MspInit+0x6c>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000

08001e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	@ 0x38
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e7e:	4b34      	ldr	r3, [pc, #208]	@ (8001f50 <HAL_InitTick+0xe8>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a33      	ldr	r2, [pc, #204]	@ (8001f50 <HAL_InitTick+0xe8>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b31      	ldr	r3, [pc, #196]	@ (8001f50 <HAL_InitTick+0xe8>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e96:	f107 0210 	add.w	r2, r7, #16
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f001 fe7b 	bl	8003b9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d103      	bne.n	8001eb8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eb0:	f001 fe4c 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8001eb4:	6378      	str	r0, [r7, #52]	@ 0x34
 8001eb6:	e004      	b.n	8001ec2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001eb8:	f001 fe48 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec4:	4a23      	ldr	r2, [pc, #140]	@ (8001f54 <HAL_InitTick+0xec>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0c9b      	lsrs	r3, r3, #18
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001ed0:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <HAL_InitTick+0xf0>)
 8001ed2:	4a22      	ldr	r2, [pc, #136]	@ (8001f5c <HAL_InitTick+0xf4>)
 8001ed4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <HAL_InitTick+0xf0>)
 8001ed8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001edc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001ede:	4a1e      	ldr	r2, [pc, #120]	@ (8001f58 <HAL_InitTick+0xf0>)
 8001ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_InitTick+0xf0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eea:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_InitTick+0xf0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_InitTick+0xf0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001ef6:	4818      	ldr	r0, [pc, #96]	@ (8001f58 <HAL_InitTick+0xf0>)
 8001ef8:	f002 f80a 	bl	8003f10 <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d11b      	bne.n	8001f42 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001f0a:	4813      	ldr	r0, [pc, #76]	@ (8001f58 <HAL_InitTick+0xf0>)
 8001f0c:	f002 f8c0 	bl	8004090 <HAL_TIM_Base_Start_IT>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d111      	bne.n	8001f42 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f1e:	201e      	movs	r0, #30
 8001f20:	f001 f89f 	bl	8003062 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b0f      	cmp	r3, #15
 8001f28:	d808      	bhi.n	8001f3c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	201e      	movs	r0, #30
 8001f30:	f001 f87b 	bl	800302a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f34:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <HAL_InitTick+0xf8>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e002      	b.n	8001f42 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f42:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3738      	adds	r7, #56	@ 0x38
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	431bde83 	.word	0x431bde83
 8001f58:	20000348 	.word	0x20000348
 8001f5c:	40000800 	.word	0x40000800
 8001f60:	20000008 	.word	0x20000008

08001f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <NMI_Handler+0x4>

08001f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <HardFault_Handler+0x4>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f9c:	4802      	ldr	r0, [pc, #8]	@ (8001fa8 <TIM4_IRQHandler+0x10>)
 8001f9e:	f002 f8c9 	bl	8004134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000348 	.word	0x20000348

08001fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	@ (8002008 <_sbrk+0x5c>)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <_sbrk+0x60>)
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <_sbrk+0x64>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <_sbrk+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d207      	bcs.n	8001fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fdc:	f005 fa84 	bl	80074e8 <__errno>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	e009      	b.n	8002000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <_sbrk+0x64>)
 8001ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20005000 	.word	0x20005000
 800200c:	00000400 	.word	0x00000400
 8002010:	20000390 	.word	0x20000390
 8002014:	20001f10 	.word	0x20001f10

08002018 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002038:	463b      	mov	r3, r7
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002040:	4b1e      	ldr	r3, [pc, #120]	@ (80020bc <MX_TIM1_Init+0x98>)
 8002042:	4a1f      	ldr	r2, [pc, #124]	@ (80020c0 <MX_TIM1_Init+0x9c>)
 8002044:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <MX_TIM1_Init+0x98>)
 8002048:	2247      	movs	r2, #71	@ 0x47
 800204a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204c:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <MX_TIM1_Init+0x98>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002052:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <MX_TIM1_Init+0x98>)
 8002054:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002058:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205a:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <MX_TIM1_Init+0x98>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002060:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <MX_TIM1_Init+0x98>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <MX_TIM1_Init+0x98>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800206c:	4813      	ldr	r0, [pc, #76]	@ (80020bc <MX_TIM1_Init+0x98>)
 800206e:	f001 ff4f 	bl	8003f10 <HAL_TIM_Base_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002078:	f7ff fd52 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002080:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	4619      	mov	r1, r3
 8002088:	480c      	ldr	r0, [pc, #48]	@ (80020bc <MX_TIM1_Init+0x98>)
 800208a:	f002 f943 	bl	8004314 <HAL_TIM_ConfigClockSource>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002094:	f7ff fd44 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020a0:	463b      	mov	r3, r7
 80020a2:	4619      	mov	r1, r3
 80020a4:	4805      	ldr	r0, [pc, #20]	@ (80020bc <MX_TIM1_Init+0x98>)
 80020a6:	f002 fb25 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80020b0:	f7ff fd36 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020b4:	bf00      	nop
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000394 	.word	0x20000394
 80020c0:	40012c00 	.word	0x40012c00

080020c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a09      	ldr	r2, [pc, #36]	@ (80020f8 <HAL_TIM_Base_MspInit+0x34>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10b      	bne.n	80020ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d6:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <HAL_TIM_Base_MspInit+0x38>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	4a08      	ldr	r2, [pc, #32]	@ (80020fc <HAL_TIM_Base_MspInit+0x38>)
 80020dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020e0:	6193      	str	r3, [r2, #24]
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <HAL_TIM_Base_MspInit+0x38>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40021000 	.word	0x40021000

08002100 <Reset_Handler>:
 8002100:	f7ff ff8a 	bl	8002018 <SystemInit>
 8002104:	480b      	ldr	r0, [pc, #44]	@ (8002134 <LoopFillZerobss+0xe>)
 8002106:	490c      	ldr	r1, [pc, #48]	@ (8002138 <LoopFillZerobss+0x12>)
 8002108:	4a0c      	ldr	r2, [pc, #48]	@ (800213c <LoopFillZerobss+0x16>)
 800210a:	2300      	movs	r3, #0
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:
 800210e:	58d4      	ldr	r4, [r2, r3]
 8002110:	50c4      	str	r4, [r0, r3]
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:
 8002114:	18c4      	adds	r4, r0, r3
 8002116:	428c      	cmp	r4, r1
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
 800211a:	4a09      	ldr	r2, [pc, #36]	@ (8002140 <LoopFillZerobss+0x1a>)
 800211c:	4c09      	ldr	r4, [pc, #36]	@ (8002144 <LoopFillZerobss+0x1e>)
 800211e:	2300      	movs	r3, #0
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:
 8002126:	42a2      	cmp	r2, r4
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>
 800212a:	f005 f9e3 	bl	80074f4 <__libc_init_array>
 800212e:	f7ff fc61 	bl	80019f4 <main>
 8002132:	4770      	bx	lr
 8002134:	20000000 	.word	0x20000000
 8002138:	20000064 	.word	0x20000064
 800213c:	08007f30 	.word	0x08007f30
 8002140:	20000064 	.word	0x20000064
 8002144:	20001f10 	.word	0x20001f10

08002148 <ADC1_2_IRQHandler>:
 8002148:	e7fe      	b.n	8002148 <ADC1_2_IRQHandler>
	...

0800214c <HAL_Init>:
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_Init+0x28>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a07      	ldr	r2, [pc, #28]	@ (8002174 <HAL_Init+0x28>)
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	2003      	movs	r0, #3
 800215e:	f000 ff59 	bl	8003014 <HAL_NVIC_SetPriorityGrouping>
 8002162:	200f      	movs	r0, #15
 8002164:	f7ff fe80 	bl	8001e68 <HAL_InitTick>
 8002168:	f7ff fe46 	bl	8001df8 <HAL_MspInit>
 800216c:	2300      	movs	r3, #0
 800216e:	4618      	mov	r0, r3
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40022000 	.word	0x40022000

08002178 <HAL_IncTick>:
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_IncTick+0x1c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <HAL_IncTick+0x20>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a03      	ldr	r2, [pc, #12]	@ (8002198 <HAL_IncTick+0x20>)
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	2000000c 	.word	0x2000000c
 8002198:	200003dc 	.word	0x200003dc

0800219c <HAL_GetTick>:
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4b02      	ldr	r3, [pc, #8]	@ (80021ac <HAL_GetTick+0x10>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	200003dc 	.word	0x200003dc

080021b0 <HAL_ADC_Init>:
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	2300      	movs	r3, #0
 80021ba:	75fb      	strb	r3, [r7, #23]
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_Init+0x22>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0be      	b.n	8002350 <HAL_ADC_Init+0x1a0>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <HAL_ADC_Init+0x44>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fb1e 	bl	8000830 <HAL_ADC_MspInit>
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fbf1 	bl	80029dc <ADC_ConversionStop_Disable>
 80021fa:	4603      	mov	r3, r0
 80021fc:	75fb      	strb	r3, [r7, #23]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 8099 	bne.w	800233e <HAL_ADC_Init+0x18e>
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 8095 	bne.w	800233e <HAL_ADC_Init+0x18e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800221c:	f023 0302 	bic.w	r3, r3, #2
 8002220:	f043 0202 	orr.w	r2, r3, #2
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	@ 0x28
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7b1b      	ldrb	r3, [r3, #12]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4313      	orrs	r3, r2
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	4313      	orrs	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002248:	d003      	beq.n	8002252 <HAL_ADC_Init+0xa2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_ADC_Init+0xa8>
 8002252:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002256:	e000      	b.n	800225a <HAL_ADC_Init+0xaa>
 8002258:	2300      	movs	r3, #0
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7d1b      	ldrb	r3, [r3, #20]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d119      	bne.n	800229c <HAL_ADC_Init+0xec>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7b1b      	ldrb	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_ADC_Init+0xd4>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	3b01      	subs	r3, #1
 8002276:	035a      	lsls	r2, r3, #13
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	e00b      	b.n	800229c <HAL_ADC_Init+0xec>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	4b28      	ldr	r3, [pc, #160]	@ (8002358 <HAL_ADC_Init+0x1a8>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6093      	str	r3, [r2, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022cc:	d003      	beq.n	80022d6 <HAL_ADC_Init+0x126>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d104      	bne.n	80022e0 <HAL_ADC_Init+0x130>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	3b01      	subs	r3, #1
 80022dc:	051b      	lsls	r3, r3, #20
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	4b18      	ldr	r3, [pc, #96]	@ (800235c <HAL_ADC_Init+0x1ac>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	429a      	cmp	r2, r3
 8002302:	d10b      	bne.n	800231c <HAL_ADC_Init+0x16c>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	62da      	str	r2, [r3, #44]	@ 0x2c
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	629a      	str	r2, [r3, #40]	@ 0x28
 800231a:	e018      	b.n	800234e <HAL_ADC_Init+0x19e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	f023 0312 	bic.w	r3, r3, #18
 8002324:	f043 0210 	orr.w	r2, r3, #16
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	@ 0x28
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002338:	2301      	movs	r3, #1
 800233a:	75fb      	strb	r3, [r7, #23]
 800233c:	e007      	b.n	800234e <HAL_ADC_Init+0x19e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	f043 0210 	orr.w	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	629a      	str	r2, [r3, #40]	@ 0x28
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	ffe1f7fd 	.word	0xffe1f7fd
 800235c:	ff1f0efe 	.word	0xff1f0efe

08002360 <HAL_ADC_Start>:
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_ADC_Start+0x1a>
 8002376:	2302      	movs	r3, #2
 8002378:	e098      	b.n	80024ac <HAL_ADC_Start+0x14c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fad0 	bl	8002928 <ADC_Enable>
 8002388:	4603      	mov	r3, r0
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 8087 	bne.w	80024a2 <HAL_ADC_Start+0x142>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a41      	ldr	r2, [pc, #260]	@ (80024b4 <HAL_ADC_Start+0x154>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d105      	bne.n	80023be <HAL_ADC_Start+0x5e>
 80023b2:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_ADC_Start+0x158>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <HAL_ADC_Start+0x8a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d026      	beq.n	8002426 <HAL_ADC_Start+0xc6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023e0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80023e8:	e01d      	b.n	8002426 <HAL_ADC_Start+0xc6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2f      	ldr	r2, [pc, #188]	@ (80024b8 <HAL_ADC_Start+0x158>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_ADC_Start+0xaa>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2b      	ldr	r2, [pc, #172]	@ (80024b4 <HAL_ADC_Start+0x154>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10d      	bne.n	8002426 <HAL_ADC_Start+0xc6>
 800240a:	4b2b      	ldr	r3, [pc, #172]	@ (80024b8 <HAL_ADC_Start+0x158>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_ADC_Start+0xc6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800241e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	@ 0x28
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d006      	beq.n	8002440 <HAL_ADC_Start+0xe0>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002436:	f023 0206 	bic.w	r2, r3, #6
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800243e:	e002      	b.n	8002446 <HAL_ADC_Start+0xe6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f06f 0202 	mvn.w	r2, #2
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002462:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002466:	d113      	bne.n	8002490 <HAL_ADC_Start+0x130>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a11      	ldr	r2, [pc, #68]	@ (80024b4 <HAL_ADC_Start+0x154>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d105      	bne.n	800247e <HAL_ADC_Start+0x11e>
 8002472:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_ADC_Start+0x158>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d108      	bne.n	8002490 <HAL_ADC_Start+0x130>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	e00c      	b.n	80024aa <HAL_ADC_Start+0x14a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	e003      	b.n	80024aa <HAL_ADC_Start+0x14a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40012800 	.word	0x40012800
 80024b8:	40012400 	.word	0x40012400

080024bc <HAL_ADC_Stop>:
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_Stop+0x1a>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e01a      	b.n	800250c <HAL_ADC_Stop+0x50>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa7c 	bl	80029dc <ADC_ConversionStop_Disable>
 80024e4:	4603      	mov	r3, r0
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_ADC_Stop+0x46>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	629a      	str	r2, [r3, #40]	@ 0x28
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_ADC_PollForConversion>:
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	f7ff fe37 	bl	800219c <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_ADC_PollForConversion+0x42>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	629a      	str	r2, [r3, #40]	@ 0x28
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002552:	2301      	movs	r3, #1
 8002554:	e0d3      	b.n	80026fe <HAL_ADC_PollForConversion+0x1ea>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d131      	bne.n	80025c8 <HAL_ADC_PollForConversion+0xb4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d12a      	bne.n	80025c8 <HAL_ADC_PollForConversion+0xb4>
 8002572:	e021      	b.n	80025b8 <HAL_ADC_PollForConversion+0xa4>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257a:	d01d      	beq.n	80025b8 <HAL_ADC_PollForConversion+0xa4>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <HAL_ADC_PollForConversion+0x7e>
 8002582:	f7ff fe0b 	bl	800219c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d212      	bcs.n	80025b8 <HAL_ADC_PollForConversion+0xa4>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <HAL_ADC_PollForConversion+0xa4>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	f043 0204 	orr.w	r2, r3, #4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0a2      	b.n	80026fe <HAL_ADC_PollForConversion+0x1ea>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0d6      	beq.n	8002574 <HAL_ADC_PollForConversion+0x60>
 80025c6:	e070      	b.n	80026aa <HAL_ADC_PollForConversion+0x196>
 80025c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002708 <HAL_ADC_PollForConversion+0x1f4>)
 80025ca:	681c      	ldr	r4, [r3, #0]
 80025cc:	2002      	movs	r0, #2
 80025ce:	f001 fbe9 	bl	8003da4 <HAL_RCCEx_GetPeriphCLKFreq>
 80025d2:	4603      	mov	r3, r0
 80025d4:	fbb4 f2f3 	udiv	r2, r4, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6919      	ldr	r1, [r3, #16]
 80025de:	4b4b      	ldr	r3, [pc, #300]	@ (800270c <HAL_ADC_PollForConversion+0x1f8>)
 80025e0:	400b      	ands	r3, r1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d118      	bne.n	8002618 <HAL_ADC_PollForConversion+0x104>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68d9      	ldr	r1, [r3, #12]
 80025ec:	4b48      	ldr	r3, [pc, #288]	@ (8002710 <HAL_ADC_PollForConversion+0x1fc>)
 80025ee:	400b      	ands	r3, r1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d111      	bne.n	8002618 <HAL_ADC_PollForConversion+0x104>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6919      	ldr	r1, [r3, #16]
 80025fa:	4b46      	ldr	r3, [pc, #280]	@ (8002714 <HAL_ADC_PollForConversion+0x200>)
 80025fc:	400b      	ands	r3, r1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d108      	bne.n	8002614 <HAL_ADC_PollForConversion+0x100>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68d9      	ldr	r1, [r3, #12]
 8002608:	4b43      	ldr	r3, [pc, #268]	@ (8002718 <HAL_ADC_PollForConversion+0x204>)
 800260a:	400b      	ands	r3, r1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_ADC_PollForConversion+0x100>
 8002610:	2314      	movs	r3, #20
 8002612:	e020      	b.n	8002656 <HAL_ADC_PollForConversion+0x142>
 8002614:	2329      	movs	r3, #41	@ 0x29
 8002616:	e01e      	b.n	8002656 <HAL_ADC_PollForConversion+0x142>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6919      	ldr	r1, [r3, #16]
 800261e:	4b3d      	ldr	r3, [pc, #244]	@ (8002714 <HAL_ADC_PollForConversion+0x200>)
 8002620:	400b      	ands	r3, r1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_ADC_PollForConversion+0x120>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68d9      	ldr	r1, [r3, #12]
 800262c:	4b3a      	ldr	r3, [pc, #232]	@ (8002718 <HAL_ADC_PollForConversion+0x204>)
 800262e:	400b      	ands	r3, r1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <HAL_ADC_PollForConversion+0x13c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6919      	ldr	r1, [r3, #16]
 800263a:	4b38      	ldr	r3, [pc, #224]	@ (800271c <HAL_ADC_PollForConversion+0x208>)
 800263c:	400b      	ands	r3, r1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_ADC_PollForConversion+0x140>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68d9      	ldr	r1, [r3, #12]
 8002648:	4b34      	ldr	r3, [pc, #208]	@ (800271c <HAL_ADC_PollForConversion+0x208>)
 800264a:	400b      	ands	r3, r1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_PollForConversion+0x140>
 8002650:	2354      	movs	r3, #84	@ 0x54
 8002652:	e000      	b.n	8002656 <HAL_ADC_PollForConversion+0x142>
 8002654:	23fc      	movs	r3, #252	@ 0xfc
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	e021      	b.n	80026a2 <HAL_ADC_PollForConversion+0x18e>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d01a      	beq.n	800269c <HAL_ADC_PollForConversion+0x188>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_ADC_PollForConversion+0x168>
 800266c:	f7ff fd96 	bl	800219c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d20f      	bcs.n	800269c <HAL_ADC_PollForConversion+0x188>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d90b      	bls.n	800269c <HAL_ADC_PollForConversion+0x188>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002698:	2303      	movs	r3, #3
 800269a:	e030      	b.n	80026fe <HAL_ADC_PollForConversion+0x1ea>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3301      	adds	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d8d9      	bhi.n	800265e <HAL_ADC_PollForConversion+0x14a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f06f 0212 	mvn.w	r2, #18
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80026ca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80026ce:	d115      	bne.n	80026fc <HAL_ADC_PollForConversion+0x1e8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7b1b      	ldrb	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <HAL_ADC_PollForConversion+0x1e8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <HAL_ADC_PollForConversion+0x1e8>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80026fc:	2300      	movs	r3, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}
 8002706:	bf00      	nop
 8002708:	20000004 	.word	0x20000004
 800270c:	24924924 	.word	0x24924924
 8002710:	00924924 	.word	0x00924924
 8002714:	12492492 	.word	0x12492492
 8002718:	00492492 	.word	0x00492492
 800271c:	00249249 	.word	0x00249249

08002720 <HAL_ADC_GetValue>:
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_ADC_ConfigChannel>:
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x20>
 8002754:	2302      	movs	r3, #2
 8002756:	e0dc      	b.n	8002912 <HAL_ADC_ConfigChannel+0x1da>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b06      	cmp	r3, #6
 8002766:	d81c      	bhi.n	80027a2 <HAL_ADC_ConfigChannel+0x6a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3b05      	subs	r3, #5
 800277a:	221f      	movs	r2, #31
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	4019      	ands	r1, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	3b05      	subs	r3, #5
 8002794:	fa00 f203 	lsl.w	r2, r0, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	635a      	str	r2, [r3, #52]	@ 0x34
 80027a0:	e03c      	b.n	800281c <HAL_ADC_ConfigChannel+0xe4>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d81c      	bhi.n	80027e4 <HAL_ADC_ConfigChannel+0xac>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	3b23      	subs	r3, #35	@ 0x23
 80027bc:	221f      	movs	r2, #31
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	4019      	ands	r1, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b23      	subs	r3, #35	@ 0x23
 80027d6:	fa00 f203 	lsl.w	r2, r0, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80027e2:	e01b      	b.n	800281c <HAL_ADC_ConfigChannel+0xe4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	3b41      	subs	r3, #65	@ 0x41
 80027f6:	221f      	movs	r2, #31
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	4019      	ands	r1, r3
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	3b41      	subs	r3, #65	@ 0x41
 8002810:	fa00 f203 	lsl.w	r2, r0, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b09      	cmp	r3, #9
 8002822:	d91c      	bls.n	800285e <HAL_ADC_ConfigChannel+0x126>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68d9      	ldr	r1, [r3, #12]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	3b1e      	subs	r3, #30
 8002836:	2207      	movs	r2, #7
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	4019      	ands	r1, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6898      	ldr	r0, [r3, #8]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	3b1e      	subs	r3, #30
 8002850:	fa00 f203 	lsl.w	r2, r0, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	60da      	str	r2, [r3, #12]
 800285c:	e019      	b.n	8002892 <HAL_ADC_ConfigChannel+0x15a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6919      	ldr	r1, [r3, #16]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	2207      	movs	r2, #7
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	4019      	ands	r1, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6898      	ldr	r0, [r3, #8]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	fa00 f203 	lsl.w	r2, r0, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	611a      	str	r2, [r3, #16]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b10      	cmp	r3, #16
 8002898:	d003      	beq.n	80028a2 <HAL_ADC_ConfigChannel+0x16a>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b11      	cmp	r3, #17
 80028a0:	d132      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1d0>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <HAL_ADC_ConfigChannel+0x1e4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d125      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x1c0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d126      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1d0>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d11a      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1d0>
 80028d2:	4b13      	ldr	r3, [pc, #76]	@ (8002920 <HAL_ADC_ConfigChannel+0x1e8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a13      	ldr	r2, [pc, #76]	@ (8002924 <HAL_ADC_ConfigChannel+0x1ec>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	0c9a      	lsrs	r2, r3, #18
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	e002      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x1b8>
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f9      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x1b2>
 80028f6:	e007      	b.n	8002908 <HAL_ADC_ConfigChannel+0x1d0>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	@ 0x28
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	40012400 	.word	0x40012400
 8002920:	20000004 	.word	0x20000004
 8002924:	431bde83 	.word	0x431bde83

08002928 <ADC_Enable>:
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	2300      	movs	r3, #0
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d040      	beq.n	80029c8 <ADC_Enable+0xa0>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	4b1f      	ldr	r3, [pc, #124]	@ (80029d4 <ADC_Enable+0xac>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1f      	ldr	r2, [pc, #124]	@ (80029d8 <ADC_Enable+0xb0>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	0c9b      	lsrs	r3, r3, #18
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	e002      	b.n	800296c <ADC_Enable+0x44>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3b01      	subs	r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f9      	bne.n	8002966 <ADC_Enable+0x3e>
 8002972:	f7ff fc13 	bl	800219c <HAL_GetTick>
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	e01f      	b.n	80029ba <ADC_Enable+0x92>
 800297a:	f7ff fc0f 	bl	800219c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d918      	bls.n	80029ba <ADC_Enable+0x92>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b01      	cmp	r3, #1
 8002994:	d011      	beq.n	80029ba <ADC_Enable+0x92>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	f043 0210 	orr.w	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80029b6:	2301      	movs	r3, #1
 80029b8:	e007      	b.n	80029ca <ADC_Enable+0xa2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d1d8      	bne.n	800297a <ADC_Enable+0x52>
 80029c8:	2300      	movs	r3, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000004 	.word	0x20000004
 80029d8:	431bde83 	.word	0x431bde83

080029dc <ADC_ConversionStop_Disable>:
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d12e      	bne.n	8002a54 <ADC_ConversionStop_Disable+0x78>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	f7ff fbc9 	bl	800219c <HAL_GetTick>
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	e01b      	b.n	8002a46 <ADC_ConversionStop_Disable+0x6a>
 8002a0e:	f7ff fbc5 	bl	800219c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d914      	bls.n	8002a46 <ADC_ConversionStop_Disable+0x6a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d10d      	bne.n	8002a46 <ADC_ConversionStop_Disable+0x6a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2e:	f043 0210 	orr.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a42:	2301      	movs	r3, #1
 8002a44:	e007      	b.n	8002a56 <ADC_ConversionStop_Disable+0x7a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d0dc      	beq.n	8002a0e <ADC_ConversionStop_Disable+0x32>
 8002a54:	2300      	movs	r3, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_CAN_Init>:
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_CAN_Init+0x12>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0ed      	b.n	8002c4c <HAL_CAN_Init+0x1ee>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <HAL_CAN_Init+0x24>
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7fe fad3 	bl	8001028 <HAL_CAN_MspInit>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f7ff fb83 	bl	800219c <HAL_GetTick>
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	e012      	b.n	8002ac0 <HAL_CAN_Init+0x62>
 8002a9a:	f7ff fb7f 	bl	800219c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b0a      	cmp	r3, #10
 8002aa6:	d90b      	bls.n	8002ac0 <HAL_CAN_Init+0x62>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	f883 2020 	strb.w	r2, [r3, #32]
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0c5      	b.n	8002c4c <HAL_CAN_Init+0x1ee>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0e5      	beq.n	8002a9a <HAL_CAN_Init+0x3c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0202 	bic.w	r2, r2, #2
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f7ff fb5d 	bl	800219c <HAL_GetTick>
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	e012      	b.n	8002b0c <HAL_CAN_Init+0xae>
 8002ae6:	f7ff fb59 	bl	800219c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b0a      	cmp	r3, #10
 8002af2:	d90b      	bls.n	8002b0c <HAL_CAN_Init+0xae>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2205      	movs	r2, #5
 8002b04:	f883 2020 	strb.w	r2, [r3, #32]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e09f      	b.n	8002c4c <HAL_CAN_Init+0x1ee>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e5      	bne.n	8002ae6 <HAL_CAN_Init+0x88>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7e1b      	ldrb	r3, [r3, #24]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d108      	bne.n	8002b34 <HAL_CAN_Init+0xd6>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e007      	b.n	8002b44 <HAL_CAN_Init+0xe6>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7e5b      	ldrb	r3, [r3, #25]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d108      	bne.n	8002b5e <HAL_CAN_Init+0x100>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	e007      	b.n	8002b6e <HAL_CAN_Init+0x110>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7e9b      	ldrb	r3, [r3, #26]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d108      	bne.n	8002b88 <HAL_CAN_Init+0x12a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0220 	orr.w	r2, r2, #32
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e007      	b.n	8002b98 <HAL_CAN_Init+0x13a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0220 	bic.w	r2, r2, #32
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7edb      	ldrb	r3, [r3, #27]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d108      	bne.n	8002bb2 <HAL_CAN_Init+0x154>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0210 	bic.w	r2, r2, #16
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e007      	b.n	8002bc2 <HAL_CAN_Init+0x164>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0210 	orr.w	r2, r2, #16
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7f1b      	ldrb	r3, [r3, #28]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d108      	bne.n	8002bdc <HAL_CAN_Init+0x17e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0208 	orr.w	r2, r2, #8
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e007      	b.n	8002bec <HAL_CAN_Init+0x18e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0208 	bic.w	r2, r2, #8
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7f5b      	ldrb	r3, [r3, #29]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d108      	bne.n	8002c06 <HAL_CAN_Init+0x1a8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0204 	orr.w	r2, r2, #4
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e007      	b.n	8002c16 <HAL_CAN_Init+0x1b8>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0204 	bic.w	r2, r2, #4
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	ea42 0103 	orr.w	r1, r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	1e5a      	subs	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	61da      	str	r2, [r3, #28]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2020 	strb.w	r2, [r3, #32]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_CAN_Start>:
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d12e      	bne.n	8002cc6 <HAL_CAN_Start+0x72>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2020 	strb.w	r2, [r3, #32]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f7ff fa8c 	bl	800219c <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	e012      	b.n	8002cae <HAL_CAN_Start+0x5a>
 8002c88:	f7ff fa88 	bl	800219c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b0a      	cmp	r3, #10
 8002c94:	d90b      	bls.n	8002cae <HAL_CAN_Start+0x5a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2205      	movs	r2, #5
 8002ca6:	f883 2020 	strb.w	r2, [r3, #32]
 8002caa:	2301      	movs	r3, #1
 8002cac:	e012      	b.n	8002cd4 <HAL_CAN_Start+0x80>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e5      	bne.n	8002c88 <HAL_CAN_Start+0x34>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e006      	b.n	8002cd4 <HAL_CAN_Start+0x80>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_CAN_AddTxMessage>:
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	@ 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf0:	77fb      	strb	r3, [r7, #31]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	7ffb      	ldrb	r3, [r7, #31]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d003      	beq.n	8002d08 <HAL_CAN_AddTxMessage+0x2c>
 8002d00:	7ffb      	ldrb	r3, [r7, #31]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	f040 80ad 	bne.w	8002e62 <HAL_CAN_AddTxMessage+0x186>
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <HAL_CAN_AddTxMessage+0x4c>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <HAL_CAN_AddTxMessage+0x4c>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 8095 	beq.w	8002e52 <HAL_CAN_AddTxMessage+0x176>
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	0e1b      	lsrs	r3, r3, #24
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	2201      	movs	r2, #1
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	409a      	lsls	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10d      	bne.n	8002d60 <HAL_CAN_AddTxMessage+0x84>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	055a      	lsls	r2, r3, #21
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68f9      	ldr	r1, [r7, #12]
 8002d50:	6809      	ldr	r1, [r1, #0]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3318      	adds	r3, #24
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	440b      	add	r3, r1
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e00f      	b.n	8002d80 <HAL_CAN_AddTxMessage+0xa4>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	00da      	lsls	r2, r3, #3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	68f9      	ldr	r1, [r7, #12]
 8002d72:	6809      	ldr	r1, [r1, #0]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	3318      	adds	r3, #24
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	440b      	add	r3, r1
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6819      	ldr	r1, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3318      	adds	r3, #24
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	440b      	add	r3, r1
 8002d90:	3304      	adds	r3, #4
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	7d1b      	ldrb	r3, [r3, #20]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d111      	bne.n	8002dc0 <HAL_CAN_AddTxMessage+0xe4>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	3318      	adds	r3, #24
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4413      	add	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	6811      	ldr	r1, [r2, #0]
 8002db0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3318      	adds	r3, #24
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	440b      	add	r3, r1
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3307      	adds	r3, #7
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	061a      	lsls	r2, r3, #24
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3306      	adds	r3, #6
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3305      	adds	r3, #5
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	3204      	adds	r2, #4
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	4610      	mov	r0, r2
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	6811      	ldr	r1, [r2, #0]
 8002de8:	ea43 0200 	orr.w	r2, r3, r0
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	440b      	add	r3, r1
 8002df2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3303      	adds	r3, #3
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	061a      	lsls	r2, r3, #24
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3302      	adds	r3, #2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	4313      	orrs	r3, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	7812      	ldrb	r2, [r2, #0]
 8002e18:	4610      	mov	r0, r2
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	6811      	ldr	r1, [r2, #0]
 8002e1e:	ea43 0200 	orr.w	r2, r3, r0
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	440b      	add	r3, r1
 8002e28:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3318      	adds	r3, #24
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	4413      	add	r3, r2
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	6811      	ldr	r1, [r2, #0]
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	3318      	adds	r3, #24
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	440b      	add	r3, r1
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e00e      	b.n	8002e70 <HAL_CAN_AddTxMessage+0x194>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e006      	b.n	8002e70 <HAL_CAN_AddTxMessage+0x194>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e6e:	2301      	movs	r3, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	3724      	adds	r7, #36	@ 0x24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <HAL_CAN_IsTxMessagePending>:
 8002e7a:	b480      	push	{r7}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	6039      	str	r1, [r7, #0]
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8e:	72fb      	strb	r3, [r7, #11]
 8002e90:	7afb      	ldrb	r3, [r7, #11]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d002      	beq.n	8002e9c <HAL_CAN_IsTxMessagePending+0x22>
 8002e96:	7afb      	ldrb	r3, [r7, #11]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_CAN_IsTxMessagePending+0x3a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	069b      	lsls	r3, r3, #26
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	069b      	lsls	r3, r3, #26
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_CAN_IsTxMessagePending+0x3a>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <__NVIC_SetPriorityGrouping>:
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	021a      	lsls	r2, r3, #8
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	4a04      	ldr	r2, [pc, #16]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	60d3      	str	r3, [r2, #12]
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_GetPriorityGrouping>:
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4906      	ldr	r1, [pc, #24]	@ (8002f58 <__NVIC_EnableIRQ+0x34>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100

08002f5c <__NVIC_SetPriority>:
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	db0a      	blt.n	8002f86 <__NVIC_SetPriority+0x2a>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	490c      	ldr	r1, [pc, #48]	@ (8002fa8 <__NVIC_SetPriority+0x4c>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002f84:	e00a      	b.n	8002f9c <__NVIC_SetPriority+0x40>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4908      	ldr	r1, [pc, #32]	@ (8002fac <__NVIC_SetPriority+0x50>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3b04      	subs	r3, #4
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	440b      	add	r3, r1
 8002f9a:	761a      	strb	r2, [r3, #24]
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e100 	.word	0xe000e100
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <NVIC_EncodePriority>:
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	@ 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f1c3 0307 	rsb	r3, r3, #7
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	bf28      	it	cs
 8002fce:	2304      	movcs	r3, #4
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d902      	bls.n	8002fe0 <NVIC_EncodePriority+0x30>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3b03      	subs	r3, #3
 8002fde:	e000      	b.n	8002fe2 <NVIC_EncodePriority+0x32>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	43d9      	mvns	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	400b      	ands	r3, r1
 8003008:	4313      	orrs	r3, r2
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	@ 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <HAL_NVIC_SetPriorityGrouping>:
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff4f 	bl	8002ec0 <__NVIC_SetPriorityGrouping>
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_SetPriority>:
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	f7ff ff64 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 8003040:	6178      	str	r0, [r7, #20]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	6978      	ldr	r0, [r7, #20]
 8003048:	f7ff ffb2 	bl	8002fb0 <NVIC_EncodePriority>
 800304c:	4602      	mov	r2, r0
 800304e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff81 	bl	8002f5c <__NVIC_SetPriority>
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_EnableIRQ>:
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	71fb      	strb	r3, [r7, #7]
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff57 	bl	8002f24 <__NVIC_EnableIRQ>
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_GPIO_Init>:
 8003080:	b480      	push	{r7}
 8003082:	b08b      	sub	sp, #44	@ 0x2c
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
 8003092:	e169      	b.n	8003368 <HAL_GPIO_Init+0x2e8>
 8003094:	2201      	movs	r2, #1
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	f040 8158 	bne.w	8003362 <HAL_GPIO_Init+0x2e2>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4a9a      	ldr	r2, [pc, #616]	@ (8003320 <HAL_GPIO_Init+0x2a0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d05e      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030bc:	4a98      	ldr	r2, [pc, #608]	@ (8003320 <HAL_GPIO_Init+0x2a0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d875      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030c2:	4a98      	ldr	r2, [pc, #608]	@ (8003324 <HAL_GPIO_Init+0x2a4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d058      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030c8:	4a96      	ldr	r2, [pc, #600]	@ (8003324 <HAL_GPIO_Init+0x2a4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d86f      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030ce:	4a96      	ldr	r2, [pc, #600]	@ (8003328 <HAL_GPIO_Init+0x2a8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d052      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030d4:	4a94      	ldr	r2, [pc, #592]	@ (8003328 <HAL_GPIO_Init+0x2a8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d869      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030da:	4a94      	ldr	r2, [pc, #592]	@ (800332c <HAL_GPIO_Init+0x2ac>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d04c      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030e0:	4a92      	ldr	r2, [pc, #584]	@ (800332c <HAL_GPIO_Init+0x2ac>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d863      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030e6:	4a92      	ldr	r2, [pc, #584]	@ (8003330 <HAL_GPIO_Init+0x2b0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d046      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030ec:	4a90      	ldr	r2, [pc, #576]	@ (8003330 <HAL_GPIO_Init+0x2b0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d85d      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030f2:	2b12      	cmp	r3, #18
 80030f4:	d82a      	bhi.n	800314c <HAL_GPIO_Init+0xcc>
 80030f6:	2b12      	cmp	r3, #18
 80030f8:	d859      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003100 <HAL_GPIO_Init+0x80>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	0800317b 	.word	0x0800317b
 8003104:	08003155 	.word	0x08003155
 8003108:	08003167 	.word	0x08003167
 800310c:	080031a9 	.word	0x080031a9
 8003110:	080031af 	.word	0x080031af
 8003114:	080031af 	.word	0x080031af
 8003118:	080031af 	.word	0x080031af
 800311c:	080031af 	.word	0x080031af
 8003120:	080031af 	.word	0x080031af
 8003124:	080031af 	.word	0x080031af
 8003128:	080031af 	.word	0x080031af
 800312c:	080031af 	.word	0x080031af
 8003130:	080031af 	.word	0x080031af
 8003134:	080031af 	.word	0x080031af
 8003138:	080031af 	.word	0x080031af
 800313c:	080031af 	.word	0x080031af
 8003140:	080031af 	.word	0x080031af
 8003144:	0800315d 	.word	0x0800315d
 8003148:	08003171 	.word	0x08003171
 800314c:	4a79      	ldr	r2, [pc, #484]	@ (8003334 <HAL_GPIO_Init+0x2b4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 8003152:	e02c      	b.n	80031ae <HAL_GPIO_Init+0x12e>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	e029      	b.n	80031b0 <HAL_GPIO_Init+0x130>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	3304      	adds	r3, #4
 8003162:	623b      	str	r3, [r7, #32]
 8003164:	e024      	b.n	80031b0 <HAL_GPIO_Init+0x130>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	3308      	adds	r3, #8
 800316c:	623b      	str	r3, [r7, #32]
 800316e:	e01f      	b.n	80031b0 <HAL_GPIO_Init+0x130>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	330c      	adds	r3, #12
 8003176:	623b      	str	r3, [r7, #32]
 8003178:	e01a      	b.n	80031b0 <HAL_GPIO_Init+0x130>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <HAL_GPIO_Init+0x108>
 8003182:	2304      	movs	r3, #4
 8003184:	623b      	str	r3, [r7, #32]
 8003186:	e013      	b.n	80031b0 <HAL_GPIO_Init+0x130>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_GPIO_Init+0x11c>
 8003190:	2308      	movs	r3, #8
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	611a      	str	r2, [r3, #16]
 800319a:	e009      	b.n	80031b0 <HAL_GPIO_Init+0x130>
 800319c:	2308      	movs	r3, #8
 800319e:	623b      	str	r3, [r7, #32]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	615a      	str	r2, [r3, #20]
 80031a6:	e003      	b.n	80031b0 <HAL_GPIO_Init+0x130>
 80031a8:	2300      	movs	r3, #0
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x130>
 80031ae:	bf00      	nop
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2bff      	cmp	r3, #255	@ 0xff
 80031b4:	d801      	bhi.n	80031ba <HAL_GPIO_Init+0x13a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	e001      	b.n	80031be <HAL_GPIO_Init+0x13e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2bff      	cmp	r3, #255	@ 0xff
 80031c4:	d802      	bhi.n	80031cc <HAL_GPIO_Init+0x14c>
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	e002      	b.n	80031d2 <HAL_GPIO_Init+0x152>
 80031cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ce:	3b08      	subs	r3, #8
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	210f      	movs	r1, #15
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	401a      	ands	r2, r3
 80031e4:	6a39      	ldr	r1, [r7, #32]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	431a      	orrs	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80b1 	beq.w	8003362 <HAL_GPIO_Init+0x2e2>
 8003200:	4b4d      	ldr	r3, [pc, #308]	@ (8003338 <HAL_GPIO_Init+0x2b8>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	4a4c      	ldr	r2, [pc, #304]	@ (8003338 <HAL_GPIO_Init+0x2b8>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6193      	str	r3, [r2, #24]
 800320c:	4b4a      	ldr	r3, [pc, #296]	@ (8003338 <HAL_GPIO_Init+0x2b8>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4a48      	ldr	r2, [pc, #288]	@ (800333c <HAL_GPIO_Init+0x2bc>)
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a40      	ldr	r2, [pc, #256]	@ (8003340 <HAL_GPIO_Init+0x2c0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d013      	beq.n	800326c <HAL_GPIO_Init+0x1ec>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3f      	ldr	r2, [pc, #252]	@ (8003344 <HAL_GPIO_Init+0x2c4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00d      	beq.n	8003268 <HAL_GPIO_Init+0x1e8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3e      	ldr	r2, [pc, #248]	@ (8003348 <HAL_GPIO_Init+0x2c8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <HAL_GPIO_Init+0x1e4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3d      	ldr	r2, [pc, #244]	@ (800334c <HAL_GPIO_Init+0x2cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_GPIO_Init+0x1e0>
 800325c:	2303      	movs	r3, #3
 800325e:	e006      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003260:	2304      	movs	r3, #4
 8003262:	e004      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003264:	2302      	movs	r3, #2
 8003266:	e002      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 800326c:	2300      	movs	r3, #0
 800326e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003270:	f002 0203 	and.w	r2, r2, #3
 8003274:	0092      	lsls	r2, r2, #2
 8003276:	4093      	lsls	r3, r2
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	492f      	ldr	r1, [pc, #188]	@ (800333c <HAL_GPIO_Init+0x2bc>)
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	3302      	adds	r3, #2
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <HAL_GPIO_Init+0x226>
 8003298:	4b2d      	ldr	r3, [pc, #180]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	492c      	ldr	r1, [pc, #176]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x234>
 80032a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	4928      	ldr	r1, [pc, #160]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d006      	beq.n	80032ce <HAL_GPIO_Init+0x24e>
 80032c0:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	4922      	ldr	r1, [pc, #136]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60cb      	str	r3, [r1, #12]
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x25c>
 80032ce:	4b20      	ldr	r3, [pc, #128]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	491e      	ldr	r1, [pc, #120]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032d8:	4013      	ands	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d006      	beq.n	80032f6 <HAL_GPIO_Init+0x276>
 80032e8:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	4918      	ldr	r1, [pc, #96]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	e006      	b.n	8003304 <HAL_GPIO_Init+0x284>
 80032f6:	4b16      	ldr	r3, [pc, #88]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4914      	ldr	r1, [pc, #80]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 8003300:	4013      	ands	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d021      	beq.n	8003354 <HAL_GPIO_Init+0x2d4>
 8003310:	4b0f      	ldr	r3, [pc, #60]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	490e      	ldr	r1, [pc, #56]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
 800331c:	e021      	b.n	8003362 <HAL_GPIO_Init+0x2e2>
 800331e:	bf00      	nop
 8003320:	10320000 	.word	0x10320000
 8003324:	10310000 	.word	0x10310000
 8003328:	10220000 	.word	0x10220000
 800332c:	10210000 	.word	0x10210000
 8003330:	10120000 	.word	0x10120000
 8003334:	10110000 	.word	0x10110000
 8003338:	40021000 	.word	0x40021000
 800333c:	40010000 	.word	0x40010000
 8003340:	40010800 	.word	0x40010800
 8003344:	40010c00 	.word	0x40010c00
 8003348:	40011000 	.word	0x40011000
 800334c:	40011400 	.word	0x40011400
 8003350:	40010400 	.word	0x40010400
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_GPIO_Init+0x304>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	43db      	mvns	r3, r3
 800335c:	4909      	ldr	r1, [pc, #36]	@ (8003384 <HAL_GPIO_Init+0x304>)
 800335e:	4013      	ands	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	3301      	adds	r3, #1
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	f47f ae8e 	bne.w	8003094 <HAL_GPIO_Init+0x14>
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	372c      	adds	r7, #44	@ 0x2c
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	40010400 	.word	0x40010400

08003388 <HAL_GPIO_WritePin>:
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
 8003394:	4613      	mov	r3, r2
 8003396:	707b      	strb	r3, [r7, #1]
 8003398:	787b      	ldrb	r3, [r7, #1]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_WritePin+0x1e>
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	611a      	str	r2, [r3, #16]
 80033a4:	e003      	b.n	80033ae <HAL_GPIO_WritePin+0x26>
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	041a      	lsls	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_RCC_OscConfig>:
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x12>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e272      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8087 	beq.w	80034e6 <HAL_RCC_OscConfig+0x12e>
 80033d8:	4b92      	ldr	r3, [pc, #584]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d00c      	beq.n	80033fe <HAL_RCC_OscConfig+0x46>
 80033e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d112      	bne.n	8003416 <HAL_RCC_OscConfig+0x5e>
 80033f0:	4b8c      	ldr	r3, [pc, #560]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033fc:	d10b      	bne.n	8003416 <HAL_RCC_OscConfig+0x5e>
 80033fe:	4b89      	ldr	r3, [pc, #548]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d06c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x12c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d168      	bne.n	80034e4 <HAL_RCC_OscConfig+0x12c>
 8003412:	2301      	movs	r3, #1
 8003414:	e24c      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x76>
 8003420:	4b80      	ldr	r3, [pc, #512]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a7f      	ldr	r2, [pc, #508]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e02e      	b.n	800348c <HAL_RCC_OscConfig+0xd4>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x98>
 8003436:	4b7b      	ldr	r3, [pc, #492]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7a      	ldr	r2, [pc, #488]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 800343c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b78      	ldr	r3, [pc, #480]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a77      	ldr	r2, [pc, #476]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003448:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e01d      	b.n	800348c <HAL_RCC_OscConfig+0xd4>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0xbc>
 800345a:	4b72      	ldr	r3, [pc, #456]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a71      	ldr	r2, [pc, #452]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b6f      	ldr	r3, [pc, #444]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6e      	ldr	r2, [pc, #440]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0xd4>
 8003474:	4b6b      	ldr	r3, [pc, #428]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6a      	ldr	r2, [pc, #424]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 800347a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b68      	ldr	r3, [pc, #416]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a67      	ldr	r2, [pc, #412]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_RCC_OscConfig+0x104>
 8003494:	f7fe fe82 	bl	800219c <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xf6>
 800349c:	f7fe fe7e 	bl	800219c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	@ 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xf6>
 80034aa:	2303      	movs	r3, #3
 80034ac:	e200      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 80034ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0xe4>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x12e>
 80034bc:	f7fe fe6e 	bl	800219c <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x11e>
 80034c4:	f7fe fe6a 	bl	800219c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	@ 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x11e>
 80034d2:	2303      	movs	r3, #3
 80034d4:	e1ec      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 80034d6:	4b53      	ldr	r3, [pc, #332]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x10c>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x12e>
 80034e4:	bf00      	nop
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d063      	beq.n	80035ba <HAL_RCC_OscConfig+0x202>
 80034f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_RCC_OscConfig+0x15e>
 80034fe:	4b49      	ldr	r3, [pc, #292]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b08      	cmp	r3, #8
 8003508:	d11c      	bne.n	8003544 <HAL_RCC_OscConfig+0x18c>
 800350a:	4b46      	ldr	r3, [pc, #280]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <HAL_RCC_OscConfig+0x18c>
 8003516:	4b43      	ldr	r3, [pc, #268]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x176>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x176>
 800352a:	2301      	movs	r3, #1
 800352c:	e1c0      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 800352e:	4b3d      	ldr	r3, [pc, #244]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4939      	ldr	r1, [pc, #228]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
 8003542:	e03a      	b.n	80035ba <HAL_RCC_OscConfig+0x202>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d020      	beq.n	800358e <HAL_RCC_OscConfig+0x1d6>
 800354c:	4b36      	ldr	r3, [pc, #216]	@ (8003628 <HAL_RCC_OscConfig+0x270>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f7fe fe23 	bl	800219c <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x1b4>
 800355a:	f7fe fe1f 	bl	800219c <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x1b4>
 8003568:	2303      	movs	r3, #3
 800356a:	e1a1      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 800356c:	4b2d      	ldr	r3, [pc, #180]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x1a2>
 8003578:	4b2a      	ldr	r3, [pc, #168]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4927      	ldr	r1, [pc, #156]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]
 800358c:	e015      	b.n	80035ba <HAL_RCC_OscConfig+0x202>
 800358e:	4b26      	ldr	r3, [pc, #152]	@ (8003628 <HAL_RCC_OscConfig+0x270>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f7fe fe02 	bl	800219c <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x1f6>
 800359c:	f7fe fdfe 	bl	800219c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x1f6>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e180      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 80035ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x1e4>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d03a      	beq.n	800363c <HAL_RCC_OscConfig+0x284>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d019      	beq.n	8003602 <HAL_RCC_OscConfig+0x24a>
 80035ce:	4b17      	ldr	r3, [pc, #92]	@ (800362c <HAL_RCC_OscConfig+0x274>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	f7fe fde2 	bl	800219c <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x236>
 80035dc:	f7fe fdde 	bl	800219c <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x236>
 80035ea:	2303      	movs	r3, #3
 80035ec:	e160      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 80035ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003624 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x224>
 80035fa:	2001      	movs	r0, #1
 80035fc:	f000 fafe 	bl	8003bfc <RCC_Delay>
 8003600:	e01c      	b.n	800363c <HAL_RCC_OscConfig+0x284>
 8003602:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <HAL_RCC_OscConfig+0x274>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f7fe fdc8 	bl	800219c <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]
 800360e:	e00f      	b.n	8003630 <HAL_RCC_OscConfig+0x278>
 8003610:	f7fe fdc4 	bl	800219c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d908      	bls.n	8003630 <HAL_RCC_OscConfig+0x278>
 800361e:	2303      	movs	r3, #3
 8003620:	e146      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 8003622:	bf00      	nop
 8003624:	40021000 	.word	0x40021000
 8003628:	42420000 	.word	0x42420000
 800362c:	42420480 	.word	0x42420480
 8003630:	4b92      	ldr	r3, [pc, #584]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e9      	bne.n	8003610 <HAL_RCC_OscConfig+0x258>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a6 	beq.w	8003796 <HAL_RCC_OscConfig+0x3de>
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]
 800364e:	4b8b      	ldr	r3, [pc, #556]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10d      	bne.n	8003676 <HAL_RCC_OscConfig+0x2be>
 800365a:	4b88      	ldr	r3, [pc, #544]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	4a87      	ldr	r2, [pc, #540]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003664:	61d3      	str	r3, [r2, #28]
 8003666:	4b85      	ldr	r3, [pc, #532]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
 8003676:	4b82      	ldr	r3, [pc, #520]	@ (8003880 <HAL_RCC_OscConfig+0x4c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d118      	bne.n	80036b4 <HAL_RCC_OscConfig+0x2fc>
 8003682:	4b7f      	ldr	r3, [pc, #508]	@ (8003880 <HAL_RCC_OscConfig+0x4c8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a7e      	ldr	r2, [pc, #504]	@ (8003880 <HAL_RCC_OscConfig+0x4c8>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	f7fe fd85 	bl	800219c <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x2f0>
 8003696:	f7fe fd81 	bl	800219c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b64      	cmp	r3, #100	@ 0x64
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x2f0>
 80036a4:	2303      	movs	r3, #3
 80036a6:	e103      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 80036a8:	4b75      	ldr	r3, [pc, #468]	@ (8003880 <HAL_RCC_OscConfig+0x4c8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x2de>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x312>
 80036bc:	4b6f      	ldr	r3, [pc, #444]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4a6e      	ldr	r2, [pc, #440]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6213      	str	r3, [r2, #32]
 80036c8:	e02d      	b.n	8003726 <HAL_RCC_OscConfig+0x36e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x334>
 80036d2:	4b6a      	ldr	r3, [pc, #424]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	4a69      	ldr	r2, [pc, #420]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	6213      	str	r3, [r2, #32]
 80036de:	4b67      	ldr	r3, [pc, #412]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4a66      	ldr	r2, [pc, #408]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	f023 0304 	bic.w	r3, r3, #4
 80036e8:	6213      	str	r3, [r2, #32]
 80036ea:	e01c      	b.n	8003726 <HAL_RCC_OscConfig+0x36e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d10c      	bne.n	800370e <HAL_RCC_OscConfig+0x356>
 80036f4:	4b61      	ldr	r3, [pc, #388]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4a60      	ldr	r2, [pc, #384]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	6213      	str	r3, [r2, #32]
 8003700:	4b5e      	ldr	r3, [pc, #376]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	4a5d      	ldr	r2, [pc, #372]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6213      	str	r3, [r2, #32]
 800370c:	e00b      	b.n	8003726 <HAL_RCC_OscConfig+0x36e>
 800370e:	4b5b      	ldr	r3, [pc, #364]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	4a5a      	ldr	r2, [pc, #360]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	6213      	str	r3, [r2, #32]
 800371a:	4b58      	ldr	r3, [pc, #352]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	4a57      	ldr	r2, [pc, #348]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003720:	f023 0304 	bic.w	r3, r3, #4
 8003724:	6213      	str	r3, [r2, #32]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d015      	beq.n	800375a <HAL_RCC_OscConfig+0x3a2>
 800372e:	f7fe fd35 	bl	800219c <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x394>
 8003736:	f7fe fd31 	bl	800219c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x394>
 8003748:	2303      	movs	r3, #3
 800374a:	e0b1      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 800374c:	4b4b      	ldr	r3, [pc, #300]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ee      	beq.n	8003736 <HAL_RCC_OscConfig+0x37e>
 8003758:	e014      	b.n	8003784 <HAL_RCC_OscConfig+0x3cc>
 800375a:	f7fe fd1f 	bl	800219c <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x3c0>
 8003762:	f7fe fd1b 	bl	800219c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x3c0>
 8003774:	2303      	movs	r3, #3
 8003776:	e09b      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 8003778:	4b40      	ldr	r3, [pc, #256]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ee      	bne.n	8003762 <HAL_RCC_OscConfig+0x3aa>
 8003784:	7dfb      	ldrb	r3, [r7, #23]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d105      	bne.n	8003796 <HAL_RCC_OscConfig+0x3de>
 800378a:	4b3c      	ldr	r3, [pc, #240]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4a3b      	ldr	r2, [pc, #236]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003794:	61d3      	str	r3, [r2, #28]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8087 	beq.w	80038ae <HAL_RCC_OscConfig+0x4f6>
 80037a0:	4b36      	ldr	r3, [pc, #216]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d061      	beq.n	8003870 <HAL_RCC_OscConfig+0x4b8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d146      	bne.n	8003842 <HAL_RCC_OscConfig+0x48a>
 80037b4:	4b33      	ldr	r3, [pc, #204]	@ (8003884 <HAL_RCC_OscConfig+0x4cc>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f7fe fcef 	bl	800219c <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x41c>
 80037c2:	f7fe fceb 	bl	800219c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x41c>
 80037d0:	2303      	movs	r3, #3
 80037d2:	e06d      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 80037d4:	4b29      	ldr	r3, [pc, #164]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x40a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e8:	d108      	bne.n	80037fc <HAL_RCC_OscConfig+0x444>
 80037ea:	4b24      	ldr	r3, [pc, #144]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4921      	ldr	r1, [pc, #132]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
 80037fc:	4b1f      	ldr	r3, [pc, #124]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a19      	ldr	r1, [r3, #32]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	430b      	orrs	r3, r1
 800380e:	491b      	ldr	r1, [pc, #108]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
 8003814:	4b1b      	ldr	r3, [pc, #108]	@ (8003884 <HAL_RCC_OscConfig+0x4cc>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f7fe fcbf 	bl	800219c <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x47c>
 8003822:	f7fe fcbb 	bl	800219c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x47c>
 8003830:	2303      	movs	r3, #3
 8003832:	e03d      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 8003834:	4b11      	ldr	r3, [pc, #68]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x46a>
 8003840:	e035      	b.n	80038ae <HAL_RCC_OscConfig+0x4f6>
 8003842:	4b10      	ldr	r3, [pc, #64]	@ (8003884 <HAL_RCC_OscConfig+0x4cc>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	f7fe fca8 	bl	800219c <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x4aa>
 8003850:	f7fe fca4 	bl	800219c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x4aa>
 800385e:	2303      	movs	r3, #3
 8003860:	e026      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 8003862:	4b06      	ldr	r3, [pc, #24]	@ (800387c <HAL_RCC_OscConfig+0x4c4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x498>
 800386e:	e01e      	b.n	80038ae <HAL_RCC_OscConfig+0x4f6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d107      	bne.n	8003888 <HAL_RCC_OscConfig+0x4d0>
 8003878:	2301      	movs	r3, #1
 800387a:	e019      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 800387c:	40021000 	.word	0x40021000
 8003880:	40007000 	.word	0x40007000
 8003884:	42420060 	.word	0x42420060
 8003888:	4b0b      	ldr	r3, [pc, #44]	@ (80038b8 <HAL_RCC_OscConfig+0x500>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	429a      	cmp	r2, r3
 800389a:	d106      	bne.n	80038aa <HAL_RCC_OscConfig+0x4f2>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d001      	beq.n	80038ae <HAL_RCC_OscConfig+0x4f6>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_RCC_OscConfig+0x4f8>
 80038ae:	2300      	movs	r3, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000

080038bc <HAL_RCC_ClockConfig>:
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x14>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0d0      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1b6>
 80038d0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d910      	bls.n	8003900 <HAL_RCC_ClockConfig+0x44>
 80038de:	4b67      	ldr	r3, [pc, #412]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 0207 	bic.w	r2, r3, #7
 80038e6:	4965      	ldr	r1, [pc, #404]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
 80038ee:	4b63      	ldr	r3, [pc, #396]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x44>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0b8      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1b6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <HAL_RCC_ClockConfig+0x92>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x68>
 8003918:	4b59      	ldr	r3, [pc, #356]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4a58      	ldr	r2, [pc, #352]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003922:	6053      	str	r3, [r2, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x80>
 8003930:	4b53      	ldr	r3, [pc, #332]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a52      	ldr	r2, [pc, #328]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800393a:	6053      	str	r3, [r2, #4]
 800393c:	4b50      	ldr	r3, [pc, #320]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	494d      	ldr	r1, [pc, #308]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d040      	beq.n	80039dc <HAL_RCC_ClockConfig+0x120>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xb6>
 8003962:	4b47      	ldr	r3, [pc, #284]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d115      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
 800396e:	2301      	movs	r3, #1
 8003970:	e07f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1b6>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xce>
 800397a:	4b41      	ldr	r3, [pc, #260]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
 8003986:	2301      	movs	r3, #1
 8003988:	e073      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1b6>
 800398a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
 8003996:	2301      	movs	r3, #1
 8003998:	e06b      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1b6>
 800399a:	4b39      	ldr	r3, [pc, #228]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f023 0203 	bic.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4936      	ldr	r1, [pc, #216]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
 80039ac:	f7fe fbf6 	bl	800219c <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_ClockConfig+0x10e>
 80039b4:	f7fe fbf2 	bl	800219c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0x10e>
 80039c6:	2303      	movs	r3, #3
 80039c8:	e053      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1b6>
 80039ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 020c 	and.w	r2, r3, #12
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	429a      	cmp	r2, r3
 80039da:	d1eb      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xf8>
 80039dc:	4b27      	ldr	r3, [pc, #156]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d210      	bcs.n	8003a0c <HAL_RCC_ClockConfig+0x150>
 80039ea:	4b24      	ldr	r3, [pc, #144]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 0207 	bic.w	r2, r3, #7
 80039f2:	4922      	ldr	r1, [pc, #136]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
 80039fa:	4b20      	ldr	r3, [pc, #128]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x150>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e032      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1b6>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x16e>
 8003a18:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4916      	ldr	r1, [pc, #88]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x18e>
 8003a36:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	490e      	ldr	r1, [pc, #56]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
 8003a4a:	f000 f821 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	490a      	ldr	r1, [pc, #40]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5c:	5ccb      	ldrb	r3, [r1, r3]
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	4a09      	ldr	r2, [pc, #36]	@ (8003a88 <HAL_RCC_ClockConfig+0x1cc>)
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <HAL_RCC_ClockConfig+0x1d0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe f9fc 	bl	8001e68 <HAL_InitTick>
 8003a70:	2300      	movs	r3, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40022000 	.word	0x40022000
 8003a80:	40021000 	.word	0x40021000
 8003a84:	08007eb4 	.word	0x08007eb4
 8003a88:	20000004 	.word	0x20000004
 8003a8c:	20000008 	.word	0x20000008

08003a90 <HAL_RCC_GetSysClockFreq>:
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8003abe:	e027      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x80>
 8003ac0:	4b19      	ldr	r3, [pc, #100]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	e027      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x86>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	0c9b      	lsrs	r3, r3, #18
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	4a17      	ldr	r2, [pc, #92]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ad0:	5cd3      	ldrb	r3, [r2, r3]
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d010      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x70>
 8003ade:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	0c5b      	lsrs	r3, r3, #17
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	4a11      	ldr	r2, [pc, #68]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003aea:	5cd3      	ldrb	r3, [r2, r3]
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a0d      	ldr	r2, [pc, #52]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003af2:	fb03 f202 	mul.w	r2, r3, r2
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e004      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x7a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a0c      	ldr	r2, [pc, #48]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b04:	fb02 f303 	mul.w	r3, r2, r3
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	e002      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x86>
 8003b10:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	bf00      	nop
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	007a1200 	.word	0x007a1200
 8003b2c:	08007ecc 	.word	0x08007ecc
 8003b30:	08007edc 	.word	0x08007edc
 8003b34:	003d0900 	.word	0x003d0900

08003b38 <HAL_RCC_GetHCLKFreq>:
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4b02      	ldr	r3, [pc, #8]	@ (8003b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	20000004 	.word	0x20000004

08003b4c <HAL_RCC_GetPCLK1Freq>:
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	f7ff fff2 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4903      	ldr	r1, [pc, #12]	@ (8003b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	08007ec4 	.word	0x08007ec4

08003b74 <HAL_RCC_GetPCLK2Freq>:
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	f7ff ffde 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	0adb      	lsrs	r3, r3, #11
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4903      	ldr	r1, [pc, #12]	@ (8003b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	08007ec4 	.word	0x08007ec4

08003b9c <HAL_RCC_GetClockConfig>:
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	220f      	movs	r2, #15
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	4b11      	ldr	r3, [pc, #68]	@ (8003bf4 <HAL_RCC_GetClockConfig+0x58>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0203 	and.w	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf4 <HAL_RCC_GetClockConfig+0x58>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_RCC_GetClockConfig+0x58>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	60da      	str	r2, [r3, #12]
 8003bd0:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <HAL_RCC_GetClockConfig+0x58>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	08db      	lsrs	r3, r3, #3
 8003bd6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0207 	and.w	r2, r3, #7
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40022000 	.word	0x40022000

08003bfc <RCC_Delay>:
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <RCC_Delay+0x34>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0a      	ldr	r2, [pc, #40]	@ (8003c34 <RCC_Delay+0x38>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0a5b      	lsrs	r3, r3, #9
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	bf00      	nop
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1e5a      	subs	r2, r3, #1
 8003c1e:	60fa      	str	r2, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f9      	bne.n	8003c18 <RCC_Delay+0x1c>
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	20000004 	.word	0x20000004
 8003c34:	10624dd3 	.word	0x10624dd3

08003c38 <HAL_RCCEx_PeriphCLKConfig>:
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d07d      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003c54:	2300      	movs	r3, #0
 8003c56:	75fb      	strb	r3, [r7, #23]
 8003c58:	4b4f      	ldr	r3, [pc, #316]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10d      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003c64:	4b4c      	ldr	r3, [pc, #304]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4a4b      	ldr	r2, [pc, #300]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	61d3      	str	r3, [r2, #28]
 8003c70:	4b49      	ldr	r3, [pc, #292]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	75fb      	strb	r3, [r7, #23]
 8003c80:	4b46      	ldr	r3, [pc, #280]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d118      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x86>
 8003c8c:	4b43      	ldr	r3, [pc, #268]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a42      	ldr	r2, [pc, #264]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	f7fe fa80 	bl	800219c <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ca0:	f7fe fa7c 	bl	800219c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	@ 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e06d      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8003cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003cbe:	4b36      	ldr	r3, [pc, #216]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d02e      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d027      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	4b2c      	ldr	r3, [pc, #176]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	4a29      	ldr	r2, [pc, #164]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6213      	str	r3, [r2, #32]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d014      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d02:	f7fe fa4b 	bl	800219c <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]
 8003d08:	e00a      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003d0a:	f7fe fa47 	bl	800219c <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e036      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8003d20:	4b1d      	ldr	r3, [pc, #116]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ee      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4917      	ldr	r1, [pc, #92]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	620b      	str	r3, [r1, #32]
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d105      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003d44:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4a13      	ldr	r2, [pc, #76]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	61d3      	str	r3, [r2, #28]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	490b      	ldr	r1, [pc, #44]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	604b      	str	r3, [r1, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d7a:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4904      	ldr	r1, [pc, #16]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	40007000 	.word	0x40007000
 8003da0:	42420440 	.word	0x42420440

08003da4 <HAL_RCCEx_GetPeriphCLKFreq>:
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	f200 808a 	bhi.w	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d045      	beq.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d075      	beq.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8003dda:	e082      	b.n	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003ddc:	4b46      	ldr	r3, [pc, #280]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	4b45      	ldr	r3, [pc, #276]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d07b      	beq.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	0c9b      	lsrs	r3, r3, #18
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	4a41      	ldr	r2, [pc, #260]	@ (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d015      	beq.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 8003e06:	4b3c      	ldr	r3, [pc, #240]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	0c5b      	lsrs	r3, r3, #17
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	4a3b      	ldr	r2, [pc, #236]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003e12:	5cd3      	ldrb	r3, [r2, r3]
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00d      	beq.n	8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003e20:	4a38      	ldr	r2, [pc, #224]	@ (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	e004      	b.n	8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4a34      	ldr	r2, [pc, #208]	@ (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e48:	d102      	bne.n	8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	e04a      	b.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4a2d      	ldr	r2, [pc, #180]	@ (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	e042      	b.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003e60:	4b25      	ldr	r3, [pc, #148]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e70:	d108      	bne.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003e7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	e01f      	b.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e8e:	d109      	bne.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003e90:	4b19      	ldr	r3, [pc, #100]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003e9c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	e00f      	b.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eae:	d11c      	bne.n	8003eea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003eb0:	4b11      	ldr	r3, [pc, #68]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d016      	beq.n	8003eea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ebc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	e012      	b.n	8003eea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ec4:	e011      	b.n	8003eea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ec6:	f7ff fe55 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	0b9b      	lsrs	r3, r3, #14
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	e004      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003ee2:	bf00      	nop
 8003ee4:	e002      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003eea:	bf00      	nop
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	08007ee0 	.word	0x08007ee0
 8003f00:	08007ef0 	.word	0x08007ef0
 8003f04:	007a1200 	.word	0x007a1200
 8003f08:	003d0900 	.word	0x003d0900
 8003f0c:	aaaaaaab 	.word	0xaaaaaaab

08003f10 <HAL_TIM_Base_Init>:
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_Base_Init+0x12>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e041      	b.n	8003fa6 <HAL_TIM_Base_Init+0x96>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_TIM_Base_Init+0x2c>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fe f8c4 	bl	80020c4 <HAL_TIM_Base_MspInit>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f000 facc 	bl	80044ec <TIM_Base_SetConfig>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <HAL_TIM_Base_Start>:
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d001      	beq.n	8003fc8 <HAL_TIM_Base_Start+0x18>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e032      	b.n	800402e <HAL_TIM_Base_Start+0x7e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a18      	ldr	r2, [pc, #96]	@ (8004038 <HAL_TIM_Base_Start+0x88>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00e      	beq.n	8003ff8 <HAL_TIM_Base_Start+0x48>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe2:	d009      	beq.n	8003ff8 <HAL_TIM_Base_Start+0x48>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a14      	ldr	r2, [pc, #80]	@ (800403c <HAL_TIM_Base_Start+0x8c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d004      	beq.n	8003ff8 <HAL_TIM_Base_Start+0x48>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a13      	ldr	r2, [pc, #76]	@ (8004040 <HAL_TIM_Base_Start+0x90>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d111      	bne.n	800401c <HAL_TIM_Base_Start+0x6c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b06      	cmp	r3, #6
 8004008:	d010      	beq.n	800402c <HAL_TIM_Base_Start+0x7c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0201 	orr.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e007      	b.n	800402c <HAL_TIM_Base_Start+0x7c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800

08004044 <HAL_TIM_Base_Stop>:
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10f      	bne.n	800407c <HAL_TIM_Base_Stop+0x38>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6a1a      	ldr	r2, [r3, #32]
 8004062:	f240 4344 	movw	r3, #1092	@ 0x444
 8004066:	4013      	ands	r3, r2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d107      	bne.n	800407c <HAL_TIM_Base_Stop+0x38>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004084:	2300      	movs	r3, #0
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <HAL_TIM_Base_Start_IT>:
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d001      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x18>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e03a      	b.n	800411e <HAL_TIM_Base_Start_IT+0x8e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	60da      	str	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a18      	ldr	r2, [pc, #96]	@ (8004128 <HAL_TIM_Base_Start_IT+0x98>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00e      	beq.n	80040e8 <HAL_TIM_Base_Start_IT+0x58>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d2:	d009      	beq.n	80040e8 <HAL_TIM_Base_Start_IT+0x58>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a14      	ldr	r2, [pc, #80]	@ (800412c <HAL_TIM_Base_Start_IT+0x9c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_TIM_Base_Start_IT+0x58>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a13      	ldr	r2, [pc, #76]	@ (8004130 <HAL_TIM_Base_Start_IT+0xa0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d111      	bne.n	800410c <HAL_TIM_Base_Start_IT+0x7c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b06      	cmp	r3, #6
 80040f8:	d010      	beq.n	800411c <HAL_TIM_Base_Start_IT+0x8c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e007      	b.n	800411c <HAL_TIM_Base_Start_IT+0x8c>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	2300      	movs	r3, #0
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	40012c00 	.word	0x40012c00
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800

08004134 <HAL_TIM_IRQHandler>:
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d020      	beq.n	8004198 <HAL_TIM_IRQHandler+0x64>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01b      	beq.n	8004198 <HAL_TIM_IRQHandler+0x64>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0202 	mvn.w	r2, #2
 8004168:	611a      	str	r2, [r3, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	771a      	strb	r2, [r3, #28]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x52>
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f998 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x5e>
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f98b 	bl	80044a2 <HAL_TIM_OC_DelayElapsedCallback>
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f99a 	bl	80044c6 <HAL_TIM_PWM_PulseFinishedCallback>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d020      	beq.n	80041e4 <HAL_TIM_IRQHandler+0xb0>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01b      	beq.n	80041e4 <HAL_TIM_IRQHandler+0xb0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0204 	mvn.w	r2, #4
 80041b4:	611a      	str	r2, [r3, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	771a      	strb	r2, [r3, #28]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_TIM_IRQHandler+0x9e>
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f972 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
 80041d0:	e005      	b.n	80041de <HAL_TIM_IRQHandler+0xaa>
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f965 	bl	80044a2 <HAL_TIM_OC_DelayElapsedCallback>
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f974 	bl	80044c6 <HAL_TIM_PWM_PulseFinishedCallback>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	771a      	strb	r2, [r3, #28]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d020      	beq.n	8004230 <HAL_TIM_IRQHandler+0xfc>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01b      	beq.n	8004230 <HAL_TIM_IRQHandler+0xfc>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0208 	mvn.w	r2, #8
 8004200:	611a      	str	r2, [r3, #16]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2204      	movs	r2, #4
 8004206:	771a      	strb	r2, [r3, #28]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0xea>
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f94c 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0xf6>
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f93f 	bl	80044a2 <HAL_TIM_OC_DelayElapsedCallback>
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f94e 	bl	80044c6 <HAL_TIM_PWM_PulseFinishedCallback>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b00      	cmp	r3, #0
 8004238:	d020      	beq.n	800427c <HAL_TIM_IRQHandler+0x148>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01b      	beq.n	800427c <HAL_TIM_IRQHandler+0x148>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0210 	mvn.w	r2, #16
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2208      	movs	r2, #8
 8004252:	771a      	strb	r2, [r3, #28]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0x136>
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f926 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0x142>
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f919 	bl	80044a2 <HAL_TIM_OC_DelayElapsedCallback>
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f928 	bl	80044c6 <HAL_TIM_PWM_PulseFinishedCallback>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <HAL_TIM_IRQHandler+0x16c>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <HAL_TIM_IRQHandler+0x16c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0201 	mvn.w	r2, #1
 8004298:	611a      	str	r2, [r3, #16]
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fd fc2e 	bl	8001afc <HAL_TIM_PeriodElapsedCallback>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00c      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x190>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x190>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042bc:	611a      	str	r2, [r3, #16]
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fa7f 	bl	80047c2 <HAL_TIMEx_BreakCallback>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00c      	beq.n	80042e8 <HAL_TIM_IRQHandler+0x1b4>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d007      	beq.n	80042e8 <HAL_TIM_IRQHandler+0x1b4>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042e0:	611a      	str	r2, [r3, #16]
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f8f8 	bl	80044d8 <HAL_TIM_TriggerCallback>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00c      	beq.n	800430c <HAL_TIM_IRQHandler+0x1d8>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <HAL_TIM_IRQHandler+0x1d8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0220 	mvn.w	r2, #32
 8004304:	611a      	str	r2, [r3, #16]
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fa52 	bl	80047b0 <HAL_TIMEx_CommutCallback>
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_TIM_ConfigClockSource>:
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_TIM_ConfigClockSource+0x1c>
 800432c:	2302      	movs	r3, #2
 800432e:	e0b4      	b.n	800449a <HAL_TIM_ConfigClockSource+0x186>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004368:	d03e      	beq.n	80043e8 <HAL_TIM_ConfigClockSource+0xd4>
 800436a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800436e:	f200 8087 	bhi.w	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004376:	f000 8086 	beq.w	8004486 <HAL_TIM_ConfigClockSource+0x172>
 800437a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800437e:	d87f      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 8004380:	2b70      	cmp	r3, #112	@ 0x70
 8004382:	d01a      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0xa6>
 8004384:	2b70      	cmp	r3, #112	@ 0x70
 8004386:	d87b      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	2b60      	cmp	r3, #96	@ 0x60
 800438a:	d050      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x11a>
 800438c:	2b60      	cmp	r3, #96	@ 0x60
 800438e:	d877      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b50      	cmp	r3, #80	@ 0x50
 8004392:	d03c      	beq.n	800440e <HAL_TIM_ConfigClockSource+0xfa>
 8004394:	2b50      	cmp	r3, #80	@ 0x50
 8004396:	d873      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 8004398:	2b40      	cmp	r3, #64	@ 0x40
 800439a:	d058      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x13a>
 800439c:	2b40      	cmp	r3, #64	@ 0x40
 800439e:	d86f      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b30      	cmp	r3, #48	@ 0x30
 80043a2:	d064      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x15a>
 80043a4:	2b30      	cmp	r3, #48	@ 0x30
 80043a6:	d86b      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d060      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x15a>
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d867      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d05c      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x15a>
 80043b4:	2b10      	cmp	r3, #16
 80043b6:	d05a      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x15a>
 80043b8:	e062      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6899      	ldr	r1, [r3, #8]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f000 f974 	bl	80046b6 <TIM_ETR_SetConfig>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	e04f      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	6899      	ldr	r1, [r3, #8]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f000 f95d 	bl	80046b6 <TIM_ETR_SetConfig>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	e03c      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	461a      	mov	r2, r3
 800441c:	f000 f8d4 	bl	80045c8 <TIM_TI1_ConfigInputStage>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2150      	movs	r1, #80	@ 0x50
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f92b 	bl	8004682 <TIM_ITRx_SetConfig>
 800442c:	e02c      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	461a      	mov	r2, r3
 800443c:	f000 f8f2 	bl	8004624 <TIM_TI2_ConfigInputStage>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2160      	movs	r1, #96	@ 0x60
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f91b 	bl	8004682 <TIM_ITRx_SetConfig>
 800444c:	e01c      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	461a      	mov	r2, r3
 800445c:	f000 f8b4 	bl	80045c8 <TIM_TI1_ConfigInputStage>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2140      	movs	r1, #64	@ 0x40
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f90b 	bl	8004682 <TIM_ITRx_SetConfig>
 800446c:	e00c      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f000 f902 	bl	8004682 <TIM_ITRx_SetConfig>
 800447e:	e003      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
 8004484:	e000      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>
 8004486:	bf00      	nop
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_TIM_OC_DelayElapsedCallback>:
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIM_IC_CaptureCallback>:
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIM_TriggerCallback>:
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
	...

080044ec <TIM_Base_SetConfig>:
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a2f      	ldr	r2, [pc, #188]	@ (80045bc <TIM_Base_SetConfig+0xd0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00b      	beq.n	800451c <TIM_Base_SetConfig+0x30>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800450a:	d007      	beq.n	800451c <TIM_Base_SetConfig+0x30>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a2c      	ldr	r2, [pc, #176]	@ (80045c0 <TIM_Base_SetConfig+0xd4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0x30>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a2b      	ldr	r2, [pc, #172]	@ (80045c4 <TIM_Base_SetConfig+0xd8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <TIM_Base_SetConfig+0x42>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a22      	ldr	r2, [pc, #136]	@ (80045bc <TIM_Base_SetConfig+0xd0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00b      	beq.n	800454e <TIM_Base_SetConfig+0x62>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453c:	d007      	beq.n	800454e <TIM_Base_SetConfig+0x62>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1f      	ldr	r2, [pc, #124]	@ (80045c0 <TIM_Base_SetConfig+0xd4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d003      	beq.n	800454e <TIM_Base_SetConfig+0x62>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1e      	ldr	r2, [pc, #120]	@ (80045c4 <TIM_Base_SetConfig+0xd8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d108      	bne.n	8004560 <TIM_Base_SetConfig+0x74>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	629a      	str	r2, [r3, #40]	@ 0x28
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a0d      	ldr	r2, [pc, #52]	@ (80045bc <TIM_Base_SetConfig+0xd0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d103      	bne.n	8004594 <TIM_Base_SetConfig+0xa8>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	631a      	str	r2, [r3, #48]	@ 0x30
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	615a      	str	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <TIM_Base_SetConfig+0xc6>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f023 0201 	bic.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	611a      	str	r2, [r3, #16]
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800

080045c8 <TIM_TI1_ConfigInputStage>:
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f023 0201 	bic.w	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	621a      	str	r2, [r3, #32]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f023 030a 	bic.w	r3, r3, #10
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	619a      	str	r2, [r3, #24]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	621a      	str	r2, [r3, #32]
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <TIM_TI2_ConfigInputStage>:
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f023 0210 	bic.w	r2, r3, #16
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	621a      	str	r2, [r3, #32]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	031b      	lsls	r3, r3, #12
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	619a      	str	r2, [r3, #24]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	621a      	str	r2, [r3, #32]
 8004678:	bf00      	nop
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <TIM_ITRx_SetConfig>:
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	f043 0307 	orr.w	r3, r3, #7
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <TIM_ETR_SetConfig>:
 80046b6:	b480      	push	{r7}
 80046b8:	b087      	sub	sp, #28
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	021a      	lsls	r2, r3, #8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	431a      	orrs	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4313      	orrs	r3, r2
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	609a      	str	r2, [r3, #8]
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIMEx_MasterConfigSynchronization>:
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004708:	2302      	movs	r3, #2
 800470a:	e046      	b.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00e      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004758:	d009      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a12      	ldr	r2, [pc, #72]	@ (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a10      	ldr	r2, [pc, #64]	@ (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d10c      	bne.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4313      	orrs	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004798:	2300      	movs	r3, #0
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr
 80047a4:	40012c00 	.word	0x40012c00
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800

080047b0 <HAL_TIMEx_CommutCallback>:
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIMEx_BreakCallback>:
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <__NVIC_SetPriority>:
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	6039      	str	r1, [r7, #0]
 80047de:	71fb      	strb	r3, [r7, #7]
 80047e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	db0a      	blt.n	80047fe <__NVIC_SetPriority+0x2a>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	490c      	ldr	r1, [pc, #48]	@ (8004820 <__NVIC_SetPriority+0x4c>)
 80047ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f2:	0112      	lsls	r2, r2, #4
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	440b      	add	r3, r1
 80047f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80047fc:	e00a      	b.n	8004814 <__NVIC_SetPriority+0x40>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	4908      	ldr	r1, [pc, #32]	@ (8004824 <__NVIC_SetPriority+0x50>)
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	3b04      	subs	r3, #4
 800480c:	0112      	lsls	r2, r2, #4
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	440b      	add	r3, r1
 8004812:	761a      	strb	r2, [r3, #24]
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000e100 	.word	0xe000e100
 8004824:	e000ed00 	.word	0xe000ed00

08004828 <SysTick_Handler>:
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
 800482c:	4b05      	ldr	r3, [pc, #20]	@ (8004844 <SysTick_Handler+0x1c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f001 fdb8 	bl	80063a4 <xTaskGetSchedulerState>
 8004834:	4603      	mov	r3, r0
 8004836:	2b01      	cmp	r3, #1
 8004838:	d001      	beq.n	800483e <SysTick_Handler+0x16>
 800483a:	f002 fb5d 	bl	8006ef8 <xPortSysTickHandler>
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	e000e010 	.word	0xe000e010

08004848 <SVC_Setup>:
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
 800484c:	2100      	movs	r1, #0
 800484e:	f06f 0004 	mvn.w	r0, #4
 8004852:	f7ff ffbf 	bl	80047d4 <__NVIC_SetPriority>
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <osKernelInitialize>:
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	f3ef 8305 	mrs	r3, IPSR
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <osKernelInitialize+0x1a>
 800486e:	f06f 0305 	mvn.w	r3, #5
 8004872:	607b      	str	r3, [r7, #4]
 8004874:	e00c      	b.n	8004890 <osKernelInitialize+0x34>
 8004876:	4b09      	ldr	r3, [pc, #36]	@ (800489c <osKernelInitialize+0x40>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d105      	bne.n	800488a <osKernelInitialize+0x2e>
 800487e:	4b07      	ldr	r3, [pc, #28]	@ (800489c <osKernelInitialize+0x40>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	607b      	str	r3, [r7, #4]
 8004888:	e002      	b.n	8004890 <osKernelInitialize+0x34>
 800488a:	f04f 33ff 	mov.w	r3, #4294967295
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4618      	mov	r0, r3
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	200003e0 	.word	0x200003e0

080048a0 <osKernelStart>:
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	f3ef 8305 	mrs	r3, IPSR
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <osKernelStart+0x1a>
 80048b2:	f06f 0305 	mvn.w	r3, #5
 80048b6:	607b      	str	r3, [r7, #4]
 80048b8:	e010      	b.n	80048dc <osKernelStart+0x3c>
 80048ba:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <osKernelStart+0x48>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d109      	bne.n	80048d6 <osKernelStart+0x36>
 80048c2:	f7ff ffc1 	bl	8004848 <SVC_Setup>
 80048c6:	4b08      	ldr	r3, [pc, #32]	@ (80048e8 <osKernelStart+0x48>)
 80048c8:	2202      	movs	r2, #2
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f001 f90a 	bl	8005ae4 <vTaskStartScheduler>
 80048d0:	2300      	movs	r3, #0
 80048d2:	607b      	str	r3, [r7, #4]
 80048d4:	e002      	b.n	80048dc <osKernelStart+0x3c>
 80048d6:	f04f 33ff 	mov.w	r3, #4294967295
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200003e0 	.word	0x200003e0

080048ec <osThreadNew>:
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08e      	sub	sp, #56	@ 0x38
 80048f0:	af04      	add	r7, sp, #16
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	f3ef 8305 	mrs	r3, IPSR
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d17e      	bne.n	8004a06 <osThreadNew+0x11a>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d07b      	beq.n	8004a06 <osThreadNew+0x11a>
 800490e:	2380      	movs	r3, #128	@ 0x80
 8004910:	623b      	str	r3, [r7, #32]
 8004912:	2318      	movs	r3, #24
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	2300      	movs	r3, #0
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d045      	beq.n	80049b2 <osThreadNew+0xc6>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <osThreadNew+0x48>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <osThreadNew+0x56>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <osThreadNew+0x6e>
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b38      	cmp	r3, #56	@ 0x38
 800494c:	d805      	bhi.n	800495a <osThreadNew+0x6e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <osThreadNew+0x72>
 800495a:	2300      	movs	r3, #0
 800495c:	e054      	b.n	8004a08 <osThreadNew+0x11c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <osThreadNew+0x82>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	089b      	lsrs	r3, r3, #2
 800496c:	623b      	str	r3, [r7, #32]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00e      	beq.n	8004994 <osThreadNew+0xa8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2ba7      	cmp	r3, #167	@ 0xa7
 800497c:	d90a      	bls.n	8004994 <osThreadNew+0xa8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d006      	beq.n	8004994 <osThreadNew+0xa8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <osThreadNew+0xa8>
 800498e:	2301      	movs	r3, #1
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e010      	b.n	80049b6 <osThreadNew+0xca>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10c      	bne.n	80049b6 <osThreadNew+0xca>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <osThreadNew+0xca>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <osThreadNew+0xca>
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	e001      	b.n	80049b6 <osThreadNew+0xca>
 80049b2:	2300      	movs	r3, #0
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d110      	bne.n	80049de <osThreadNew+0xf2>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6892      	ldr	r2, [r2, #8]
 80049c4:	9202      	str	r2, [sp, #8]
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	6a3a      	ldr	r2, [r7, #32]
 80049d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fe12 	bl	80055fc <xTaskCreateStatic>
 80049d8:	4603      	mov	r3, r0
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	e013      	b.n	8004a06 <osThreadNew+0x11a>
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d110      	bne.n	8004a06 <osThreadNew+0x11a>
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	f107 0310 	add.w	r3, r7, #16
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fe60 	bl	80056bc <xTaskCreate>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <osThreadNew+0x11a>
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3728      	adds	r7, #40	@ 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <osDelay>:
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	f3ef 8305 	mrs	r3, IPSR
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <osDelay+0x1c>
 8004a24:	f06f 0305 	mvn.w	r3, #5
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e007      	b.n	8004a3c <osDelay+0x2c>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <osDelay+0x2c>
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f001 f81e 	bl	8005a78 <vTaskDelay>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <vApplicationGetIdleTaskMemory>:
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4a06      	ldr	r2, [pc, #24]	@ (8004a70 <vApplicationGetIdleTaskMemory+0x28>)
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4a05      	ldr	r2, [pc, #20]	@ (8004a74 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2280      	movs	r2, #128	@ 0x80
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr
 8004a70:	200003e4 	.word	0x200003e4
 8004a74:	2000048c 	.word	0x2000048c

08004a78 <vApplicationGetTimerTaskMemory>:
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a07      	ldr	r2, [pc, #28]	@ (8004aa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4a06      	ldr	r2, [pc, #24]	@ (8004aa8 <vApplicationGetTimerTaskMemory+0x30>)
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	2000068c 	.word	0x2000068c
 8004aa8:	20000734 	.word	0x20000734

08004aac <vListInitialise>:
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f103 0208 	add.w	r2, r3, #8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac4:	609a      	str	r2, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f103 0208 	add.w	r2, r3, #8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f103 0208 	add.w	r2, r3, #8
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr

08004aea <vListInitialiseItem>:
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	611a      	str	r2, [r3, #16]
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr

08004b02 <vListInsertEnd>:
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	609a      	str	r2, [r3, #8]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	605a      	str	r2, [r3, #4]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	609a      	str	r2, [r3, #8]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	611a      	str	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <vListInsert>:
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d103      	bne.n	8004b68 <vListInsert+0x20>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	e00c      	b.n	8004b82 <vListInsert+0x3a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e002      	b.n	8004b76 <vListInsert+0x2e>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d2f6      	bcs.n	8004b70 <vListInsert+0x28>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	609a      	str	r2, [r3, #8]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	611a      	str	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr

08004bb8 <uxListRemove>:
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6892      	ldr	r2, [r2, #8]
 8004bce:	609a      	str	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6852      	ldr	r2, [r2, #4]
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d103      	bne.n	8004bec <uxListRemove+0x34>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	605a      	str	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	1e5a      	subs	r2, r3, #1
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
	...

08004c0c <xQueueGenericReset>:
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <xQueueGenericReset+0x2c>
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xQueueGenericReset+0x28>
 8004c38:	f002 f8e0 	bl	8006dfc <vPortEnterCritical>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	68f9      	ldr	r1, [r7, #12]
 8004c46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	441a      	add	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	609a      	str	r2, [r3, #8]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	605a      	str	r2, [r3, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	441a      	add	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	22ff      	movs	r2, #255	@ 0xff
 8004c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	22ff      	movs	r2, #255	@ 0xff
 8004c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d114      	bne.n	8004cb8 <xQueueGenericReset+0xac>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01a      	beq.n	8004ccc <xQueueGenericReset+0xc0>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3310      	adds	r3, #16
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 f9bc 	bl	8006018 <xTaskRemoveFromEventList>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d012      	beq.n	8004ccc <xQueueGenericReset+0xc0>
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <xQueueGenericReset+0xd0>)
 8004ca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	e009      	b.n	8004ccc <xQueueGenericReset+0xc0>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3310      	adds	r3, #16
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fef5 	bl	8004aac <vListInitialise>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3324      	adds	r3, #36	@ 0x24
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fef0 	bl	8004aac <vListInitialise>
 8004ccc:	f002 f8c6 	bl	8006e5c <vPortExitCritical>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	e000ed04 	.word	0xe000ed04

08004ce0 <xQueueGenericCreateStatic>:
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08e      	sub	sp, #56	@ 0x38
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <xQueueGenericCreateStatic+0x2c>
 8004cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	e7fd      	b.n	8004d08 <xQueueGenericCreateStatic+0x28>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <xQueueGenericCreateStatic+0x4a>
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <xQueueGenericCreateStatic+0x46>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <xQueueGenericCreateStatic+0x56>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <xQueueGenericCreateStatic+0x5a>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <xQueueGenericCreateStatic+0x5c>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10b      	bne.n	8004d58 <xQueueGenericCreateStatic+0x78>
 8004d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	bf00      	nop
 8004d54:	bf00      	nop
 8004d56:	e7fd      	b.n	8004d54 <xQueueGenericCreateStatic+0x74>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <xQueueGenericCreateStatic+0x84>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <xQueueGenericCreateStatic+0x88>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <xQueueGenericCreateStatic+0x8a>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <xQueueGenericCreateStatic+0xa6>
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	e7fd      	b.n	8004d82 <xQueueGenericCreateStatic+0xa2>
 8004d86:	2350      	movs	r3, #80	@ 0x50
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b50      	cmp	r3, #80	@ 0x50
 8004d8e:	d00b      	beq.n	8004da8 <xQueueGenericCreateStatic+0xc8>
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <xQueueGenericCreateStatic+0xc4>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <xQueueGenericCreateStatic+0xf0>
 8004db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004dbc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f805 	bl	8004dda <prvInitialiseNewQueue>
 8004dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3730      	adds	r7, #48	@ 0x30
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <prvInitialiseNewQueue>:
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
 8004de6:	70fb      	strb	r3, [r7, #3]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d103      	bne.n	8004df6 <prvInitialiseNewQueue+0x1c>
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e002      	b.n	8004dfc <prvInitialiseNewQueue+0x22>
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e08:	2101      	movs	r1, #1
 8004e0a:	69b8      	ldr	r0, [r7, #24]
 8004e0c:	f7ff fefe 	bl	8004c0c <xQueueGenericReset>
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	78fa      	ldrb	r2, [r7, #3]
 8004e14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8004e18:	bf00      	nop
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <xQueueGenericSend>:
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08e      	sub	sp, #56	@ 0x38
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10b      	bne.n	8004e54 <xQueueGenericSend+0x34>
 8004e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	e7fd      	b.n	8004e50 <xQueueGenericSend+0x30>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d103      	bne.n	8004e62 <xQueueGenericSend+0x42>
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <xQueueGenericSend+0x46>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <xQueueGenericSend+0x48>
 8004e66:	2300      	movs	r3, #0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10b      	bne.n	8004e84 <xQueueGenericSend+0x64>
 8004e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	e7fd      	b.n	8004e80 <xQueueGenericSend+0x60>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d103      	bne.n	8004e92 <xQueueGenericSend+0x72>
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <xQueueGenericSend+0x76>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <xQueueGenericSend+0x78>
 8004e96:	2300      	movs	r3, #0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10b      	bne.n	8004eb4 <xQueueGenericSend+0x94>
 8004e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	623b      	str	r3, [r7, #32]
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	e7fd      	b.n	8004eb0 <xQueueGenericSend+0x90>
 8004eb4:	f001 fa76 	bl	80063a4 <xTaskGetSchedulerState>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <xQueueGenericSend+0xa4>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <xQueueGenericSend+0xa8>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <xQueueGenericSend+0xaa>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <xQueueGenericSend+0xc6>
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	e7fd      	b.n	8004ee2 <xQueueGenericSend+0xc2>
 8004ee6:	f001 ff89 	bl	8006dfc <vPortEnterCritical>
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <xQueueGenericSend+0xdc>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d129      	bne.n	8004f50 <xQueueGenericSend+0x130>
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f02:	f000 fa0f 	bl	8005324 <prvCopyDataToQueue>
 8004f06:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d010      	beq.n	8004f32 <xQueueGenericSend+0x112>
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f12:	3324      	adds	r3, #36	@ 0x24
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 f87f 	bl	8006018 <xTaskRemoveFromEventList>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d013      	beq.n	8004f48 <xQueueGenericSend+0x128>
 8004f20:	4b3f      	ldr	r3, [pc, #252]	@ (8005020 <xQueueGenericSend+0x200>)
 8004f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	e00a      	b.n	8004f48 <xQueueGenericSend+0x128>
 8004f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <xQueueGenericSend+0x128>
 8004f38:	4b39      	ldr	r3, [pc, #228]	@ (8005020 <xQueueGenericSend+0x200>)
 8004f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f001 ff88 	bl	8006e5c <vPortExitCritical>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e063      	b.n	8005018 <xQueueGenericSend+0x1f8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <xQueueGenericSend+0x13e>
 8004f56:	f001 ff81 	bl	8006e5c <vPortExitCritical>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e05c      	b.n	8005018 <xQueueGenericSend+0x1f8>
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <xQueueGenericSend+0x152>
 8004f64:	f107 0314 	add.w	r3, r7, #20
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 f8b9 	bl	80060e0 <vTaskInternalSetTimeOutState>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f72:	f001 ff73 	bl	8006e5c <vPortExitCritical>
 8004f76:	f000 fe25 	bl	8005bc4 <vTaskSuspendAll>
 8004f7a:	f001 ff3f 	bl	8006dfc <vPortEnterCritical>
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f84:	b25b      	sxtb	r3, r3
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d103      	bne.n	8004f94 <xQueueGenericSend+0x174>
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d103      	bne.n	8004faa <xQueueGenericSend+0x18a>
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004faa:	f001 ff57 	bl	8006e5c <vPortExitCritical>
 8004fae:	1d3a      	adds	r2, r7, #4
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 f8a8 	bl	800610c <xTaskCheckForTimeOut>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d124      	bne.n	800500c <xQueueGenericSend+0x1ec>
 8004fc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fc4:	f000 faa6 	bl	8005514 <prvIsQueueFull>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d018      	beq.n	8005000 <xQueueGenericSend+0x1e0>
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	3310      	adds	r3, #16
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 ffcc 	bl	8005f74 <vTaskPlaceOnEventList>
 8004fdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fde:	f000 fa31 	bl	8005444 <prvUnlockQueue>
 8004fe2:	f000 fdfd 	bl	8005be0 <xTaskResumeAll>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f47f af7c 	bne.w	8004ee6 <xQueueGenericSend+0xc6>
 8004fee:	4b0c      	ldr	r3, [pc, #48]	@ (8005020 <xQueueGenericSend+0x200>)
 8004ff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	e772      	b.n	8004ee6 <xQueueGenericSend+0xc6>
 8005000:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005002:	f000 fa1f 	bl	8005444 <prvUnlockQueue>
 8005006:	f000 fdeb 	bl	8005be0 <xTaskResumeAll>
 800500a:	e76c      	b.n	8004ee6 <xQueueGenericSend+0xc6>
 800500c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800500e:	f000 fa19 	bl	8005444 <prvUnlockQueue>
 8005012:	f000 fde5 	bl	8005be0 <xTaskResumeAll>
 8005016:	2300      	movs	r3, #0
 8005018:	4618      	mov	r0, r3
 800501a:	3738      	adds	r7, #56	@ 0x38
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	e000ed04 	.word	0xe000ed04

08005024 <xQueueGenericSendFromISR>:
 8005024:	b580      	push	{r7, lr}
 8005026:	b090      	sub	sp, #64	@ 0x40
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10b      	bne.n	8005054 <xQueueGenericSendFromISR+0x30>
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	e7fd      	b.n	8005050 <xQueueGenericSendFromISR+0x2c>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <xQueueGenericSendFromISR+0x3e>
 800505a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <xQueueGenericSendFromISR+0x42>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <xQueueGenericSendFromISR+0x44>
 8005066:	2300      	movs	r3, #0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10b      	bne.n	8005084 <xQueueGenericSendFromISR+0x60>
 800506c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	e7fd      	b.n	8005080 <xQueueGenericSendFromISR+0x5c>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d103      	bne.n	8005092 <xQueueGenericSendFromISR+0x6e>
 800508a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <xQueueGenericSendFromISR+0x72>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <xQueueGenericSendFromISR+0x74>
 8005096:	2300      	movs	r3, #0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <xQueueGenericSendFromISR+0x90>
 800509c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	623b      	str	r3, [r7, #32]
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	e7fd      	b.n	80050b0 <xQueueGenericSendFromISR+0x8c>
 80050b4:	f001 ff64 	bl	8006f80 <vPortValidateInterruptPriority>
 80050b8:	f3ef 8211 	mrs	r2, BASEPRI
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	61fa      	str	r2, [r7, #28]
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050dc:	429a      	cmp	r2, r3
 80050de:	d302      	bcc.n	80050e6 <xQueueGenericSendFromISR+0xc2>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d12f      	bne.n	8005146 <xQueueGenericSendFromISR+0x122>
 80050e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80050f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80050fc:	f000 f912 	bl	8005324 <prvCopyDataToQueue>
 8005100:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d112      	bne.n	8005130 <xQueueGenericSendFromISR+0x10c>
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <xQueueGenericSendFromISR+0x11c>
 8005112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005114:	3324      	adds	r3, #36	@ 0x24
 8005116:	4618      	mov	r0, r3
 8005118:	f000 ff7e 	bl	8006018 <xTaskRemoveFromEventList>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00e      	beq.n	8005140 <xQueueGenericSendFromISR+0x11c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00b      	beq.n	8005140 <xQueueGenericSendFromISR+0x11c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e007      	b.n	8005140 <xQueueGenericSendFromISR+0x11c>
 8005130:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005134:	3301      	adds	r3, #1
 8005136:	b2db      	uxtb	r3, r3
 8005138:	b25a      	sxtb	r2, r3
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005140:	2301      	movs	r3, #1
 8005142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005144:	e001      	b.n	800514a <xQueueGenericSendFromISR+0x126>
 8005146:	2300      	movs	r3, #0
 8005148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800514a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	bf00      	nop
 8005156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005158:	4618      	mov	r0, r3
 800515a:	3740      	adds	r7, #64	@ 0x40
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <xQueueReceive>:
 8005160:	b580      	push	{r7, lr}
 8005162:	b08c      	sub	sp, #48	@ 0x30
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	2300      	movs	r3, #0
 800516e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <xQueueReceive+0x32>
 800517a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	623b      	str	r3, [r7, #32]
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	e7fd      	b.n	800518e <xQueueReceive+0x2e>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d103      	bne.n	80051a0 <xQueueReceive+0x40>
 8005198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <xQueueReceive+0x44>
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <xQueueReceive+0x46>
 80051a4:	2300      	movs	r3, #0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <xQueueReceive+0x62>
 80051aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	61fb      	str	r3, [r7, #28]
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <xQueueReceive+0x5e>
 80051c2:	f001 f8ef 	bl	80063a4 <xTaskGetSchedulerState>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <xQueueReceive+0x72>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <xQueueReceive+0x76>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <xQueueReceive+0x78>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <xQueueReceive+0x94>
 80051dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	e7fd      	b.n	80051f0 <xQueueReceive+0x90>
 80051f4:	f001 fe02 	bl	8006dfc <vPortEnterCritical>
 80051f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01f      	beq.n	8005244 <xQueueReceive+0xe4>
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005208:	f000 f8f6 	bl	80053f8 <prvCopyDataFromQueue>
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	1e5a      	subs	r2, r3, #1
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	639a      	str	r2, [r3, #56]	@ 0x38
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00f      	beq.n	800523c <xQueueReceive+0xdc>
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	3310      	adds	r3, #16
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fef9 	bl	8006018 <xTaskRemoveFromEventList>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <xQueueReceive+0xdc>
 800522c:	4b3c      	ldr	r3, [pc, #240]	@ (8005320 <xQueueReceive+0x1c0>)
 800522e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f001 fe0e 	bl	8006e5c <vPortExitCritical>
 8005240:	2301      	movs	r3, #1
 8005242:	e069      	b.n	8005318 <xQueueReceive+0x1b8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d103      	bne.n	8005252 <xQueueReceive+0xf2>
 800524a:	f001 fe07 	bl	8006e5c <vPortExitCritical>
 800524e:	2300      	movs	r3, #0
 8005250:	e062      	b.n	8005318 <xQueueReceive+0x1b8>
 8005252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <xQueueReceive+0x106>
 8005258:	f107 0310 	add.w	r3, r7, #16
 800525c:	4618      	mov	r0, r3
 800525e:	f000 ff3f 	bl	80060e0 <vTaskInternalSetTimeOutState>
 8005262:	2301      	movs	r3, #1
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005266:	f001 fdf9 	bl	8006e5c <vPortExitCritical>
 800526a:	f000 fcab 	bl	8005bc4 <vTaskSuspendAll>
 800526e:	f001 fdc5 	bl	8006dfc <vPortEnterCritical>
 8005272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005278:	b25b      	sxtb	r3, r3
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527e:	d103      	bne.n	8005288 <xQueueReceive+0x128>
 8005280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800528e:	b25b      	sxtb	r3, r3
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d103      	bne.n	800529e <xQueueReceive+0x13e>
 8005296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800529e:	f001 fddd 	bl	8006e5c <vPortExitCritical>
 80052a2:	1d3a      	adds	r2, r7, #4
 80052a4:	f107 0310 	add.w	r3, r7, #16
 80052a8:	4611      	mov	r1, r2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 ff2e 	bl	800610c <xTaskCheckForTimeOut>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d123      	bne.n	80052fe <xQueueReceive+0x19e>
 80052b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052b8:	f000 f916 	bl	80054e8 <prvIsQueueEmpty>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d017      	beq.n	80052f2 <xQueueReceive+0x192>
 80052c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c4:	3324      	adds	r3, #36	@ 0x24
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fe52 	bl	8005f74 <vTaskPlaceOnEventList>
 80052d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052d2:	f000 f8b7 	bl	8005444 <prvUnlockQueue>
 80052d6:	f000 fc83 	bl	8005be0 <xTaskResumeAll>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d189      	bne.n	80051f4 <xQueueReceive+0x94>
 80052e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005320 <xQueueReceive+0x1c0>)
 80052e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	e780      	b.n	80051f4 <xQueueReceive+0x94>
 80052f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052f4:	f000 f8a6 	bl	8005444 <prvUnlockQueue>
 80052f8:	f000 fc72 	bl	8005be0 <xTaskResumeAll>
 80052fc:	e77a      	b.n	80051f4 <xQueueReceive+0x94>
 80052fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005300:	f000 f8a0 	bl	8005444 <prvUnlockQueue>
 8005304:	f000 fc6c 	bl	8005be0 <xTaskResumeAll>
 8005308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800530a:	f000 f8ed 	bl	80054e8 <prvIsQueueEmpty>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	f43f af6f 	beq.w	80051f4 <xQueueReceive+0x94>
 8005316:	2300      	movs	r3, #0
 8005318:	4618      	mov	r0, r3
 800531a:	3730      	adds	r7, #48	@ 0x30
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	e000ed04 	.word	0xe000ed04

08005324 <prvCopyDataToQueue>:
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10d      	bne.n	800535e <prvCopyDataToQueue+0x3a>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d14d      	bne.n	80053e6 <prvCopyDataToQueue+0xc2>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	4618      	mov	r0, r3
 8005350:	f001 f846 	bl	80063e0 <xTaskPriorityDisinherit>
 8005354:	6178      	str	r0, [r7, #20]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	e043      	b.n	80053e6 <prvCopyDataToQueue+0xc2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d119      	bne.n	8005398 <prvCopyDataToQueue+0x74>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6858      	ldr	r0, [r3, #4]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536c:	461a      	mov	r2, r3
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	f002 f8e6 	bl	8007540 <memcpy>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	441a      	add	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	d32b      	bcc.n	80053e6 <prvCopyDataToQueue+0xc2>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	e026      	b.n	80053e6 <prvCopyDataToQueue+0xc2>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68d8      	ldr	r0, [r3, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	461a      	mov	r2, r3
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	f002 f8cc 	bl	8007540 <memcpy>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b0:	425b      	negs	r3, r3
 80053b2:	441a      	add	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	60da      	str	r2, [r3, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d207      	bcs.n	80053d4 <prvCopyDataToQueue+0xb0>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053cc:	425b      	negs	r3, r3
 80053ce:	441a      	add	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	60da      	str	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d105      	bne.n	80053e6 <prvCopyDataToQueue+0xc2>
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <prvCopyDataToQueue+0xc2>
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <prvCopyDataFromQueue>:
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d018      	beq.n	800543c <prvCopyDataFromQueue+0x44>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005412:	441a      	add	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	429a      	cmp	r2, r3
 8005422:	d303      	bcc.n	800542c <prvCopyDataFromQueue+0x34>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68d9      	ldr	r1, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	461a      	mov	r2, r3
 8005436:	6838      	ldr	r0, [r7, #0]
 8005438:	f002 f882 	bl	8007540 <memcpy>
 800543c:	bf00      	nop
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <prvUnlockQueue>:
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	f001 fcd6 	bl	8006dfc <vPortEnterCritical>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005456:	73fb      	strb	r3, [r7, #15]
 8005458:	e011      	b.n	800547e <prvUnlockQueue+0x3a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d012      	beq.n	8005488 <prvUnlockQueue+0x44>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3324      	adds	r3, #36	@ 0x24
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fdd6 	bl	8006018 <xTaskRemoveFromEventList>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <prvUnlockQueue+0x32>
 8005472:	f000 feaf 	bl	80061d4 <vTaskMissedYield>
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	3b01      	subs	r3, #1
 800547a:	b2db      	uxtb	r3, r3
 800547c:	73fb      	strb	r3, [r7, #15]
 800547e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005482:	2b00      	cmp	r3, #0
 8005484:	dce9      	bgt.n	800545a <prvUnlockQueue+0x16>
 8005486:	e000      	b.n	800548a <prvUnlockQueue+0x46>
 8005488:	bf00      	nop
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	22ff      	movs	r2, #255	@ 0xff
 800548e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005492:	f001 fce3 	bl	8006e5c <vPortExitCritical>
 8005496:	f001 fcb1 	bl	8006dfc <vPortEnterCritical>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054a0:	73bb      	strb	r3, [r7, #14]
 80054a2:	e011      	b.n	80054c8 <prvUnlockQueue+0x84>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d012      	beq.n	80054d2 <prvUnlockQueue+0x8e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3310      	adds	r3, #16
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fdb1 	bl	8006018 <xTaskRemoveFromEventList>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <prvUnlockQueue+0x7c>
 80054bc:	f000 fe8a 	bl	80061d4 <vTaskMissedYield>
 80054c0:	7bbb      	ldrb	r3, [r7, #14]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	73bb      	strb	r3, [r7, #14]
 80054c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	dce9      	bgt.n	80054a4 <prvUnlockQueue+0x60>
 80054d0:	e000      	b.n	80054d4 <prvUnlockQueue+0x90>
 80054d2:	bf00      	nop
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	22ff      	movs	r2, #255	@ 0xff
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054dc:	f001 fcbe 	bl	8006e5c <vPortExitCritical>
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <prvIsQueueEmpty>:
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	f001 fc84 	bl	8006dfc <vPortEnterCritical>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d102      	bne.n	8005502 <prvIsQueueEmpty+0x1a>
 80054fc:	2301      	movs	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	e001      	b.n	8005506 <prvIsQueueEmpty+0x1e>
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	f001 fca9 	bl	8006e5c <vPortExitCritical>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <prvIsQueueFull>:
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	f001 fc6e 	bl	8006dfc <vPortEnterCritical>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005528:	429a      	cmp	r2, r3
 800552a:	d102      	bne.n	8005532 <prvIsQueueFull+0x1e>
 800552c:	2301      	movs	r3, #1
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	e001      	b.n	8005536 <prvIsQueueFull+0x22>
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	f001 fc91 	bl	8006e5c <vPortExitCritical>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <vQueueAddToRegistry>:
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e014      	b.n	800557e <vQueueAddToRegistry+0x3a>
 8005554:	4a0e      	ldr	r2, [pc, #56]	@ (8005590 <vQueueAddToRegistry+0x4c>)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10b      	bne.n	8005578 <vQueueAddToRegistry+0x34>
 8005560:	490b      	ldr	r1, [pc, #44]	@ (8005590 <vQueueAddToRegistry+0x4c>)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800556a:	4a09      	ldr	r2, [pc, #36]	@ (8005590 <vQueueAddToRegistry+0x4c>)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	e006      	b.n	8005586 <vQueueAddToRegistry+0x42>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3301      	adds	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b07      	cmp	r3, #7
 8005582:	d9e7      	bls.n	8005554 <vQueueAddToRegistry+0x10>
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr
 8005590:	20000b34 	.word	0x20000b34

08005594 <vQueueWaitForMessageRestricted>:
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	f001 fc2a 	bl	8006dfc <vPortEnterCritical>
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055ae:	b25b      	sxtb	r3, r3
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d103      	bne.n	80055be <vQueueWaitForMessageRestricted+0x2a>
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055c4:	b25b      	sxtb	r3, r3
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d103      	bne.n	80055d4 <vQueueWaitForMessageRestricted+0x40>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055d4:	f001 fc42 	bl	8006e5c <vPortExitCritical>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <vQueueWaitForMessageRestricted+0x5a>
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	3324      	adds	r3, #36	@ 0x24
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fce9 	bl	8005fc0 <vTaskPlaceOnEventListRestricted>
 80055ee:	6978      	ldr	r0, [r7, #20]
 80055f0:	f7ff ff28 	bl	8005444 <prvUnlockQueue>
 80055f4:	bf00      	nop
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <xTaskCreateStatic>:
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08e      	sub	sp, #56	@ 0x38
 8005600:	af04      	add	r7, sp, #16
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <xTaskCreateStatic+0x2c>
 8005610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	623b      	str	r3, [r7, #32]
 8005622:	bf00      	nop
 8005624:	bf00      	nop
 8005626:	e7fd      	b.n	8005624 <xTaskCreateStatic+0x28>
 8005628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10b      	bne.n	8005646 <xTaskCreateStatic+0x4a>
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	e7fd      	b.n	8005642 <xTaskCreateStatic+0x46>
 8005646:	23a8      	movs	r3, #168	@ 0xa8
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2ba8      	cmp	r3, #168	@ 0xa8
 800564e:	d00b      	beq.n	8005668 <xTaskCreateStatic+0x6c>
 8005650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	e7fd      	b.n	8005664 <xTaskCreateStatic+0x68>
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01e      	beq.n	80056ae <xTaskCreateStatic+0xb2>
 8005670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005672:	2b00      	cmp	r3, #0
 8005674:	d01b      	beq.n	80056ae <xTaskCreateStatic+0xb2>
 8005676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800567e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	2202      	movs	r2, #2
 8005684:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 8005688:	2300      	movs	r3, #0
 800568a:	9303      	str	r3, [sp, #12]
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	9302      	str	r3, [sp, #8]
 8005690:	f107 0314 	add.w	r3, r7, #20
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f851 	bl	8005748 <prvInitialiseNewTask>
 80056a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056a8:	f000 f8f6 	bl	8005898 <prvAddNewTaskToReadyList>
 80056ac:	e001      	b.n	80056b2 <xTaskCreateStatic+0xb6>
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	4618      	mov	r0, r3
 80056b6:	3728      	adds	r7, #40	@ 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <xTaskCreate>:
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08c      	sub	sp, #48	@ 0x30
 80056c0:	af04      	add	r7, sp, #16
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	4613      	mov	r3, r2
 80056ca:	80fb      	strh	r3, [r7, #6]
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 fc95 	bl	8007000 <pvPortMalloc>
 80056d6:	6178      	str	r0, [r7, #20]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00e      	beq.n	80056fc <xTaskCreate+0x40>
 80056de:	20a8      	movs	r0, #168	@ 0xa8
 80056e0:	f001 fc8e 	bl	8007000 <pvPortMalloc>
 80056e4:	61f8      	str	r0, [r7, #28]
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <xTaskCreate+0x38>
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80056f2:	e005      	b.n	8005700 <xTaskCreate+0x44>
 80056f4:	6978      	ldr	r0, [r7, #20]
 80056f6:	f001 fd51 	bl	800719c <vPortFree>
 80056fa:	e001      	b.n	8005700 <xTaskCreate+0x44>
 80056fc:	2300      	movs	r3, #0
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d017      	beq.n	8005736 <xTaskCreate+0x7a>
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	2300      	movs	r3, #0
 8005712:	9303      	str	r3, [sp, #12]
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	9302      	str	r3, [sp, #8]
 8005718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f80f 	bl	8005748 <prvInitialiseNewTask>
 800572a:	69f8      	ldr	r0, [r7, #28]
 800572c:	f000 f8b4 	bl	8005898 <prvAddNewTaskToReadyList>
 8005730:	2301      	movs	r3, #1
 8005732:	61bb      	str	r3, [r7, #24]
 8005734:	e002      	b.n	800573c <xTaskCreate+0x80>
 8005736:	f04f 33ff 	mov.w	r3, #4294967295
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <prvInitialiseNewTask>:
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005758:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	461a      	mov	r2, r3
 8005760:	21a5      	movs	r1, #165	@ 0xa5
 8005762:	f001 fe5b 	bl	800741c <memset>
 8005766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005770:	3b01      	subs	r3, #1
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00b      	beq.n	80057a2 <prvInitialiseNewTask+0x5a>
 800578a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	e7fd      	b.n	800579e <prvInitialiseNewTask+0x56>
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01f      	beq.n	80057e8 <prvInitialiseNewTask+0xa0>
 80057a8:	2300      	movs	r3, #0
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	e012      	b.n	80057d4 <prvInitialiseNewTask+0x8c>
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	7819      	ldrb	r1, [r3, #0]
 80057b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	4413      	add	r3, r2
 80057bc:	3334      	adds	r3, #52	@ 0x34
 80057be:	460a      	mov	r2, r1
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <prvInitialiseNewTask+0x94>
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	3301      	adds	r3, #1
 80057d2:	61fb      	str	r3, [r7, #28]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	2b0f      	cmp	r3, #15
 80057d8:	d9e9      	bls.n	80057ae <prvInitialiseNewTask+0x66>
 80057da:	e000      	b.n	80057de <prvInitialiseNewTask+0x96>
 80057dc:	bf00      	nop
 80057de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057e6:	e003      	b.n	80057f0 <prvInitialiseNewTask+0xa8>
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	2b37      	cmp	r3, #55	@ 0x37
 80057f4:	d901      	bls.n	80057fa <prvInitialiseNewTask+0xb2>
 80057f6:	2337      	movs	r3, #55	@ 0x37
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005804:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	2200      	movs	r2, #0
 800580a:	651a      	str	r2, [r3, #80]	@ 0x50
 800580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580e:	3304      	adds	r3, #4
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff f96a 	bl	8004aea <vListInitialiseItem>
 8005816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005818:	3318      	adds	r3, #24
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff f965 	bl	8004aea <vListInitialiseItem>
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005824:	611a      	str	r2, [r3, #16]
 8005826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005828:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	619a      	str	r2, [r3, #24]
 8005830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005834:	625a      	str	r2, [r3, #36]	@ 0x24
 8005836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005838:	2200      	movs	r2, #0
 800583a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	2200      	movs	r2, #0
 8005842:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8005846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005848:	3354      	adds	r3, #84	@ 0x54
 800584a:	224c      	movs	r2, #76	@ 0x4c
 800584c:	2100      	movs	r1, #0
 800584e:	4618      	mov	r0, r3
 8005850:	f001 fde4 	bl	800741c <memset>
 8005854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005856:	4a0d      	ldr	r2, [pc, #52]	@ (800588c <prvInitialiseNewTask+0x144>)
 8005858:	659a      	str	r2, [r3, #88]	@ 0x58
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	4a0c      	ldr	r2, [pc, #48]	@ (8005890 <prvInitialiseNewTask+0x148>)
 800585e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005862:	4a0c      	ldr	r2, [pc, #48]	@ (8005894 <prvInitialiseNewTask+0x14c>)
 8005864:	661a      	str	r2, [r3, #96]	@ 0x60
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	68f9      	ldr	r1, [r7, #12]
 800586a:	69b8      	ldr	r0, [r7, #24]
 800586c:	f001 f9d4 	bl	8006c18 <pxPortInitialiseStack>
 8005870:	4602      	mov	r2, r0
 8005872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <prvInitialiseNewTask+0x13a>
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	bf00      	nop
 8005884:	3720      	adds	r7, #32
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20001dc8 	.word	0x20001dc8
 8005890:	20001e30 	.word	0x20001e30
 8005894:	20001e98 	.word	0x20001e98

08005898 <prvAddNewTaskToReadyList>:
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	f001 faac 	bl	8006dfc <vPortEnterCritical>
 80058a4:	4b2d      	ldr	r3, [pc, #180]	@ (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	4a2c      	ldr	r2, [pc, #176]	@ (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <prvAddNewTaskToReadyList+0x32>
 80058b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	4b27      	ldr	r3, [pc, #156]	@ (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d110      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
 80058c4:	f000 fcaa 	bl	800621c <prvInitialiseTaskLists>
 80058c8:	e00d      	b.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
 80058ca:	4b26      	ldr	r3, [pc, #152]	@ (8005964 <prvAddNewTaskToReadyList+0xcc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
 80058d2:	4b23      	ldr	r3, [pc, #140]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d802      	bhi.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
 80058e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	4b20      	ldr	r3, [pc, #128]	@ (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fc:	4b1b      	ldr	r3, [pc, #108]	@ (800596c <prvAddNewTaskToReadyList+0xd4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d903      	bls.n	800590c <prvAddNewTaskToReadyList+0x74>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005908:	4a18      	ldr	r2, [pc, #96]	@ (800596c <prvAddNewTaskToReadyList+0xd4>)
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4a15      	ldr	r2, [pc, #84]	@ (8005970 <prvAddNewTaskToReadyList+0xd8>)
 800591a:	441a      	add	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f7ff f8ed 	bl	8004b02 <vListInsertEnd>
 8005928:	f001 fa98 	bl	8006e5c <vPortExitCritical>
 800592c:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <prvAddNewTaskToReadyList+0xcc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <prvAddNewTaskToReadyList+0xba>
 8005934:	4b0a      	ldr	r3, [pc, #40]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	429a      	cmp	r2, r3
 8005940:	d207      	bcs.n	8005952 <prvAddNewTaskToReadyList+0xba>
 8005942:	4b0c      	ldr	r3, [pc, #48]	@ (8005974 <prvAddNewTaskToReadyList+0xdc>)
 8005944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20001048 	.word	0x20001048
 8005960:	20000b74 	.word	0x20000b74
 8005964:	20001054 	.word	0x20001054
 8005968:	20001064 	.word	0x20001064
 800596c:	20001050 	.word	0x20001050
 8005970:	20000b78 	.word	0x20000b78
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <vTaskDelayUntil>:
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	@ 0x28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
 8005982:	2300      	movs	r3, #0
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <vTaskDelayUntil+0x2c>
 800598c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <vTaskDelayUntil+0x28>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <vTaskDelayUntil+0x4a>
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <vTaskDelayUntil+0x46>
 80059c2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a6c <vTaskDelayUntil+0xf4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00b      	beq.n	80059e2 <vTaskDelayUntil+0x6a>
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <vTaskDelayUntil+0x66>
 80059e2:	f000 f8ef 	bl	8005bc4 <vTaskSuspendAll>
 80059e6:	4b22      	ldr	r3, [pc, #136]	@ (8005a70 <vTaskDelayUntil+0xf8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	623b      	str	r3, [r7, #32]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	4413      	add	r3, r2
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a3a      	ldr	r2, [r7, #32]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d20b      	bcs.n	8005a18 <vTaskDelayUntil+0xa0>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d211      	bcs.n	8005a2e <vTaskDelayUntil+0xb6>
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d90d      	bls.n	8005a2e <vTaskDelayUntil+0xb6>
 8005a12:	2301      	movs	r3, #1
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a16:	e00a      	b.n	8005a2e <vTaskDelayUntil+0xb6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d303      	bcc.n	8005a2a <vTaskDelayUntil+0xb2>
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d901      	bls.n	8005a2e <vTaskDelayUntil+0xb6>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d006      	beq.n	8005a48 <vTaskDelayUntil+0xd0>
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fd3c 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
 8005a48:	f000 f8ca 	bl	8005be0 <xTaskResumeAll>
 8005a4c:	61b8      	str	r0, [r7, #24]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d107      	bne.n	8005a64 <vTaskDelayUntil+0xec>
 8005a54:	4b07      	ldr	r3, [pc, #28]	@ (8005a74 <vTaskDelayUntil+0xfc>)
 8005a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	bf00      	nop
 8005a66:	3728      	adds	r7, #40	@ 0x28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20001070 	.word	0x20001070
 8005a70:	2000104c 	.word	0x2000104c
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <vTaskDelay>:
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <vTaskDelay+0x44>
 8005a8a:	4b14      	ldr	r3, [pc, #80]	@ (8005adc <vTaskDelay+0x64>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <vTaskDelay+0x32>
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <vTaskDelay+0x2e>
 8005aaa:	f000 f88b 	bl	8005bc4 <vTaskSuspendAll>
 8005aae:	2100      	movs	r1, #0
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fd05 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
 8005ab6:	f000 f893 	bl	8005be0 <xTaskResumeAll>
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d107      	bne.n	8005ad2 <vTaskDelay+0x5a>
 8005ac2:	4b07      	ldr	r3, [pc, #28]	@ (8005ae0 <vTaskDelay+0x68>)
 8005ac4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20001070 	.word	0x20001070
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <vTaskStartScheduler>:
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	@ 0x28
 8005ae8:	af04      	add	r7, sp, #16
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	2300      	movs	r3, #0
 8005af0:	607b      	str	r3, [r7, #4]
 8005af2:	463a      	mov	r2, r7
 8005af4:	1d39      	adds	r1, r7, #4
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe ffa4 	bl	8004a48 <vApplicationGetIdleTaskMemory>
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	9202      	str	r2, [sp, #8]
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	460a      	mov	r2, r1
 8005b12:	4924      	ldr	r1, [pc, #144]	@ (8005ba4 <vTaskStartScheduler+0xc0>)
 8005b14:	4824      	ldr	r0, [pc, #144]	@ (8005ba8 <vTaskStartScheduler+0xc4>)
 8005b16:	f7ff fd71 	bl	80055fc <xTaskCreateStatic>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	4a23      	ldr	r2, [pc, #140]	@ (8005bac <vTaskStartScheduler+0xc8>)
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	4b22      	ldr	r3, [pc, #136]	@ (8005bac <vTaskStartScheduler+0xc8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <vTaskStartScheduler+0x4a>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	e001      	b.n	8005b32 <vTaskStartScheduler+0x4e>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d102      	bne.n	8005b3e <vTaskStartScheduler+0x5a>
 8005b38:	f000 fd16 	bl	8006568 <xTimerCreateTimerTask>
 8005b3c:	6178      	str	r0, [r7, #20]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d11b      	bne.n	8005b7c <vTaskStartScheduler+0x98>
 8005b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	bf00      	nop
 8005b58:	4b15      	ldr	r3, [pc, #84]	@ (8005bb0 <vTaskStartScheduler+0xcc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3354      	adds	r3, #84	@ 0x54
 8005b5e:	4a15      	ldr	r2, [pc, #84]	@ (8005bb4 <vTaskStartScheduler+0xd0>)
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	4b15      	ldr	r3, [pc, #84]	@ (8005bb8 <vTaskStartScheduler+0xd4>)
 8005b64:	f04f 32ff 	mov.w	r2, #4294967295
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	4b14      	ldr	r3, [pc, #80]	@ (8005bbc <vTaskStartScheduler+0xd8>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	4b13      	ldr	r3, [pc, #76]	@ (8005bc0 <vTaskStartScheduler+0xdc>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	f001 f8cf 	bl	8006d18 <xPortStartScheduler>
 8005b7a:	e00f      	b.n	8005b9c <vTaskStartScheduler+0xb8>
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d10b      	bne.n	8005b9c <vTaskStartScheduler+0xb8>
 8005b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	bf00      	nop
 8005b98:	bf00      	nop
 8005b9a:	e7fd      	b.n	8005b98 <vTaskStartScheduler+0xb4>
 8005b9c:	bf00      	nop
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	08007e34 	.word	0x08007e34
 8005ba8:	080061ed 	.word	0x080061ed
 8005bac:	2000106c 	.word	0x2000106c
 8005bb0:	20000b74 	.word	0x20000b74
 8005bb4:	20000014 	.word	0x20000014
 8005bb8:	20001068 	.word	0x20001068
 8005bbc:	20001054 	.word	0x20001054
 8005bc0:	2000104c 	.word	0x2000104c

08005bc4 <vTaskSuspendAll>:
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <vTaskSuspendAll+0x18>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	4a03      	ldr	r2, [pc, #12]	@ (8005bdc <vTaskSuspendAll+0x18>)
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	bf00      	nop
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20001070 	.word	0x20001070

08005be0 <xTaskResumeAll>:
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	4b42      	ldr	r3, [pc, #264]	@ (8005cf8 <xTaskResumeAll+0x118>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10b      	bne.n	8005c0e <xTaskResumeAll+0x2e>
 8005bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	e7fd      	b.n	8005c0a <xTaskResumeAll+0x2a>
 8005c0e:	f001 f8f5 	bl	8006dfc <vPortEnterCritical>
 8005c12:	4b39      	ldr	r3, [pc, #228]	@ (8005cf8 <xTaskResumeAll+0x118>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	4a37      	ldr	r2, [pc, #220]	@ (8005cf8 <xTaskResumeAll+0x118>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	4b36      	ldr	r3, [pc, #216]	@ (8005cf8 <xTaskResumeAll+0x118>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d162      	bne.n	8005cea <xTaskResumeAll+0x10a>
 8005c24:	4b35      	ldr	r3, [pc, #212]	@ (8005cfc <xTaskResumeAll+0x11c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d05e      	beq.n	8005cea <xTaskResumeAll+0x10a>
 8005c2c:	e02f      	b.n	8005c8e <xTaskResumeAll+0xae>
 8005c2e:	4b34      	ldr	r3, [pc, #208]	@ (8005d00 <xTaskResumeAll+0x120>)
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3318      	adds	r3, #24
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fe ffbc 	bl	8004bb8 <uxListRemove>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe ffb7 	bl	8004bb8 <uxListRemove>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005d04 <xTaskResumeAll+0x124>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d903      	bls.n	8005c5e <xTaskResumeAll+0x7e>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d04 <xTaskResumeAll+0x124>)
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4a27      	ldr	r2, [pc, #156]	@ (8005d08 <xTaskResumeAll+0x128>)
 8005c6c:	441a      	add	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3304      	adds	r3, #4
 8005c72:	4619      	mov	r1, r3
 8005c74:	4610      	mov	r0, r2
 8005c76:	f7fe ff44 	bl	8004b02 <vListInsertEnd>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7e:	4b23      	ldr	r3, [pc, #140]	@ (8005d0c <xTaskResumeAll+0x12c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d302      	bcc.n	8005c8e <xTaskResumeAll+0xae>
 8005c88:	4b21      	ldr	r3, [pc, #132]	@ (8005d10 <xTaskResumeAll+0x130>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8005d00 <xTaskResumeAll+0x120>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1cb      	bne.n	8005c2e <xTaskResumeAll+0x4e>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <xTaskResumeAll+0xc0>
 8005c9c:	f000 fb62 	bl	8006364 <prvResetNextTaskUnblockTime>
 8005ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8005d14 <xTaskResumeAll+0x134>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	607b      	str	r3, [r7, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d010      	beq.n	8005cce <xTaskResumeAll+0xee>
 8005cac:	f000 f844 	bl	8005d38 <xTaskIncrementTick>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <xTaskResumeAll+0xdc>
 8005cb6:	4b16      	ldr	r3, [pc, #88]	@ (8005d10 <xTaskResumeAll+0x130>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	607b      	str	r3, [r7, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1f1      	bne.n	8005cac <xTaskResumeAll+0xcc>
 8005cc8:	4b12      	ldr	r3, [pc, #72]	@ (8005d14 <xTaskResumeAll+0x134>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	4b10      	ldr	r3, [pc, #64]	@ (8005d10 <xTaskResumeAll+0x130>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <xTaskResumeAll+0x10a>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	60bb      	str	r3, [r7, #8]
 8005cda:	4b0f      	ldr	r3, [pc, #60]	@ (8005d18 <xTaskResumeAll+0x138>)
 8005cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f001 f8b7 	bl	8006e5c <vPortExitCritical>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20001070 	.word	0x20001070
 8005cfc:	20001048 	.word	0x20001048
 8005d00:	20001008 	.word	0x20001008
 8005d04:	20001050 	.word	0x20001050
 8005d08:	20000b78 	.word	0x20000b78
 8005d0c:	20000b74 	.word	0x20000b74
 8005d10:	2000105c 	.word	0x2000105c
 8005d14:	20001058 	.word	0x20001058
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <xTaskGetTickCount>:
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4b04      	ldr	r3, [pc, #16]	@ (8005d34 <xTaskGetTickCount+0x18>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	607b      	str	r3, [r7, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr
 8005d34:	2000104c 	.word	0x2000104c

08005d38 <xTaskIncrementTick>:
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	4b4f      	ldr	r3, [pc, #316]	@ (8005e80 <xTaskIncrementTick+0x148>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f040 8090 	bne.w	8005e6c <xTaskIncrementTick+0x134>
 8005d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8005e84 <xTaskIncrementTick+0x14c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3301      	adds	r3, #1
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	4a4b      	ldr	r2, [pc, #300]	@ (8005e84 <xTaskIncrementTick+0x14c>)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d121      	bne.n	8005da4 <xTaskIncrementTick+0x6c>
 8005d60:	4b49      	ldr	r3, [pc, #292]	@ (8005e88 <xTaskIncrementTick+0x150>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00b      	beq.n	8005d82 <xTaskIncrementTick+0x4a>
 8005d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	e7fd      	b.n	8005d7e <xTaskIncrementTick+0x46>
 8005d82:	4b41      	ldr	r3, [pc, #260]	@ (8005e88 <xTaskIncrementTick+0x150>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	4b40      	ldr	r3, [pc, #256]	@ (8005e8c <xTaskIncrementTick+0x154>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e88 <xTaskIncrementTick+0x150>)
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	4a3e      	ldr	r2, [pc, #248]	@ (8005e8c <xTaskIncrementTick+0x154>)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	4b3e      	ldr	r3, [pc, #248]	@ (8005e90 <xTaskIncrementTick+0x158>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e90 <xTaskIncrementTick+0x158>)
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	f000 fae0 	bl	8006364 <prvResetNextTaskUnblockTime>
 8005da4:	4b3b      	ldr	r3, [pc, #236]	@ (8005e94 <xTaskIncrementTick+0x15c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d349      	bcc.n	8005e42 <xTaskIncrementTick+0x10a>
 8005dae:	4b36      	ldr	r3, [pc, #216]	@ (8005e88 <xTaskIncrementTick+0x150>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d104      	bne.n	8005dc2 <xTaskIncrementTick+0x8a>
 8005db8:	4b36      	ldr	r3, [pc, #216]	@ (8005e94 <xTaskIncrementTick+0x15c>)
 8005dba:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e03f      	b.n	8005e42 <xTaskIncrementTick+0x10a>
 8005dc2:	4b31      	ldr	r3, [pc, #196]	@ (8005e88 <xTaskIncrementTick+0x150>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	60bb      	str	r3, [r7, #8]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	607b      	str	r3, [r7, #4]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d203      	bcs.n	8005de2 <xTaskIncrementTick+0xaa>
 8005dda:	4a2e      	ldr	r2, [pc, #184]	@ (8005e94 <xTaskIncrementTick+0x15c>)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	e02f      	b.n	8005e42 <xTaskIncrementTick+0x10a>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fee6 	bl	8004bb8 <uxListRemove>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <xTaskIncrementTick+0xc6>
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	3318      	adds	r3, #24
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fedd 	bl	8004bb8 <uxListRemove>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e02:	4b25      	ldr	r3, [pc, #148]	@ (8005e98 <xTaskIncrementTick+0x160>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d903      	bls.n	8005e12 <xTaskIncrementTick+0xda>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	4a22      	ldr	r2, [pc, #136]	@ (8005e98 <xTaskIncrementTick+0x160>)
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005e9c <xTaskIncrementTick+0x164>)
 8005e20:	441a      	add	r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f7fe fe6a 	bl	8004b02 <vListInsertEnd>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e32:	4b1b      	ldr	r3, [pc, #108]	@ (8005ea0 <xTaskIncrementTick+0x168>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d3b8      	bcc.n	8005dae <xTaskIncrementTick+0x76>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	e7b5      	b.n	8005dae <xTaskIncrementTick+0x76>
 8005e42:	4b17      	ldr	r3, [pc, #92]	@ (8005ea0 <xTaskIncrementTick+0x168>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e48:	4914      	ldr	r1, [pc, #80]	@ (8005e9c <xTaskIncrementTick+0x164>)
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d901      	bls.n	8005e5e <xTaskIncrementTick+0x126>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	4b11      	ldr	r3, [pc, #68]	@ (8005ea4 <xTaskIncrementTick+0x16c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <xTaskIncrementTick+0x13e>
 8005e66:	2301      	movs	r3, #1
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	e004      	b.n	8005e76 <xTaskIncrementTick+0x13e>
 8005e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea8 <xTaskIncrementTick+0x170>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3301      	adds	r3, #1
 8005e72:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea8 <xTaskIncrementTick+0x170>)
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20001070 	.word	0x20001070
 8005e84:	2000104c 	.word	0x2000104c
 8005e88:	20001000 	.word	0x20001000
 8005e8c:	20001004 	.word	0x20001004
 8005e90:	20001060 	.word	0x20001060
 8005e94:	20001068 	.word	0x20001068
 8005e98:	20001050 	.word	0x20001050
 8005e9c:	20000b78 	.word	0x20000b78
 8005ea0:	20000b74 	.word	0x20000b74
 8005ea4:	2000105c 	.word	0x2000105c
 8005ea8:	20001058 	.word	0x20001058

08005eac <vTaskSwitchContext>:
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8005f5c <vTaskSwitchContext+0xb0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <vTaskSwitchContext+0x16>
 8005eba:	4b29      	ldr	r3, [pc, #164]	@ (8005f60 <vTaskSwitchContext+0xb4>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	e047      	b.n	8005f52 <vTaskSwitchContext+0xa6>
 8005ec2:	4b27      	ldr	r3, [pc, #156]	@ (8005f60 <vTaskSwitchContext+0xb4>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	4b26      	ldr	r3, [pc, #152]	@ (8005f64 <vTaskSwitchContext+0xb8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e011      	b.n	8005ef4 <vTaskSwitchContext+0x48>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <vTaskSwitchContext+0x42>
 8005ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	607b      	str	r3, [r7, #4]
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	e7fd      	b.n	8005eea <vTaskSwitchContext+0x3e>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	491c      	ldr	r1, [pc, #112]	@ (8005f68 <vTaskSwitchContext+0xbc>)
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0e3      	beq.n	8005ed0 <vTaskSwitchContext+0x24>
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4a15      	ldr	r2, [pc, #84]	@ (8005f68 <vTaskSwitchContext+0xbc>)
 8005f14:	4413      	add	r3, r2
 8005f16:	60bb      	str	r3, [r7, #8]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	3308      	adds	r3, #8
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d104      	bne.n	8005f38 <vTaskSwitchContext+0x8c>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	605a      	str	r2, [r3, #4]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8005f6c <vTaskSwitchContext+0xc0>)
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	4a08      	ldr	r2, [pc, #32]	@ (8005f64 <vTaskSwitchContext+0xb8>)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	4b08      	ldr	r3, [pc, #32]	@ (8005f6c <vTaskSwitchContext+0xc0>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3354      	adds	r3, #84	@ 0x54
 8005f4e:	4a08      	ldr	r2, [pc, #32]	@ (8005f70 <vTaskSwitchContext+0xc4>)
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr
 8005f5c:	20001070 	.word	0x20001070
 8005f60:	2000105c 	.word	0x2000105c
 8005f64:	20001050 	.word	0x20001050
 8005f68:	20000b78 	.word	0x20000b78
 8005f6c:	20000b74 	.word	0x20000b74
 8005f70:	20000014 	.word	0x20000014

08005f74 <vTaskPlaceOnEventList>:
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10b      	bne.n	8005f9c <vTaskPlaceOnEventList+0x28>
 8005f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	e7fd      	b.n	8005f98 <vTaskPlaceOnEventList+0x24>
 8005f9c:	4b07      	ldr	r3, [pc, #28]	@ (8005fbc <vTaskPlaceOnEventList+0x48>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fe fdcf 	bl	8004b48 <vListInsert>
 8005faa:	2101      	movs	r1, #1
 8005fac:	6838      	ldr	r0, [r7, #0]
 8005fae:	f000 fa87 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000b74 	.word	0x20000b74

08005fc0 <vTaskPlaceOnEventListRestricted>:
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <vTaskPlaceOnEventListRestricted+0x2a>
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	e7fd      	b.n	8005fe6 <vTaskPlaceOnEventListRestricted+0x26>
 8005fea:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <vTaskPlaceOnEventListRestricted+0x54>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3318      	adds	r3, #24
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7fe fd85 	bl	8004b02 <vListInsertEnd>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <vTaskPlaceOnEventListRestricted+0x44>
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8006002:	60bb      	str	r3, [r7, #8]
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	68b8      	ldr	r0, [r7, #8]
 8006008:	f000 fa5a 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
 800600c:	bf00      	nop
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000b74 	.word	0x20000b74

08006018 <xTaskRemoveFromEventList>:
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	613b      	str	r3, [r7, #16]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <xTaskRemoveFromEventList+0x2e>
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <xTaskRemoveFromEventList+0x2a>
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	3318      	adds	r3, #24
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fdb4 	bl	8004bb8 <uxListRemove>
 8006050:	4b1d      	ldr	r3, [pc, #116]	@ (80060c8 <xTaskRemoveFromEventList+0xb0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d11d      	bne.n	8006094 <xTaskRemoveFromEventList+0x7c>
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe fdab 	bl	8004bb8 <uxListRemove>
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006066:	4b19      	ldr	r3, [pc, #100]	@ (80060cc <xTaskRemoveFromEventList+0xb4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d903      	bls.n	8006076 <xTaskRemoveFromEventList+0x5e>
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006072:	4a16      	ldr	r2, [pc, #88]	@ (80060cc <xTaskRemoveFromEventList+0xb4>)
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607a:	4613      	mov	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4a13      	ldr	r2, [pc, #76]	@ (80060d0 <xTaskRemoveFromEventList+0xb8>)
 8006084:	441a      	add	r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	3304      	adds	r3, #4
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f7fe fd38 	bl	8004b02 <vListInsertEnd>
 8006092:	e005      	b.n	80060a0 <xTaskRemoveFromEventList+0x88>
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	3318      	adds	r3, #24
 8006098:	4619      	mov	r1, r3
 800609a:	480e      	ldr	r0, [pc, #56]	@ (80060d4 <xTaskRemoveFromEventList+0xbc>)
 800609c:	f7fe fd31 	bl	8004b02 <vListInsertEnd>
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a4:	4b0c      	ldr	r3, [pc, #48]	@ (80060d8 <xTaskRemoveFromEventList+0xc0>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d905      	bls.n	80060ba <xTaskRemoveFromEventList+0xa2>
 80060ae:	2301      	movs	r3, #1
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <xTaskRemoveFromEventList+0xc4>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e001      	b.n	80060be <xTaskRemoveFromEventList+0xa6>
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20001070 	.word	0x20001070
 80060cc:	20001050 	.word	0x20001050
 80060d0:	20000b78 	.word	0x20000b78
 80060d4:	20001008 	.word	0x20001008
 80060d8:	20000b74 	.word	0x20000b74
 80060dc:	2000105c 	.word	0x2000105c

080060e0 <vTaskInternalSetTimeOutState>:
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	4b06      	ldr	r3, [pc, #24]	@ (8006104 <vTaskInternalSetTimeOutState+0x24>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <vTaskInternalSetTimeOutState+0x28>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	605a      	str	r2, [r3, #4]
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bc80      	pop	{r7}
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20001060 	.word	0x20001060
 8006108:	2000104c 	.word	0x2000104c

0800610c <xTaskCheckForTimeOut>:
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <xTaskCheckForTimeOut+0x28>
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	e7fd      	b.n	8006130 <xTaskCheckForTimeOut+0x24>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <xTaskCheckForTimeOut+0x46>
 800613a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	e7fd      	b.n	800614e <xTaskCheckForTimeOut+0x42>
 8006152:	f000 fe53 	bl	8006dfc <vPortEnterCritical>
 8006156:	4b1d      	ldr	r3, [pc, #116]	@ (80061cc <xTaskCheckForTimeOut+0xc0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d102      	bne.n	8006176 <xTaskCheckForTimeOut+0x6a>
 8006170:	2300      	movs	r3, #0
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	e023      	b.n	80061be <xTaskCheckForTimeOut+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b15      	ldr	r3, [pc, #84]	@ (80061d0 <xTaskCheckForTimeOut+0xc4>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d007      	beq.n	8006192 <xTaskCheckForTimeOut+0x86>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	429a      	cmp	r2, r3
 800618a:	d302      	bcc.n	8006192 <xTaskCheckForTimeOut+0x86>
 800618c:	2301      	movs	r3, #1
 800618e:	61fb      	str	r3, [r7, #28]
 8006190:	e015      	b.n	80061be <xTaskCheckForTimeOut+0xb2>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	429a      	cmp	r2, r3
 800619a:	d20b      	bcs.n	80061b4 <xTaskCheckForTimeOut+0xa8>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	1ad2      	subs	r2, r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff ff99 	bl	80060e0 <vTaskInternalSetTimeOutState>
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e004      	b.n	80061be <xTaskCheckForTimeOut+0xb2>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2200      	movs	r2, #0
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	2301      	movs	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	f000 fe4d 	bl	8006e5c <vPortExitCritical>
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	4618      	mov	r0, r3
 80061c6:	3720      	adds	r7, #32
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	2000104c 	.word	0x2000104c
 80061d0:	20001060 	.word	0x20001060

080061d4 <vTaskMissedYield>:
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	4b03      	ldr	r3, [pc, #12]	@ (80061e8 <vTaskMissedYield+0x14>)
 80061da:	2201      	movs	r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	bf00      	nop
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	2000105c 	.word	0x2000105c

080061ec <prvIdleTask>:
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	f000 f852 	bl	800629c <prvCheckTasksWaitingTermination>
 80061f8:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <prvIdleTask+0x28>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d9f9      	bls.n	80061f4 <prvIdleTask+0x8>
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <prvIdleTask+0x2c>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	e7f0      	b.n	80061f4 <prvIdleTask+0x8>
 8006212:	bf00      	nop
 8006214:	20000b78 	.word	0x20000b78
 8006218:	e000ed04 	.word	0xe000ed04

0800621c <prvInitialiseTaskLists>:
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	2300      	movs	r3, #0
 8006224:	607b      	str	r3, [r7, #4]
 8006226:	e00c      	b.n	8006242 <prvInitialiseTaskLists+0x26>
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4a12      	ldr	r2, [pc, #72]	@ (800627c <prvInitialiseTaskLists+0x60>)
 8006234:	4413      	add	r3, r2
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fc38 	bl	8004aac <vListInitialise>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3301      	adds	r3, #1
 8006240:	607b      	str	r3, [r7, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b37      	cmp	r3, #55	@ 0x37
 8006246:	d9ef      	bls.n	8006228 <prvInitialiseTaskLists+0xc>
 8006248:	480d      	ldr	r0, [pc, #52]	@ (8006280 <prvInitialiseTaskLists+0x64>)
 800624a:	f7fe fc2f 	bl	8004aac <vListInitialise>
 800624e:	480d      	ldr	r0, [pc, #52]	@ (8006284 <prvInitialiseTaskLists+0x68>)
 8006250:	f7fe fc2c 	bl	8004aac <vListInitialise>
 8006254:	480c      	ldr	r0, [pc, #48]	@ (8006288 <prvInitialiseTaskLists+0x6c>)
 8006256:	f7fe fc29 	bl	8004aac <vListInitialise>
 800625a:	480c      	ldr	r0, [pc, #48]	@ (800628c <prvInitialiseTaskLists+0x70>)
 800625c:	f7fe fc26 	bl	8004aac <vListInitialise>
 8006260:	480b      	ldr	r0, [pc, #44]	@ (8006290 <prvInitialiseTaskLists+0x74>)
 8006262:	f7fe fc23 	bl	8004aac <vListInitialise>
 8006266:	4b0b      	ldr	r3, [pc, #44]	@ (8006294 <prvInitialiseTaskLists+0x78>)
 8006268:	4a05      	ldr	r2, [pc, #20]	@ (8006280 <prvInitialiseTaskLists+0x64>)
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	4b0a      	ldr	r3, [pc, #40]	@ (8006298 <prvInitialiseTaskLists+0x7c>)
 800626e:	4a05      	ldr	r2, [pc, #20]	@ (8006284 <prvInitialiseTaskLists+0x68>)
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000b78 	.word	0x20000b78
 8006280:	20000fd8 	.word	0x20000fd8
 8006284:	20000fec 	.word	0x20000fec
 8006288:	20001008 	.word	0x20001008
 800628c:	2000101c 	.word	0x2000101c
 8006290:	20001034 	.word	0x20001034
 8006294:	20001000 	.word	0x20001000
 8006298:	20001004 	.word	0x20001004

0800629c <prvCheckTasksWaitingTermination>:
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	e019      	b.n	80062d8 <prvCheckTasksWaitingTermination+0x3c>
 80062a4:	f000 fdaa 	bl	8006dfc <vPortEnterCritical>
 80062a8:	4b10      	ldr	r3, [pc, #64]	@ (80062ec <prvCheckTasksWaitingTermination+0x50>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	607b      	str	r3, [r7, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe fc7f 	bl	8004bb8 <uxListRemove>
 80062ba:	4b0d      	ldr	r3, [pc, #52]	@ (80062f0 <prvCheckTasksWaitingTermination+0x54>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3b01      	subs	r3, #1
 80062c0:	4a0b      	ldr	r2, [pc, #44]	@ (80062f0 <prvCheckTasksWaitingTermination+0x54>)
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	4b0b      	ldr	r3, [pc, #44]	@ (80062f4 <prvCheckTasksWaitingTermination+0x58>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	4a0a      	ldr	r2, [pc, #40]	@ (80062f4 <prvCheckTasksWaitingTermination+0x58>)
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	f000 fdc5 	bl	8006e5c <vPortExitCritical>
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f810 	bl	80062f8 <prvDeleteTCB>
 80062d8:	4b06      	ldr	r3, [pc, #24]	@ (80062f4 <prvCheckTasksWaitingTermination+0x58>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e1      	bne.n	80062a4 <prvCheckTasksWaitingTermination+0x8>
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	2000101c 	.word	0x2000101c
 80062f0:	20001048 	.word	0x20001048
 80062f4:	20001030 	.word	0x20001030

080062f8 <prvDeleteTCB>:
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3354      	adds	r3, #84	@ 0x54
 8006304:	4618      	mov	r0, r3
 8006306:	f001 f891 	bl	800742c <_reclaim_reent>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006310:	2b00      	cmp	r3, #0
 8006312:	d108      	bne.n	8006326 <prvDeleteTCB+0x2e>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006318:	4618      	mov	r0, r3
 800631a:	f000 ff3f 	bl	800719c <vPortFree>
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 ff3c 	bl	800719c <vPortFree>
 8006324:	e019      	b.n	800635a <prvDeleteTCB+0x62>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800632c:	2b01      	cmp	r3, #1
 800632e:	d103      	bne.n	8006338 <prvDeleteTCB+0x40>
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 ff33 	bl	800719c <vPortFree>
 8006336:	e010      	b.n	800635a <prvDeleteTCB+0x62>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800633e:	2b02      	cmp	r3, #2
 8006340:	d00b      	beq.n	800635a <prvDeleteTCB+0x62>
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <prvDeleteTCB+0x5e>
 800635a:	bf00      	nop
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <prvResetNextTaskUnblockTime>:
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	4b0c      	ldr	r3, [pc, #48]	@ (800639c <prvResetNextTaskUnblockTime+0x38>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d104      	bne.n	800637e <prvResetNextTaskUnblockTime+0x1a>
 8006374:	4b0a      	ldr	r3, [pc, #40]	@ (80063a0 <prvResetNextTaskUnblockTime+0x3c>)
 8006376:	f04f 32ff 	mov.w	r2, #4294967295
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	e008      	b.n	8006390 <prvResetNextTaskUnblockTime+0x2c>
 800637e:	4b07      	ldr	r3, [pc, #28]	@ (800639c <prvResetNextTaskUnblockTime+0x38>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	607b      	str	r3, [r7, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	4a04      	ldr	r2, [pc, #16]	@ (80063a0 <prvResetNextTaskUnblockTime+0x3c>)
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	20001000 	.word	0x20001000
 80063a0:	20001068 	.word	0x20001068

080063a4 <xTaskGetSchedulerState>:
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	4b0b      	ldr	r3, [pc, #44]	@ (80063d8 <xTaskGetSchedulerState+0x34>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <xTaskGetSchedulerState+0x14>
 80063b2:	2301      	movs	r3, #1
 80063b4:	607b      	str	r3, [r7, #4]
 80063b6:	e008      	b.n	80063ca <xTaskGetSchedulerState+0x26>
 80063b8:	4b08      	ldr	r3, [pc, #32]	@ (80063dc <xTaskGetSchedulerState+0x38>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <xTaskGetSchedulerState+0x22>
 80063c0:	2302      	movs	r3, #2
 80063c2:	607b      	str	r3, [r7, #4]
 80063c4:	e001      	b.n	80063ca <xTaskGetSchedulerState+0x26>
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	20001054 	.word	0x20001054
 80063dc:	20001070 	.word	0x20001070

080063e0 <xTaskPriorityDisinherit>:
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d058      	beq.n	80064a8 <xTaskPriorityDisinherit+0xc8>
 80063f6:	4b2f      	ldr	r3, [pc, #188]	@ (80064b4 <xTaskPriorityDisinherit+0xd4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d00b      	beq.n	8006418 <xTaskPriorityDisinherit+0x38>
 8006400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	bf00      	nop
 8006414:	bf00      	nop
 8006416:	e7fd      	b.n	8006414 <xTaskPriorityDisinherit+0x34>
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10b      	bne.n	8006438 <xTaskPriorityDisinherit+0x58>
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60bb      	str	r3, [r7, #8]
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <xTaskPriorityDisinherit+0x54>
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800643c:	1e5a      	subs	r2, r3, #1
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	651a      	str	r2, [r3, #80]	@ 0x50
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800644a:	429a      	cmp	r2, r3
 800644c:	d02c      	beq.n	80064a8 <xTaskPriorityDisinherit+0xc8>
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006452:	2b00      	cmp	r3, #0
 8006454:	d128      	bne.n	80064a8 <xTaskPriorityDisinherit+0xc8>
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3304      	adds	r3, #4
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe fbac 	bl	8004bb8 <uxListRemove>
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	619a      	str	r2, [r3, #24]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006478:	4b0f      	ldr	r3, [pc, #60]	@ (80064b8 <xTaskPriorityDisinherit+0xd8>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d903      	bls.n	8006488 <xTaskPriorityDisinherit+0xa8>
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	4a0c      	ldr	r2, [pc, #48]	@ (80064b8 <xTaskPriorityDisinherit+0xd8>)
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4a09      	ldr	r2, [pc, #36]	@ (80064bc <xTaskPriorityDisinherit+0xdc>)
 8006496:	441a      	add	r2, r3
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fe fb2f 	bl	8004b02 <vListInsertEnd>
 80064a4:	2301      	movs	r3, #1
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000b74 	.word	0x20000b74
 80064b8:	20001050 	.word	0x20001050
 80064bc:	20000b78 	.word	0x20000b78

080064c0 <prvAddCurrentTaskToDelayedList>:
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
 80064ca:	4b21      	ldr	r3, [pc, #132]	@ (8006550 <prvAddCurrentTaskToDelayedList+0x90>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	4b20      	ldr	r3, [pc, #128]	@ (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fb6e 	bl	8004bb8 <uxListRemove>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d10a      	bne.n	80064fa <prvAddCurrentTaskToDelayedList+0x3a>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <prvAddCurrentTaskToDelayedList+0x3a>
 80064ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4819      	ldr	r0, [pc, #100]	@ (8006558 <prvAddCurrentTaskToDelayedList+0x98>)
 80064f4:	f7fe fb05 	bl	8004b02 <vListInsertEnd>
 80064f8:	e026      	b.n	8006548 <prvAddCurrentTaskToDelayedList+0x88>
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4413      	add	r3, r2
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	4b14      	ldr	r3, [pc, #80]	@ (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	429a      	cmp	r2, r3
 8006510:	d209      	bcs.n	8006526 <prvAddCurrentTaskToDelayedList+0x66>
 8006512:	4b12      	ldr	r3, [pc, #72]	@ (800655c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b0f      	ldr	r3, [pc, #60]	@ (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3304      	adds	r3, #4
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f7fe fb12 	bl	8004b48 <vListInsert>
 8006524:	e010      	b.n	8006548 <prvAddCurrentTaskToDelayedList+0x88>
 8006526:	4b0e      	ldr	r3, [pc, #56]	@ (8006560 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b0a      	ldr	r3, [pc, #40]	@ (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f7fe fb08 	bl	8004b48 <vListInsert>
 8006538:	4b0a      	ldr	r3, [pc, #40]	@ (8006564 <prvAddCurrentTaskToDelayedList+0xa4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d202      	bcs.n	8006548 <prvAddCurrentTaskToDelayedList+0x88>
 8006542:	4a08      	ldr	r2, [pc, #32]	@ (8006564 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	2000104c 	.word	0x2000104c
 8006554:	20000b74 	.word	0x20000b74
 8006558:	20001034 	.word	0x20001034
 800655c:	20001004 	.word	0x20001004
 8006560:	20001000 	.word	0x20001000
 8006564:	20001068 	.word	0x20001068

08006568 <xTimerCreateTimerTask>:
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	@ 0x28
 800656c:	af04      	add	r7, sp, #16
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	f000 fb11 	bl	8006b98 <prvCheckForValidListAndQueue>
 8006576:	4b1d      	ldr	r3, [pc, #116]	@ (80065ec <xTimerCreateTimerTask+0x84>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d021      	beq.n	80065c2 <xTimerCreateTimerTask+0x5a>
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	2300      	movs	r3, #0
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	1d3a      	adds	r2, r7, #4
 8006588:	f107 0108 	add.w	r1, r7, #8
 800658c:	f107 030c 	add.w	r3, r7, #12
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe fa71 	bl	8004a78 <vApplicationGetTimerTaskMemory>
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	9202      	str	r2, [sp, #8]
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	2302      	movs	r3, #2
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	460a      	mov	r2, r1
 80065a8:	4911      	ldr	r1, [pc, #68]	@ (80065f0 <xTimerCreateTimerTask+0x88>)
 80065aa:	4812      	ldr	r0, [pc, #72]	@ (80065f4 <xTimerCreateTimerTask+0x8c>)
 80065ac:	f7ff f826 	bl	80055fc <xTaskCreateStatic>
 80065b0:	4603      	mov	r3, r0
 80065b2:	4a11      	ldr	r2, [pc, #68]	@ (80065f8 <xTimerCreateTimerTask+0x90>)
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	4b10      	ldr	r3, [pc, #64]	@ (80065f8 <xTimerCreateTimerTask+0x90>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <xTimerCreateTimerTask+0x5a>
 80065be:	2301      	movs	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <xTimerCreateTimerTask+0x78>
 80065c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	e7fd      	b.n	80065dc <xTimerCreateTimerTask+0x74>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	200010a4 	.word	0x200010a4
 80065f0:	08007e3c 	.word	0x08007e3c
 80065f4:	08006735 	.word	0x08006735
 80065f8:	200010a8 	.word	0x200010a8

080065fc <xTimerGenericCommand>:
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08a      	sub	sp, #40	@ 0x28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	627b      	str	r3, [r7, #36]	@ 0x24
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10b      	bne.n	800662c <xTimerGenericCommand+0x30>
 8006614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	bf00      	nop
 8006628:	bf00      	nop
 800662a:	e7fd      	b.n	8006628 <xTimerGenericCommand+0x2c>
 800662c:	4b19      	ldr	r3, [pc, #100]	@ (8006694 <xTimerGenericCommand+0x98>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d02a      	beq.n	800668a <xTimerGenericCommand+0x8e>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b05      	cmp	r3, #5
 8006644:	dc18      	bgt.n	8006678 <xTimerGenericCommand+0x7c>
 8006646:	f7ff fead 	bl	80063a4 <xTaskGetSchedulerState>
 800664a:	4603      	mov	r3, r0
 800664c:	2b02      	cmp	r3, #2
 800664e:	d109      	bne.n	8006664 <xTimerGenericCommand+0x68>
 8006650:	4b10      	ldr	r3, [pc, #64]	@ (8006694 <xTimerGenericCommand+0x98>)
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	f107 0110 	add.w	r1, r7, #16
 8006658:	2300      	movs	r3, #0
 800665a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800665c:	f7fe fbe0 	bl	8004e20 <xQueueGenericSend>
 8006660:	6278      	str	r0, [r7, #36]	@ 0x24
 8006662:	e012      	b.n	800668a <xTimerGenericCommand+0x8e>
 8006664:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <xTimerGenericCommand+0x98>)
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	f107 0110 	add.w	r1, r7, #16
 800666c:	2300      	movs	r3, #0
 800666e:	2200      	movs	r2, #0
 8006670:	f7fe fbd6 	bl	8004e20 <xQueueGenericSend>
 8006674:	6278      	str	r0, [r7, #36]	@ 0x24
 8006676:	e008      	b.n	800668a <xTimerGenericCommand+0x8e>
 8006678:	4b06      	ldr	r3, [pc, #24]	@ (8006694 <xTimerGenericCommand+0x98>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	f107 0110 	add.w	r1, r7, #16
 8006680:	2300      	movs	r3, #0
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	f7fe fcce 	bl	8005024 <xQueueGenericSendFromISR>
 8006688:	6278      	str	r0, [r7, #36]	@ 0x24
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	4618      	mov	r0, r3
 800668e:	3728      	adds	r7, #40	@ 0x28
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	200010a4 	.word	0x200010a4

08006698 <prvProcessExpiredTimer>:
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af02      	add	r7, sp, #8
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
 80066a2:	4b23      	ldr	r3, [pc, #140]	@ (8006730 <prvProcessExpiredTimer+0x98>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	3304      	adds	r3, #4
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe fa81 	bl	8004bb8 <uxListRemove>
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d023      	beq.n	800670c <prvProcessExpiredTimer+0x74>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	699a      	ldr	r2, [r3, #24]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	18d1      	adds	r1, r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	6978      	ldr	r0, [r7, #20]
 80066d2:	f000 f8d3 	bl	800687c <prvInsertTimerInActiveList>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d020      	beq.n	800671e <prvProcessExpiredTimer+0x86>
 80066dc:	2300      	movs	r3, #0
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	2300      	movs	r3, #0
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	2100      	movs	r1, #0
 80066e6:	6978      	ldr	r0, [r7, #20]
 80066e8:	f7ff ff88 	bl	80065fc <xTimerGenericCommand>
 80066ec:	6138      	str	r0, [r7, #16]
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d114      	bne.n	800671e <prvProcessExpiredTimer+0x86>
 80066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	bf00      	nop
 8006708:	bf00      	nop
 800670a:	e7fd      	b.n	8006708 <prvProcessExpiredTimer+0x70>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	b2da      	uxtb	r2, r3
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	6978      	ldr	r0, [r7, #20]
 8006724:	4798      	blx	r3
 8006726:	bf00      	nop
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	2000109c 	.word	0x2000109c

08006734 <prvTimerTask>:
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	f107 0308 	add.w	r3, r7, #8
 8006740:	4618      	mov	r0, r3
 8006742:	f000 f859 	bl	80067f8 <prvGetNextExpireTime>
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4619      	mov	r1, r3
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f805 	bl	800675c <prvProcessTimerOrBlockTask>
 8006752:	f000 f8d5 	bl	8006900 <prvProcessReceivedCommands>
 8006756:	bf00      	nop
 8006758:	e7f0      	b.n	800673c <prvTimerTask+0x8>
	...

0800675c <prvProcessTimerOrBlockTask>:
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
 8006766:	f7ff fa2d 	bl	8005bc4 <vTaskSuspendAll>
 800676a:	f107 0308 	add.w	r3, r7, #8
 800676e:	4618      	mov	r0, r3
 8006770:	f000 f864 	bl	800683c <prvSampleTimeNow>
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d130      	bne.n	80067de <prvProcessTimerOrBlockTask+0x82>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <prvProcessTimerOrBlockTask+0x3c>
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	429a      	cmp	r2, r3
 8006788:	d806      	bhi.n	8006798 <prvProcessTimerOrBlockTask+0x3c>
 800678a:	f7ff fa29 	bl	8005be0 <xTaskResumeAll>
 800678e:	68f9      	ldr	r1, [r7, #12]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff ff81 	bl	8006698 <prvProcessExpiredTimer>
 8006796:	e024      	b.n	80067e2 <prvProcessTimerOrBlockTask+0x86>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d008      	beq.n	80067b0 <prvProcessTimerOrBlockTask+0x54>
 800679e:	4b13      	ldr	r3, [pc, #76]	@ (80067ec <prvProcessTimerOrBlockTask+0x90>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <prvProcessTimerOrBlockTask+0x50>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <prvProcessTimerOrBlockTask+0x52>
 80067ac:	2300      	movs	r3, #0
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	4b0f      	ldr	r3, [pc, #60]	@ (80067f0 <prvProcessTimerOrBlockTask+0x94>)
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	4619      	mov	r1, r3
 80067be:	f7fe fee9 	bl	8005594 <vQueueWaitForMessageRestricted>
 80067c2:	f7ff fa0d 	bl	8005be0 <xTaskResumeAll>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <prvProcessTimerOrBlockTask+0x86>
 80067cc:	4b09      	ldr	r3, [pc, #36]	@ (80067f4 <prvProcessTimerOrBlockTask+0x98>)
 80067ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	e001      	b.n	80067e2 <prvProcessTimerOrBlockTask+0x86>
 80067de:	f7ff f9ff 	bl	8005be0 <xTaskResumeAll>
 80067e2:	bf00      	nop
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	200010a0 	.word	0x200010a0
 80067f0:	200010a4 	.word	0x200010a4
 80067f4:	e000ed04 	.word	0xe000ed04

080067f8 <prvGetNextExpireTime>:
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <prvGetNextExpireTime+0x40>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <prvGetNextExpireTime+0x16>
 800680a:	2201      	movs	r2, #1
 800680c:	e000      	b.n	8006810 <prvGetNextExpireTime+0x18>
 800680e:	2200      	movs	r2, #0
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <prvGetNextExpireTime+0x30>
 800681c:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <prvGetNextExpireTime+0x40>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	e001      	b.n	800682c <prvGetNextExpireTime+0x34>
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr
 8006838:	2000109c 	.word	0x2000109c

0800683c <prvSampleTimeNow>:
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	f7ff fa6a 	bl	8005d1c <xTaskGetTickCount>
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	4b0b      	ldr	r3, [pc, #44]	@ (8006878 <prvSampleTimeNow+0x3c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	429a      	cmp	r2, r3
 8006852:	d205      	bcs.n	8006860 <prvSampleTimeNow+0x24>
 8006854:	f000 f93a 	bl	8006acc <prvSwitchTimerLists>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e002      	b.n	8006866 <prvSampleTimeNow+0x2a>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	4a04      	ldr	r2, [pc, #16]	@ (8006878 <prvSampleTimeNow+0x3c>)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	200010ac 	.word	0x200010ac

0800687c <prvInsertTimerInActiveList>:
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	605a      	str	r2, [r3, #4]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	611a      	str	r2, [r3, #16]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d812      	bhi.n	80068c8 <prvInsertTimerInActiveList+0x4c>
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	1ad2      	subs	r2, r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d302      	bcc.n	80068b6 <prvInsertTimerInActiveList+0x3a>
 80068b0:	2301      	movs	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	e01b      	b.n	80068ee <prvInsertTimerInActiveList+0x72>
 80068b6:	4b10      	ldr	r3, [pc, #64]	@ (80068f8 <prvInsertTimerInActiveList+0x7c>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3304      	adds	r3, #4
 80068be:	4619      	mov	r1, r3
 80068c0:	4610      	mov	r0, r2
 80068c2:	f7fe f941 	bl	8004b48 <vListInsert>
 80068c6:	e012      	b.n	80068ee <prvInsertTimerInActiveList+0x72>
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d206      	bcs.n	80068de <prvInsertTimerInActiveList+0x62>
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d302      	bcc.n	80068de <prvInsertTimerInActiveList+0x62>
 80068d8:	2301      	movs	r3, #1
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	e007      	b.n	80068ee <prvInsertTimerInActiveList+0x72>
 80068de:	4b07      	ldr	r3, [pc, #28]	@ (80068fc <prvInsertTimerInActiveList+0x80>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7fe f92d 	bl	8004b48 <vListInsert>
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	200010a0 	.word	0x200010a0
 80068fc:	2000109c 	.word	0x2000109c

08006900 <prvProcessReceivedCommands>:
 8006900:	b580      	push	{r7, lr}
 8006902:	b08e      	sub	sp, #56	@ 0x38
 8006904:	af02      	add	r7, sp, #8
 8006906:	e0ce      	b.n	8006aa6 <prvProcessReceivedCommands+0x1a6>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	da19      	bge.n	8006942 <prvProcessReceivedCommands+0x42>
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	3304      	adds	r3, #4
 8006912:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10b      	bne.n	8006932 <prvProcessReceivedCommands+0x32>
 800691a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	e7fd      	b.n	800692e <prvProcessReceivedCommands+0x2e>
 8006932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006938:	6850      	ldr	r0, [r2, #4]
 800693a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800693c:	6892      	ldr	r2, [r2, #8]
 800693e:	4611      	mov	r1, r2
 8006940:	4798      	blx	r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f2c0 80ae 	blt.w	8006aa6 <prvProcessReceivedCommands+0x1a6>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d004      	beq.n	8006960 <prvProcessReceivedCommands+0x60>
 8006956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006958:	3304      	adds	r3, #4
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe f92c 	bl	8004bb8 <uxListRemove>
 8006960:	463b      	mov	r3, r7
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff ff6a 	bl	800683c <prvSampleTimeNow>
 8006968:	6278      	str	r0, [r7, #36]	@ 0x24
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b09      	cmp	r3, #9
 800696e:	f200 8097 	bhi.w	8006aa0 <prvProcessReceivedCommands+0x1a0>
 8006972:	a201      	add	r2, pc, #4	@ (adr r2, 8006978 <prvProcessReceivedCommands+0x78>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	080069a1 	.word	0x080069a1
 800697c:	080069a1 	.word	0x080069a1
 8006980:	080069a1 	.word	0x080069a1
 8006984:	08006a17 	.word	0x08006a17
 8006988:	08006a2b 	.word	0x08006a2b
 800698c:	08006a77 	.word	0x08006a77
 8006990:	080069a1 	.word	0x080069a1
 8006994:	080069a1 	.word	0x080069a1
 8006998:	08006a17 	.word	0x08006a17
 800699c:	08006a2b 	.word	0x08006a2b
 80069a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	18d1      	adds	r1, r2, r3
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069c0:	f7ff ff5c 	bl	800687c <prvInsertTimerInActiveList>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d06c      	beq.n	8006aa4 <prvProcessReceivedCommands+0x1a4>
 80069ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069d0:	4798      	blx	r3
 80069d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d061      	beq.n	8006aa4 <prvProcessReceivedCommands+0x1a4>
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	441a      	add	r2, r3
 80069e8:	2300      	movs	r3, #0
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	2300      	movs	r3, #0
 80069ee:	2100      	movs	r1, #0
 80069f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069f2:	f7ff fe03 	bl	80065fc <xTimerGenericCommand>
 80069f6:	6238      	str	r0, [r7, #32]
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d152      	bne.n	8006aa4 <prvProcessReceivedCommands+0x1a4>
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	61bb      	str	r3, [r7, #24]
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
 8006a14:	e7fd      	b.n	8006a12 <prvProcessReceivedCommands+0x112>
 8006a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8006a28:	e03d      	b.n	8006aa6 <prvProcessReceivedCommands+0x1a6>
 8006a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a40:	619a      	str	r2, [r3, #24]
 8006a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <prvProcessReceivedCommands+0x162>
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <prvProcessReceivedCommands+0x15e>
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	18d1      	adds	r1, r2, r3
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a70:	f7ff ff04 	bl	800687c <prvInsertTimerInActiveList>
 8006a74:	e017      	b.n	8006aa6 <prvProcessReceivedCommands+0x1a6>
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d103      	bne.n	8006a8c <prvProcessReceivedCommands+0x18c>
 8006a84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a86:	f000 fb89 	bl	800719c <vPortFree>
 8006a8a:	e00c      	b.n	8006aa6 <prvProcessReceivedCommands+0x1a6>
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a92:	f023 0301 	bic.w	r3, r3, #1
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8006a9e:	e002      	b.n	8006aa6 <prvProcessReceivedCommands+0x1a6>
 8006aa0:	bf00      	nop
 8006aa2:	e000      	b.n	8006aa6 <prvProcessReceivedCommands+0x1a6>
 8006aa4:	bf00      	nop
 8006aa6:	4b08      	ldr	r3, [pc, #32]	@ (8006ac8 <prvProcessReceivedCommands+0x1c8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	1d39      	adds	r1, r7, #4
 8006aac:	2200      	movs	r2, #0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe fb56 	bl	8005160 <xQueueReceive>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f47f af26 	bne.w	8006908 <prvProcessReceivedCommands+0x8>
 8006abc:	bf00      	nop
 8006abe:	bf00      	nop
 8006ac0:	3730      	adds	r7, #48	@ 0x30
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200010a4 	.word	0x200010a4

08006acc <prvSwitchTimerLists>:
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	e049      	b.n	8006b68 <prvSwitchTimerLists+0x9c>
 8006ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8006b90 <prvSwitchTimerLists+0xc4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	4b2c      	ldr	r3, [pc, #176]	@ (8006b90 <prvSwitchTimerLists+0xc4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fe f863 	bl	8004bb8 <uxListRemove>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	4798      	blx	r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d02f      	beq.n	8006b68 <prvSwitchTimerLists+0x9c>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4413      	add	r3, r2
 8006b10:	60bb      	str	r3, [r7, #8]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d90e      	bls.n	8006b38 <prvSwitchTimerLists+0x6c>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	605a      	str	r2, [r3, #4]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	611a      	str	r2, [r3, #16]
 8006b26:	4b1a      	ldr	r3, [pc, #104]	@ (8006b90 <prvSwitchTimerLists+0xc4>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f7fe f809 	bl	8004b48 <vListInsert>
 8006b36:	e017      	b.n	8006b68 <prvSwitchTimerLists+0x9c>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	2100      	movs	r1, #0
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7ff fd5a 	bl	80065fc <xTimerGenericCommand>
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10b      	bne.n	8006b68 <prvSwitchTimerLists+0x9c>
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	603b      	str	r3, [r7, #0]
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	e7fd      	b.n	8006b64 <prvSwitchTimerLists+0x98>
 8006b68:	4b09      	ldr	r3, [pc, #36]	@ (8006b90 <prvSwitchTimerLists+0xc4>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1b0      	bne.n	8006ad4 <prvSwitchTimerLists+0x8>
 8006b72:	4b07      	ldr	r3, [pc, #28]	@ (8006b90 <prvSwitchTimerLists+0xc4>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	4b06      	ldr	r3, [pc, #24]	@ (8006b94 <prvSwitchTimerLists+0xc8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a04      	ldr	r2, [pc, #16]	@ (8006b90 <prvSwitchTimerLists+0xc4>)
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	4a04      	ldr	r2, [pc, #16]	@ (8006b94 <prvSwitchTimerLists+0xc8>)
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	bf00      	nop
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	2000109c 	.word	0x2000109c
 8006b94:	200010a0 	.word	0x200010a0

08006b98 <prvCheckForValidListAndQueue>:
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af02      	add	r7, sp, #8
 8006b9e:	f000 f92d 	bl	8006dfc <vPortEnterCritical>
 8006ba2:	4b15      	ldr	r3, [pc, #84]	@ (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d120      	bne.n	8006bec <prvCheckForValidListAndQueue+0x54>
 8006baa:	4814      	ldr	r0, [pc, #80]	@ (8006bfc <prvCheckForValidListAndQueue+0x64>)
 8006bac:	f7fd ff7e 	bl	8004aac <vListInitialise>
 8006bb0:	4813      	ldr	r0, [pc, #76]	@ (8006c00 <prvCheckForValidListAndQueue+0x68>)
 8006bb2:	f7fd ff7b 	bl	8004aac <vListInitialise>
 8006bb6:	4b13      	ldr	r3, [pc, #76]	@ (8006c04 <prvCheckForValidListAndQueue+0x6c>)
 8006bb8:	4a10      	ldr	r2, [pc, #64]	@ (8006bfc <prvCheckForValidListAndQueue+0x64>)
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	4b12      	ldr	r3, [pc, #72]	@ (8006c08 <prvCheckForValidListAndQueue+0x70>)
 8006bbe:	4a10      	ldr	r2, [pc, #64]	@ (8006c00 <prvCheckForValidListAndQueue+0x68>)
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	4b11      	ldr	r3, [pc, #68]	@ (8006c0c <prvCheckForValidListAndQueue+0x74>)
 8006bc8:	4a11      	ldr	r2, [pc, #68]	@ (8006c10 <prvCheckForValidListAndQueue+0x78>)
 8006bca:	2110      	movs	r1, #16
 8006bcc:	200a      	movs	r0, #10
 8006bce:	f7fe f887 	bl	8004ce0 <xQueueGenericCreateStatic>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4a08      	ldr	r2, [pc, #32]	@ (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	4b07      	ldr	r3, [pc, #28]	@ (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <prvCheckForValidListAndQueue+0x54>
 8006be0:	4b05      	ldr	r3, [pc, #20]	@ (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	490b      	ldr	r1, [pc, #44]	@ (8006c14 <prvCheckForValidListAndQueue+0x7c>)
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fcac 	bl	8005544 <vQueueAddToRegistry>
 8006bec:	f000 f936 	bl	8006e5c <vPortExitCritical>
 8006bf0:	bf00      	nop
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	200010a4 	.word	0x200010a4
 8006bfc:	20001074 	.word	0x20001074
 8006c00:	20001088 	.word	0x20001088
 8006c04:	2000109c 	.word	0x2000109c
 8006c08:	200010a0 	.word	0x200010a0
 8006c0c:	20001150 	.word	0x20001150
 8006c10:	200010b0 	.word	0x200010b0
 8006c14:	08007e44 	.word	0x08007e44

08006c18 <pxPortInitialiseStack>:
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3b04      	subs	r3, #4
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3b04      	subs	r3, #4
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f023 0201 	bic.w	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3b04      	subs	r3, #4
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	4a08      	ldr	r2, [pc, #32]	@ (8006c6c <pxPortInitialiseStack+0x54>)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3b14      	subs	r3, #20
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3b20      	subs	r3, #32
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr
 8006c6c:	08006c71 	.word	0x08006c71

08006c70 <prvTaskExitError>:
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	2300      	movs	r3, #0
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	4b12      	ldr	r3, [pc, #72]	@ (8006cc4 <prvTaskExitError+0x54>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d00b      	beq.n	8006c9c <prvTaskExitError+0x2c>
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	e7fd      	b.n	8006c98 <prvTaskExitError+0x28>
 8006c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	bf00      	nop
 8006cb0:	bf00      	nop
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0fc      	beq.n	8006cb2 <prvTaskExitError+0x42>
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr
 8006cc4:	20000010 	.word	0x20000010
	...

08006cd0 <SVC_Handler>:
 8006cd0:	4b07      	ldr	r3, [pc, #28]	@ (8006cf0 <pxCurrentTCBConst2>)
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	6808      	ldr	r0, [r1, #0]
 8006cd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006cda:	f380 8809 	msr	PSP, r0
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f04f 0000 	mov.w	r0, #0
 8006ce6:	f380 8811 	msr	BASEPRI, r0
 8006cea:	f04e 0e0d 	orr.w	lr, lr, #13
 8006cee:	4770      	bx	lr

08006cf0 <pxCurrentTCBConst2>:
 8006cf0:	20000b74 	.word	0x20000b74
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop

08006cf8 <prvPortStartFirstTask>:
 8006cf8:	4806      	ldr	r0, [pc, #24]	@ (8006d14 <prvPortStartFirstTask+0x1c>)
 8006cfa:	6800      	ldr	r0, [r0, #0]
 8006cfc:	6800      	ldr	r0, [r0, #0]
 8006cfe:	f380 8808 	msr	MSP, r0
 8006d02:	b662      	cpsie	i
 8006d04:	b661      	cpsie	f
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	df00      	svc	0
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	e000ed08 	.word	0xe000ed08

08006d18 <xPortStartScheduler>:
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4b32      	ldr	r3, [pc, #200]	@ (8006de8 <xPortStartScheduler+0xd0>)
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	607b      	str	r3, [r7, #4]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	22ff      	movs	r2, #255	@ 0xff
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	70fb      	strb	r3, [r7, #3]
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	4b2a      	ldr	r3, [pc, #168]	@ (8006dec <xPortStartScheduler+0xd4>)
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	4b2a      	ldr	r3, [pc, #168]	@ (8006df0 <xPortStartScheduler+0xd8>)
 8006d48:	2207      	movs	r2, #7
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	e009      	b.n	8006d62 <xPortStartScheduler+0x4a>
 8006d4e:	4b28      	ldr	r3, [pc, #160]	@ (8006df0 <xPortStartScheduler+0xd8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	4a26      	ldr	r2, [pc, #152]	@ (8006df0 <xPortStartScheduler+0xd8>)
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	70fb      	strb	r3, [r7, #3]
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6a:	2b80      	cmp	r3, #128	@ 0x80
 8006d6c:	d0ef      	beq.n	8006d4e <xPortStartScheduler+0x36>
 8006d6e:	4b20      	ldr	r3, [pc, #128]	@ (8006df0 <xPortStartScheduler+0xd8>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f1c3 0307 	rsb	r3, r3, #7
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d00b      	beq.n	8006d92 <xPortStartScheduler+0x7a>
 8006d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	60bb      	str	r3, [r7, #8]
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
 8006d90:	e7fd      	b.n	8006d8e <xPortStartScheduler+0x76>
 8006d92:	4b17      	ldr	r3, [pc, #92]	@ (8006df0 <xPortStartScheduler+0xd8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	4a15      	ldr	r2, [pc, #84]	@ (8006df0 <xPortStartScheduler+0xd8>)
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	4b14      	ldr	r3, [pc, #80]	@ (8006df0 <xPortStartScheduler+0xd8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006da4:	4a12      	ldr	r2, [pc, #72]	@ (8006df0 <xPortStartScheduler+0xd8>)
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	4b10      	ldr	r3, [pc, #64]	@ (8006df4 <xPortStartScheduler+0xdc>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a0f      	ldr	r2, [pc, #60]	@ (8006df4 <xPortStartScheduler+0xdc>)
 8006db6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <xPortStartScheduler+0xdc>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8006df4 <xPortStartScheduler+0xdc>)
 8006dc2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	f000 f8b8 	bl	8006f3c <vPortSetupTimerInterrupt>
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8006df8 <xPortStartScheduler+0xe0>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	f7ff ff91 	bl	8006cf8 <prvPortStartFirstTask>
 8006dd6:	f7ff f869 	bl	8005eac <vTaskSwitchContext>
 8006dda:	f7ff ff49 	bl	8006c70 <prvTaskExitError>
 8006dde:	2300      	movs	r3, #0
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	e000e400 	.word	0xe000e400
 8006dec:	200011a0 	.word	0x200011a0
 8006df0:	200011a4 	.word	0x200011a4
 8006df4:	e000ed20 	.word	0xe000ed20
 8006df8:	20000010 	.word	0x20000010

08006dfc <vPortEnterCritical>:
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	607b      	str	r3, [r7, #4]
 8006e14:	bf00      	nop
 8006e16:	4b0f      	ldr	r3, [pc, #60]	@ (8006e54 <vPortEnterCritical+0x58>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e54 <vPortEnterCritical+0x58>)
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	4b0c      	ldr	r3, [pc, #48]	@ (8006e54 <vPortEnterCritical+0x58>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d110      	bne.n	8006e4a <vPortEnterCritical+0x4e>
 8006e28:	4b0b      	ldr	r3, [pc, #44]	@ (8006e58 <vPortEnterCritical+0x5c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00b      	beq.n	8006e4a <vPortEnterCritical+0x4e>
 8006e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	e7fd      	b.n	8006e46 <vPortEnterCritical+0x4a>
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr
 8006e54:	20000010 	.word	0x20000010
 8006e58:	e000ed04 	.word	0xe000ed04

08006e5c <vPortExitCritical>:
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4b12      	ldr	r3, [pc, #72]	@ (8006eac <vPortExitCritical+0x50>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10b      	bne.n	8006e82 <vPortExitCritical+0x26>
 8006e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	607b      	str	r3, [r7, #4]
 8006e7c:	bf00      	nop
 8006e7e:	bf00      	nop
 8006e80:	e7fd      	b.n	8006e7e <vPortExitCritical+0x22>
 8006e82:	4b0a      	ldr	r3, [pc, #40]	@ (8006eac <vPortExitCritical+0x50>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	4a08      	ldr	r2, [pc, #32]	@ (8006eac <vPortExitCritical+0x50>)
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	4b07      	ldr	r3, [pc, #28]	@ (8006eac <vPortExitCritical+0x50>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d105      	bne.n	8006ea0 <vPortExitCritical+0x44>
 8006e94:	2300      	movs	r3, #0
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	20000010 	.word	0x20000010

08006eb0 <PendSV_Handler>:
 8006eb0:	f3ef 8009 	mrs	r0, PSP
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef0 <pxCurrentTCBConst>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ec0:	6010      	str	r0, [r2, #0]
 8006ec2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006ec6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006eca:	f380 8811 	msr	BASEPRI, r0
 8006ece:	f7fe ffed 	bl	8005eac <vTaskSwitchContext>
 8006ed2:	f04f 0000 	mov.w	r0, #0
 8006ed6:	f380 8811 	msr	BASEPRI, r0
 8006eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006ede:	6819      	ldr	r1, [r3, #0]
 8006ee0:	6808      	ldr	r0, [r1, #0]
 8006ee2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ee6:	f380 8809 	msr	PSP, r0
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	4770      	bx	lr

08006ef0 <pxCurrentTCBConst>:
 8006ef0:	20000b74 	.word	0x20000b74
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop

08006ef8 <xPortSysTickHandler>:
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	607b      	str	r3, [r7, #4]
 8006f10:	bf00      	nop
 8006f12:	f7fe ff11 	bl	8005d38 <xTaskIncrementTick>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <xPortSysTickHandler+0x2c>
 8006f1c:	4b06      	ldr	r3, [pc, #24]	@ (8006f38 <xPortSysTickHandler+0x40>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	2300      	movs	r3, #0
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	bf00      	nop
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	e000ed04 	.word	0xe000ed04

08006f3c <vPortSetupTimerInterrupt>:
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	4b0a      	ldr	r3, [pc, #40]	@ (8006f6c <vPortSetupTimerInterrupt+0x30>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	4b0a      	ldr	r3, [pc, #40]	@ (8006f70 <vPortSetupTimerInterrupt+0x34>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	4b09      	ldr	r3, [pc, #36]	@ (8006f74 <vPortSetupTimerInterrupt+0x38>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a09      	ldr	r2, [pc, #36]	@ (8006f78 <vPortSetupTimerInterrupt+0x3c>)
 8006f52:	fba2 2303 	umull	r2, r3, r2, r3
 8006f56:	099b      	lsrs	r3, r3, #6
 8006f58:	4a08      	ldr	r2, [pc, #32]	@ (8006f7c <vPortSetupTimerInterrupt+0x40>)
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	4b03      	ldr	r3, [pc, #12]	@ (8006f6c <vPortSetupTimerInterrupt+0x30>)
 8006f60:	2207      	movs	r2, #7
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	bf00      	nop
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bc80      	pop	{r7}
 8006f6a:	4770      	bx	lr
 8006f6c:	e000e010 	.word	0xe000e010
 8006f70:	e000e018 	.word	0xe000e018
 8006f74:	20000004 	.word	0x20000004
 8006f78:	10624dd3 	.word	0x10624dd3
 8006f7c:	e000e014 	.word	0xe000e014

08006f80 <vPortValidateInterruptPriority>:
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	f3ef 8305 	mrs	r3, IPSR
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	d915      	bls.n	8006fbe <vPortValidateInterruptPriority+0x3e>
 8006f92:	4a17      	ldr	r2, [pc, #92]	@ (8006ff0 <vPortValidateInterruptPriority+0x70>)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	72fb      	strb	r3, [r7, #11]
 8006f9c:	4b15      	ldr	r3, [pc, #84]	@ (8006ff4 <vPortValidateInterruptPriority+0x74>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	7afa      	ldrb	r2, [r7, #11]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d20b      	bcs.n	8006fbe <vPortValidateInterruptPriority+0x3e>
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	607b      	str	r3, [r7, #4]
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <vPortValidateInterruptPriority+0x3a>
 8006fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff8 <vPortValidateInterruptPriority+0x78>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ffc <vPortValidateInterruptPriority+0x7c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d90b      	bls.n	8006fe6 <vPortValidateInterruptPriority+0x66>
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	e7fd      	b.n	8006fe2 <vPortValidateInterruptPriority+0x62>
 8006fe6:	bf00      	nop
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr
 8006ff0:	e000e3f0 	.word	0xe000e3f0
 8006ff4:	200011a0 	.word	0x200011a0
 8006ff8:	e000ed0c 	.word	0xe000ed0c
 8006ffc:	200011a4 	.word	0x200011a4

08007000 <pvPortMalloc>:
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	@ 0x28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	2300      	movs	r3, #0
 800700a:	61fb      	str	r3, [r7, #28]
 800700c:	f7fe fdda 	bl	8005bc4 <vTaskSuspendAll>
 8007010:	4b5c      	ldr	r3, [pc, #368]	@ (8007184 <pvPortMalloc+0x184>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <pvPortMalloc+0x1c>
 8007018:	f000 f924 	bl	8007264 <prvHeapInit>
 800701c:	4b5a      	ldr	r3, [pc, #360]	@ (8007188 <pvPortMalloc+0x188>)
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4013      	ands	r3, r2
 8007024:	2b00      	cmp	r3, #0
 8007026:	f040 8095 	bne.w	8007154 <pvPortMalloc+0x154>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01e      	beq.n	800706e <pvPortMalloc+0x6e>
 8007030:	2208      	movs	r2, #8
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4413      	add	r3, r2
 8007036:	607b      	str	r3, [r7, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	2b00      	cmp	r3, #0
 8007040:	d015      	beq.n	800706e <pvPortMalloc+0x6e>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f023 0307 	bic.w	r3, r3, #7
 8007048:	3308      	adds	r3, #8
 800704a:	607b      	str	r3, [r7, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <pvPortMalloc+0x6e>
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	e7fd      	b.n	800706a <pvPortMalloc+0x6a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d06f      	beq.n	8007154 <pvPortMalloc+0x154>
 8007074:	4b45      	ldr	r3, [pc, #276]	@ (800718c <pvPortMalloc+0x18c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	429a      	cmp	r2, r3
 800707c:	d86a      	bhi.n	8007154 <pvPortMalloc+0x154>
 800707e:	4b44      	ldr	r3, [pc, #272]	@ (8007190 <pvPortMalloc+0x190>)
 8007080:	623b      	str	r3, [r7, #32]
 8007082:	4b43      	ldr	r3, [pc, #268]	@ (8007190 <pvPortMalloc+0x190>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	627b      	str	r3, [r7, #36]	@ 0x24
 8007088:	e004      	b.n	8007094 <pvPortMalloc+0x94>
 800708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708c:	623b      	str	r3, [r7, #32]
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	627b      	str	r3, [r7, #36]	@ 0x24
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	429a      	cmp	r2, r3
 800709c:	d903      	bls.n	80070a6 <pvPortMalloc+0xa6>
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f1      	bne.n	800708a <pvPortMalloc+0x8a>
 80070a6:	4b37      	ldr	r3, [pc, #220]	@ (8007184 <pvPortMalloc+0x184>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d051      	beq.n	8007154 <pvPortMalloc+0x154>
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2208      	movs	r2, #8
 80070b6:	4413      	add	r3, r2
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	1ad2      	subs	r2, r2, r3
 80070ca:	2308      	movs	r3, #8
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d920      	bls.n	8007114 <pvPortMalloc+0x114>
 80070d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4413      	add	r3, r2
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00b      	beq.n	80070fc <pvPortMalloc+0xfc>
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	bf00      	nop
 80070f8:	bf00      	nop
 80070fa:	e7fd      	b.n	80070f8 <pvPortMalloc+0xf8>
 80070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	1ad2      	subs	r2, r2, r3
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	605a      	str	r2, [r3, #4]
 8007108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	605a      	str	r2, [r3, #4]
 800710e:	69b8      	ldr	r0, [r7, #24]
 8007110:	f000 f90a 	bl	8007328 <prvInsertBlockIntoFreeList>
 8007114:	4b1d      	ldr	r3, [pc, #116]	@ (800718c <pvPortMalloc+0x18c>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	4a1b      	ldr	r2, [pc, #108]	@ (800718c <pvPortMalloc+0x18c>)
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	4b1a      	ldr	r3, [pc, #104]	@ (800718c <pvPortMalloc+0x18c>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4b1b      	ldr	r3, [pc, #108]	@ (8007194 <pvPortMalloc+0x194>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d203      	bcs.n	8007136 <pvPortMalloc+0x136>
 800712e:	4b17      	ldr	r3, [pc, #92]	@ (800718c <pvPortMalloc+0x18c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a18      	ldr	r2, [pc, #96]	@ (8007194 <pvPortMalloc+0x194>)
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	4b13      	ldr	r3, [pc, #76]	@ (8007188 <pvPortMalloc+0x188>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	431a      	orrs	r2, r3
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	605a      	str	r2, [r3, #4]
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	4b13      	ldr	r3, [pc, #76]	@ (8007198 <pvPortMalloc+0x198>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3301      	adds	r3, #1
 8007150:	4a11      	ldr	r2, [pc, #68]	@ (8007198 <pvPortMalloc+0x198>)
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	f7fe fd44 	bl	8005be0 <xTaskResumeAll>
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00b      	beq.n	800717a <pvPortMalloc+0x17a>
 8007162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	bf00      	nop
 8007176:	bf00      	nop
 8007178:	e7fd      	b.n	8007176 <pvPortMalloc+0x176>
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4618      	mov	r0, r3
 800717e:	3728      	adds	r7, #40	@ 0x28
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20001db0 	.word	0x20001db0
 8007188:	20001dc4 	.word	0x20001dc4
 800718c:	20001db4 	.word	0x20001db4
 8007190:	20001da8 	.word	0x20001da8
 8007194:	20001db8 	.word	0x20001db8
 8007198:	20001dbc 	.word	0x20001dbc

0800719c <vPortFree>:
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d04f      	beq.n	800724e <vPortFree+0xb2>
 80071ae:	2308      	movs	r3, #8
 80071b0:	425b      	negs	r3, r3
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4413      	add	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	613b      	str	r3, [r7, #16]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	4b25      	ldr	r3, [pc, #148]	@ (8007258 <vPortFree+0xbc>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4013      	ands	r3, r2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <vPortFree+0x46>
 80071ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	e7fd      	b.n	80071de <vPortFree+0x42>
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00b      	beq.n	8007202 <vPortFree+0x66>
 80071ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	60bb      	str	r3, [r7, #8]
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	e7fd      	b.n	80071fe <vPortFree+0x62>
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	4b14      	ldr	r3, [pc, #80]	@ (8007258 <vPortFree+0xbc>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01e      	beq.n	800724e <vPortFree+0xb2>
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d11a      	bne.n	800724e <vPortFree+0xb2>
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	4b0e      	ldr	r3, [pc, #56]	@ (8007258 <vPortFree+0xbc>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	43db      	mvns	r3, r3
 8007222:	401a      	ands	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	605a      	str	r2, [r3, #4]
 8007228:	f7fe fccc 	bl	8005bc4 <vTaskSuspendAll>
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	4b0a      	ldr	r3, [pc, #40]	@ (800725c <vPortFree+0xc0>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4413      	add	r3, r2
 8007236:	4a09      	ldr	r2, [pc, #36]	@ (800725c <vPortFree+0xc0>)
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	6938      	ldr	r0, [r7, #16]
 800723c:	f000 f874 	bl	8007328 <prvInsertBlockIntoFreeList>
 8007240:	4b07      	ldr	r3, [pc, #28]	@ (8007260 <vPortFree+0xc4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	4a06      	ldr	r2, [pc, #24]	@ (8007260 <vPortFree+0xc4>)
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	f7fe fcc9 	bl	8005be0 <xTaskResumeAll>
 800724e:	bf00      	nop
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20001dc4 	.word	0x20001dc4
 800725c:	20001db4 	.word	0x20001db4
 8007260:	20001dc0 	.word	0x20001dc0

08007264 <prvHeapInit>:
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800726e:	60bb      	str	r3, [r7, #8]
 8007270:	4b27      	ldr	r3, [pc, #156]	@ (8007310 <prvHeapInit+0xac>)
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00c      	beq.n	8007298 <prvHeapInit+0x34>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3307      	adds	r3, #7
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0307 	bic.w	r3, r3, #7
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	4a1f      	ldr	r2, [pc, #124]	@ (8007310 <prvHeapInit+0xac>)
 8007294:	4413      	add	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	607b      	str	r3, [r7, #4]
 800729c:	4a1d      	ldr	r2, [pc, #116]	@ (8007314 <prvHeapInit+0xb0>)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	4b1c      	ldr	r3, [pc, #112]	@ (8007314 <prvHeapInit+0xb0>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	605a      	str	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4413      	add	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	2208      	movs	r2, #8
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	1a9b      	subs	r3, r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4a15      	ldr	r2, [pc, #84]	@ (8007318 <prvHeapInit+0xb4>)
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4b14      	ldr	r3, [pc, #80]	@ (8007318 <prvHeapInit+0xb4>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	605a      	str	r2, [r3, #4]
 80072ce:	4b12      	ldr	r3, [pc, #72]	@ (8007318 <prvHeapInit+0xb4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	605a      	str	r2, [r3, #4]
 80072e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007318 <prvHeapInit+0xb4>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	4a0a      	ldr	r2, [pc, #40]	@ (800731c <prvHeapInit+0xb8>)
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	4a09      	ldr	r2, [pc, #36]	@ (8007320 <prvHeapInit+0xbc>)
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	4b09      	ldr	r3, [pc, #36]	@ (8007324 <prvHeapInit+0xc0>)
 80072fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	bf00      	nop
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	200011a8 	.word	0x200011a8
 8007314:	20001da8 	.word	0x20001da8
 8007318:	20001db0 	.word	0x20001db0
 800731c:	20001db8 	.word	0x20001db8
 8007320:	20001db4 	.word	0x20001db4
 8007324:	20001dc4 	.word	0x20001dc4

08007328 <prvInsertBlockIntoFreeList>:
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	4b27      	ldr	r3, [pc, #156]	@ (80073d0 <prvInsertBlockIntoFreeList+0xa8>)
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	e002      	b.n	800733c <prvInsertBlockIntoFreeList+0x14>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d8f7      	bhi.n	8007336 <prvInsertBlockIntoFreeList+0xe>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	4413      	add	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	429a      	cmp	r2, r3
 8007356:	d108      	bne.n	800736a <prvInsertBlockIntoFreeList+0x42>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	441a      	add	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	605a      	str	r2, [r3, #4]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	607b      	str	r3, [r7, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	441a      	add	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d118      	bne.n	80073b0 <prvInsertBlockIntoFreeList+0x88>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b14      	ldr	r3, [pc, #80]	@ (80073d4 <prvInsertBlockIntoFreeList+0xac>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d00d      	beq.n	80073a6 <prvInsertBlockIntoFreeList+0x7e>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	441a      	add	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	605a      	str	r2, [r3, #4]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	e008      	b.n	80073b8 <prvInsertBlockIntoFreeList+0x90>
 80073a6:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <prvInsertBlockIntoFreeList+0xac>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e003      	b.n	80073b8 <prvInsertBlockIntoFreeList+0x90>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d002      	beq.n	80073c6 <prvInsertBlockIntoFreeList+0x9e>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bc80      	pop	{r7}
 80073ce:	4770      	bx	lr
 80073d0:	20001da8 	.word	0x20001da8
 80073d4:	20001db0 	.word	0x20001db0

080073d8 <siprintf>:
 80073d8:	b40e      	push	{r1, r2, r3}
 80073da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80073de:	b510      	push	{r4, lr}
 80073e0:	2400      	movs	r4, #0
 80073e2:	b09d      	sub	sp, #116	@ 0x74
 80073e4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80073e6:	9002      	str	r0, [sp, #8]
 80073e8:	9006      	str	r0, [sp, #24]
 80073ea:	9107      	str	r1, [sp, #28]
 80073ec:	9104      	str	r1, [sp, #16]
 80073ee:	4809      	ldr	r0, [pc, #36]	@ (8007414 <siprintf+0x3c>)
 80073f0:	4909      	ldr	r1, [pc, #36]	@ (8007418 <siprintf+0x40>)
 80073f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f6:	9105      	str	r1, [sp, #20]
 80073f8:	6800      	ldr	r0, [r0, #0]
 80073fa:	a902      	add	r1, sp, #8
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007400:	f000 f9fe 	bl	8007800 <_svfiprintf_r>
 8007404:	9b02      	ldr	r3, [sp, #8]
 8007406:	701c      	strb	r4, [r3, #0]
 8007408:	b01d      	add	sp, #116	@ 0x74
 800740a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800740e:	b003      	add	sp, #12
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20000014 	.word	0x20000014
 8007418:	ffff0208 	.word	0xffff0208

0800741c <memset>:
 800741c:	4603      	mov	r3, r0
 800741e:	4402      	add	r2, r0
 8007420:	4293      	cmp	r3, r2
 8007422:	d100      	bne.n	8007426 <memset+0xa>
 8007424:	4770      	bx	lr
 8007426:	f803 1b01 	strb.w	r1, [r3], #1
 800742a:	e7f9      	b.n	8007420 <memset+0x4>

0800742c <_reclaim_reent>:
 800742c:	4b2d      	ldr	r3, [pc, #180]	@ (80074e4 <_reclaim_reent+0xb8>)
 800742e:	b570      	push	{r4, r5, r6, lr}
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4604      	mov	r4, r0
 8007434:	4283      	cmp	r3, r0
 8007436:	d053      	beq.n	80074e0 <_reclaim_reent+0xb4>
 8007438:	69c3      	ldr	r3, [r0, #28]
 800743a:	b31b      	cbz	r3, 8007484 <_reclaim_reent+0x58>
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	b163      	cbz	r3, 800745a <_reclaim_reent+0x2e>
 8007440:	2500      	movs	r5, #0
 8007442:	69e3      	ldr	r3, [r4, #28]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	5959      	ldr	r1, [r3, r5]
 8007448:	b9b1      	cbnz	r1, 8007478 <_reclaim_reent+0x4c>
 800744a:	3504      	adds	r5, #4
 800744c:	2d80      	cmp	r5, #128	@ 0x80
 800744e:	d1f8      	bne.n	8007442 <_reclaim_reent+0x16>
 8007450:	69e3      	ldr	r3, [r4, #28]
 8007452:	4620      	mov	r0, r4
 8007454:	68d9      	ldr	r1, [r3, #12]
 8007456:	f000 f881 	bl	800755c <_free_r>
 800745a:	69e3      	ldr	r3, [r4, #28]
 800745c:	6819      	ldr	r1, [r3, #0]
 800745e:	b111      	cbz	r1, 8007466 <_reclaim_reent+0x3a>
 8007460:	4620      	mov	r0, r4
 8007462:	f000 f87b 	bl	800755c <_free_r>
 8007466:	69e3      	ldr	r3, [r4, #28]
 8007468:	689d      	ldr	r5, [r3, #8]
 800746a:	b15d      	cbz	r5, 8007484 <_reclaim_reent+0x58>
 800746c:	4629      	mov	r1, r5
 800746e:	4620      	mov	r0, r4
 8007470:	682d      	ldr	r5, [r5, #0]
 8007472:	f000 f873 	bl	800755c <_free_r>
 8007476:	e7f8      	b.n	800746a <_reclaim_reent+0x3e>
 8007478:	680e      	ldr	r6, [r1, #0]
 800747a:	4620      	mov	r0, r4
 800747c:	f000 f86e 	bl	800755c <_free_r>
 8007480:	4631      	mov	r1, r6
 8007482:	e7e1      	b.n	8007448 <_reclaim_reent+0x1c>
 8007484:	6961      	ldr	r1, [r4, #20]
 8007486:	b111      	cbz	r1, 800748e <_reclaim_reent+0x62>
 8007488:	4620      	mov	r0, r4
 800748a:	f000 f867 	bl	800755c <_free_r>
 800748e:	69e1      	ldr	r1, [r4, #28]
 8007490:	b111      	cbz	r1, 8007498 <_reclaim_reent+0x6c>
 8007492:	4620      	mov	r0, r4
 8007494:	f000 f862 	bl	800755c <_free_r>
 8007498:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800749a:	b111      	cbz	r1, 80074a2 <_reclaim_reent+0x76>
 800749c:	4620      	mov	r0, r4
 800749e:	f000 f85d 	bl	800755c <_free_r>
 80074a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074a4:	b111      	cbz	r1, 80074ac <_reclaim_reent+0x80>
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 f858 	bl	800755c <_free_r>
 80074ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80074ae:	b111      	cbz	r1, 80074b6 <_reclaim_reent+0x8a>
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 f853 	bl	800755c <_free_r>
 80074b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80074b8:	b111      	cbz	r1, 80074c0 <_reclaim_reent+0x94>
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 f84e 	bl	800755c <_free_r>
 80074c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80074c2:	b111      	cbz	r1, 80074ca <_reclaim_reent+0x9e>
 80074c4:	4620      	mov	r0, r4
 80074c6:	f000 f849 	bl	800755c <_free_r>
 80074ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80074cc:	b111      	cbz	r1, 80074d4 <_reclaim_reent+0xa8>
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 f844 	bl	800755c <_free_r>
 80074d4:	6a23      	ldr	r3, [r4, #32]
 80074d6:	b11b      	cbz	r3, 80074e0 <_reclaim_reent+0xb4>
 80074d8:	4620      	mov	r0, r4
 80074da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80074de:	4718      	bx	r3
 80074e0:	bd70      	pop	{r4, r5, r6, pc}
 80074e2:	bf00      	nop
 80074e4:	20000014 	.word	0x20000014

080074e8 <__errno>:
 80074e8:	4b01      	ldr	r3, [pc, #4]	@ (80074f0 <__errno+0x8>)
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	20000014 	.word	0x20000014

080074f4 <__libc_init_array>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	2600      	movs	r6, #0
 80074f8:	4d0c      	ldr	r5, [pc, #48]	@ (800752c <__libc_init_array+0x38>)
 80074fa:	4c0d      	ldr	r4, [pc, #52]	@ (8007530 <__libc_init_array+0x3c>)
 80074fc:	1b64      	subs	r4, r4, r5
 80074fe:	10a4      	asrs	r4, r4, #2
 8007500:	42a6      	cmp	r6, r4
 8007502:	d109      	bne.n	8007518 <__libc_init_array+0x24>
 8007504:	f000 fc76 	bl	8007df4 <_init>
 8007508:	2600      	movs	r6, #0
 800750a:	4d0a      	ldr	r5, [pc, #40]	@ (8007534 <__libc_init_array+0x40>)
 800750c:	4c0a      	ldr	r4, [pc, #40]	@ (8007538 <__libc_init_array+0x44>)
 800750e:	1b64      	subs	r4, r4, r5
 8007510:	10a4      	asrs	r4, r4, #2
 8007512:	42a6      	cmp	r6, r4
 8007514:	d105      	bne.n	8007522 <__libc_init_array+0x2e>
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	f855 3b04 	ldr.w	r3, [r5], #4
 800751c:	4798      	blx	r3
 800751e:	3601      	adds	r6, #1
 8007520:	e7ee      	b.n	8007500 <__libc_init_array+0xc>
 8007522:	f855 3b04 	ldr.w	r3, [r5], #4
 8007526:	4798      	blx	r3
 8007528:	3601      	adds	r6, #1
 800752a:	e7f2      	b.n	8007512 <__libc_init_array+0x1e>
 800752c:	08007f28 	.word	0x08007f28
 8007530:	08007f28 	.word	0x08007f28
 8007534:	08007f28 	.word	0x08007f28
 8007538:	08007f2c 	.word	0x08007f2c

0800753c <__retarget_lock_acquire_recursive>:
 800753c:	4770      	bx	lr

0800753e <__retarget_lock_release_recursive>:
 800753e:	4770      	bx	lr

08007540 <memcpy>:
 8007540:	440a      	add	r2, r1
 8007542:	4291      	cmp	r1, r2
 8007544:	f100 33ff 	add.w	r3, r0, #4294967295
 8007548:	d100      	bne.n	800754c <memcpy+0xc>
 800754a:	4770      	bx	lr
 800754c:	b510      	push	{r4, lr}
 800754e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007552:	4291      	cmp	r1, r2
 8007554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007558:	d1f9      	bne.n	800754e <memcpy+0xe>
 800755a:	bd10      	pop	{r4, pc}

0800755c <_free_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4605      	mov	r5, r0
 8007560:	2900      	cmp	r1, #0
 8007562:	d040      	beq.n	80075e6 <_free_r+0x8a>
 8007564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007568:	1f0c      	subs	r4, r1, #4
 800756a:	2b00      	cmp	r3, #0
 800756c:	bfb8      	it	lt
 800756e:	18e4      	addlt	r4, r4, r3
 8007570:	f000 f8de 	bl	8007730 <__malloc_lock>
 8007574:	4a1c      	ldr	r2, [pc, #112]	@ (80075e8 <_free_r+0x8c>)
 8007576:	6813      	ldr	r3, [r2, #0]
 8007578:	b933      	cbnz	r3, 8007588 <_free_r+0x2c>
 800757a:	6063      	str	r3, [r4, #4]
 800757c:	6014      	str	r4, [r2, #0]
 800757e:	4628      	mov	r0, r5
 8007580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007584:	f000 b8da 	b.w	800773c <__malloc_unlock>
 8007588:	42a3      	cmp	r3, r4
 800758a:	d908      	bls.n	800759e <_free_r+0x42>
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	1821      	adds	r1, r4, r0
 8007590:	428b      	cmp	r3, r1
 8007592:	bf01      	itttt	eq
 8007594:	6819      	ldreq	r1, [r3, #0]
 8007596:	685b      	ldreq	r3, [r3, #4]
 8007598:	1809      	addeq	r1, r1, r0
 800759a:	6021      	streq	r1, [r4, #0]
 800759c:	e7ed      	b.n	800757a <_free_r+0x1e>
 800759e:	461a      	mov	r2, r3
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	b10b      	cbz	r3, 80075a8 <_free_r+0x4c>
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	d9fa      	bls.n	800759e <_free_r+0x42>
 80075a8:	6811      	ldr	r1, [r2, #0]
 80075aa:	1850      	adds	r0, r2, r1
 80075ac:	42a0      	cmp	r0, r4
 80075ae:	d10b      	bne.n	80075c8 <_free_r+0x6c>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	4401      	add	r1, r0
 80075b4:	1850      	adds	r0, r2, r1
 80075b6:	4283      	cmp	r3, r0
 80075b8:	6011      	str	r1, [r2, #0]
 80075ba:	d1e0      	bne.n	800757e <_free_r+0x22>
 80075bc:	6818      	ldr	r0, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4408      	add	r0, r1
 80075c2:	6010      	str	r0, [r2, #0]
 80075c4:	6053      	str	r3, [r2, #4]
 80075c6:	e7da      	b.n	800757e <_free_r+0x22>
 80075c8:	d902      	bls.n	80075d0 <_free_r+0x74>
 80075ca:	230c      	movs	r3, #12
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	e7d6      	b.n	800757e <_free_r+0x22>
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	1821      	adds	r1, r4, r0
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf01      	itttt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	1809      	addeq	r1, r1, r0
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	6063      	str	r3, [r4, #4]
 80075e2:	6054      	str	r4, [r2, #4]
 80075e4:	e7cb      	b.n	800757e <_free_r+0x22>
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20001f0c 	.word	0x20001f0c

080075ec <sbrk_aligned>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4e0f      	ldr	r6, [pc, #60]	@ (800762c <sbrk_aligned+0x40>)
 80075f0:	460c      	mov	r4, r1
 80075f2:	6831      	ldr	r1, [r6, #0]
 80075f4:	4605      	mov	r5, r0
 80075f6:	b911      	cbnz	r1, 80075fe <sbrk_aligned+0x12>
 80075f8:	f000 fba8 	bl	8007d4c <_sbrk_r>
 80075fc:	6030      	str	r0, [r6, #0]
 80075fe:	4621      	mov	r1, r4
 8007600:	4628      	mov	r0, r5
 8007602:	f000 fba3 	bl	8007d4c <_sbrk_r>
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	d103      	bne.n	8007612 <sbrk_aligned+0x26>
 800760a:	f04f 34ff 	mov.w	r4, #4294967295
 800760e:	4620      	mov	r0, r4
 8007610:	bd70      	pop	{r4, r5, r6, pc}
 8007612:	1cc4      	adds	r4, r0, #3
 8007614:	f024 0403 	bic.w	r4, r4, #3
 8007618:	42a0      	cmp	r0, r4
 800761a:	d0f8      	beq.n	800760e <sbrk_aligned+0x22>
 800761c:	1a21      	subs	r1, r4, r0
 800761e:	4628      	mov	r0, r5
 8007620:	f000 fb94 	bl	8007d4c <_sbrk_r>
 8007624:	3001      	adds	r0, #1
 8007626:	d1f2      	bne.n	800760e <sbrk_aligned+0x22>
 8007628:	e7ef      	b.n	800760a <sbrk_aligned+0x1e>
 800762a:	bf00      	nop
 800762c:	20001f08 	.word	0x20001f08

08007630 <_malloc_r>:
 8007630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007634:	1ccd      	adds	r5, r1, #3
 8007636:	f025 0503 	bic.w	r5, r5, #3
 800763a:	3508      	adds	r5, #8
 800763c:	2d0c      	cmp	r5, #12
 800763e:	bf38      	it	cc
 8007640:	250c      	movcc	r5, #12
 8007642:	2d00      	cmp	r5, #0
 8007644:	4606      	mov	r6, r0
 8007646:	db01      	blt.n	800764c <_malloc_r+0x1c>
 8007648:	42a9      	cmp	r1, r5
 800764a:	d904      	bls.n	8007656 <_malloc_r+0x26>
 800764c:	230c      	movs	r3, #12
 800764e:	6033      	str	r3, [r6, #0]
 8007650:	2000      	movs	r0, #0
 8007652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800772c <_malloc_r+0xfc>
 800765a:	f000 f869 	bl	8007730 <__malloc_lock>
 800765e:	f8d8 3000 	ldr.w	r3, [r8]
 8007662:	461c      	mov	r4, r3
 8007664:	bb44      	cbnz	r4, 80076b8 <_malloc_r+0x88>
 8007666:	4629      	mov	r1, r5
 8007668:	4630      	mov	r0, r6
 800766a:	f7ff ffbf 	bl	80075ec <sbrk_aligned>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	4604      	mov	r4, r0
 8007672:	d158      	bne.n	8007726 <_malloc_r+0xf6>
 8007674:	f8d8 4000 	ldr.w	r4, [r8]
 8007678:	4627      	mov	r7, r4
 800767a:	2f00      	cmp	r7, #0
 800767c:	d143      	bne.n	8007706 <_malloc_r+0xd6>
 800767e:	2c00      	cmp	r4, #0
 8007680:	d04b      	beq.n	800771a <_malloc_r+0xea>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	4639      	mov	r1, r7
 8007686:	4630      	mov	r0, r6
 8007688:	eb04 0903 	add.w	r9, r4, r3
 800768c:	f000 fb5e 	bl	8007d4c <_sbrk_r>
 8007690:	4581      	cmp	r9, r0
 8007692:	d142      	bne.n	800771a <_malloc_r+0xea>
 8007694:	6821      	ldr	r1, [r4, #0]
 8007696:	4630      	mov	r0, r6
 8007698:	1a6d      	subs	r5, r5, r1
 800769a:	4629      	mov	r1, r5
 800769c:	f7ff ffa6 	bl	80075ec <sbrk_aligned>
 80076a0:	3001      	adds	r0, #1
 80076a2:	d03a      	beq.n	800771a <_malloc_r+0xea>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	442b      	add	r3, r5
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	f8d8 3000 	ldr.w	r3, [r8]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	bb62      	cbnz	r2, 800770c <_malloc_r+0xdc>
 80076b2:	f8c8 7000 	str.w	r7, [r8]
 80076b6:	e00f      	b.n	80076d8 <_malloc_r+0xa8>
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	1b52      	subs	r2, r2, r5
 80076bc:	d420      	bmi.n	8007700 <_malloc_r+0xd0>
 80076be:	2a0b      	cmp	r2, #11
 80076c0:	d917      	bls.n	80076f2 <_malloc_r+0xc2>
 80076c2:	1961      	adds	r1, r4, r5
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	6025      	str	r5, [r4, #0]
 80076c8:	bf18      	it	ne
 80076ca:	6059      	strne	r1, [r3, #4]
 80076cc:	6863      	ldr	r3, [r4, #4]
 80076ce:	bf08      	it	eq
 80076d0:	f8c8 1000 	streq.w	r1, [r8]
 80076d4:	5162      	str	r2, [r4, r5]
 80076d6:	604b      	str	r3, [r1, #4]
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 f82f 	bl	800773c <__malloc_unlock>
 80076de:	f104 000b 	add.w	r0, r4, #11
 80076e2:	1d23      	adds	r3, r4, #4
 80076e4:	f020 0007 	bic.w	r0, r0, #7
 80076e8:	1ac2      	subs	r2, r0, r3
 80076ea:	bf1c      	itt	ne
 80076ec:	1a1b      	subne	r3, r3, r0
 80076ee:	50a3      	strne	r3, [r4, r2]
 80076f0:	e7af      	b.n	8007652 <_malloc_r+0x22>
 80076f2:	6862      	ldr	r2, [r4, #4]
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	bf0c      	ite	eq
 80076f8:	f8c8 2000 	streq.w	r2, [r8]
 80076fc:	605a      	strne	r2, [r3, #4]
 80076fe:	e7eb      	b.n	80076d8 <_malloc_r+0xa8>
 8007700:	4623      	mov	r3, r4
 8007702:	6864      	ldr	r4, [r4, #4]
 8007704:	e7ae      	b.n	8007664 <_malloc_r+0x34>
 8007706:	463c      	mov	r4, r7
 8007708:	687f      	ldr	r7, [r7, #4]
 800770a:	e7b6      	b.n	800767a <_malloc_r+0x4a>
 800770c:	461a      	mov	r2, r3
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	42a3      	cmp	r3, r4
 8007712:	d1fb      	bne.n	800770c <_malloc_r+0xdc>
 8007714:	2300      	movs	r3, #0
 8007716:	6053      	str	r3, [r2, #4]
 8007718:	e7de      	b.n	80076d8 <_malloc_r+0xa8>
 800771a:	230c      	movs	r3, #12
 800771c:	4630      	mov	r0, r6
 800771e:	6033      	str	r3, [r6, #0]
 8007720:	f000 f80c 	bl	800773c <__malloc_unlock>
 8007724:	e794      	b.n	8007650 <_malloc_r+0x20>
 8007726:	6005      	str	r5, [r0, #0]
 8007728:	e7d6      	b.n	80076d8 <_malloc_r+0xa8>
 800772a:	bf00      	nop
 800772c:	20001f0c 	.word	0x20001f0c

08007730 <__malloc_lock>:
 8007730:	4801      	ldr	r0, [pc, #4]	@ (8007738 <__malloc_lock+0x8>)
 8007732:	f7ff bf03 	b.w	800753c <__retarget_lock_acquire_recursive>
 8007736:	bf00      	nop
 8007738:	20001f04 	.word	0x20001f04

0800773c <__malloc_unlock>:
 800773c:	4801      	ldr	r0, [pc, #4]	@ (8007744 <__malloc_unlock+0x8>)
 800773e:	f7ff befe 	b.w	800753e <__retarget_lock_release_recursive>
 8007742:	bf00      	nop
 8007744:	20001f04 	.word	0x20001f04

08007748 <__ssputs_r>:
 8007748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800774c:	461f      	mov	r7, r3
 800774e:	688e      	ldr	r6, [r1, #8]
 8007750:	4682      	mov	sl, r0
 8007752:	42be      	cmp	r6, r7
 8007754:	460c      	mov	r4, r1
 8007756:	4690      	mov	r8, r2
 8007758:	680b      	ldr	r3, [r1, #0]
 800775a:	d82d      	bhi.n	80077b8 <__ssputs_r+0x70>
 800775c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007760:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007764:	d026      	beq.n	80077b4 <__ssputs_r+0x6c>
 8007766:	6965      	ldr	r5, [r4, #20]
 8007768:	6909      	ldr	r1, [r1, #16]
 800776a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800776e:	eba3 0901 	sub.w	r9, r3, r1
 8007772:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007776:	1c7b      	adds	r3, r7, #1
 8007778:	444b      	add	r3, r9
 800777a:	106d      	asrs	r5, r5, #1
 800777c:	429d      	cmp	r5, r3
 800777e:	bf38      	it	cc
 8007780:	461d      	movcc	r5, r3
 8007782:	0553      	lsls	r3, r2, #21
 8007784:	d527      	bpl.n	80077d6 <__ssputs_r+0x8e>
 8007786:	4629      	mov	r1, r5
 8007788:	f7ff ff52 	bl	8007630 <_malloc_r>
 800778c:	4606      	mov	r6, r0
 800778e:	b360      	cbz	r0, 80077ea <__ssputs_r+0xa2>
 8007790:	464a      	mov	r2, r9
 8007792:	6921      	ldr	r1, [r4, #16]
 8007794:	f7ff fed4 	bl	8007540 <memcpy>
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800779e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a2:	81a3      	strh	r3, [r4, #12]
 80077a4:	6126      	str	r6, [r4, #16]
 80077a6:	444e      	add	r6, r9
 80077a8:	6026      	str	r6, [r4, #0]
 80077aa:	463e      	mov	r6, r7
 80077ac:	6165      	str	r5, [r4, #20]
 80077ae:	eba5 0509 	sub.w	r5, r5, r9
 80077b2:	60a5      	str	r5, [r4, #8]
 80077b4:	42be      	cmp	r6, r7
 80077b6:	d900      	bls.n	80077ba <__ssputs_r+0x72>
 80077b8:	463e      	mov	r6, r7
 80077ba:	4632      	mov	r2, r6
 80077bc:	4641      	mov	r1, r8
 80077be:	6820      	ldr	r0, [r4, #0]
 80077c0:	f000 faaa 	bl	8007d18 <memmove>
 80077c4:	2000      	movs	r0, #0
 80077c6:	68a3      	ldr	r3, [r4, #8]
 80077c8:	1b9b      	subs	r3, r3, r6
 80077ca:	60a3      	str	r3, [r4, #8]
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	4433      	add	r3, r6
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d6:	462a      	mov	r2, r5
 80077d8:	f000 fad6 	bl	8007d88 <_realloc_r>
 80077dc:	4606      	mov	r6, r0
 80077de:	2800      	cmp	r0, #0
 80077e0:	d1e0      	bne.n	80077a4 <__ssputs_r+0x5c>
 80077e2:	4650      	mov	r0, sl
 80077e4:	6921      	ldr	r1, [r4, #16]
 80077e6:	f7ff feb9 	bl	800755c <_free_r>
 80077ea:	230c      	movs	r3, #12
 80077ec:	f8ca 3000 	str.w	r3, [sl]
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	f04f 30ff 	mov.w	r0, #4294967295
 80077f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077fa:	81a3      	strh	r3, [r4, #12]
 80077fc:	e7e9      	b.n	80077d2 <__ssputs_r+0x8a>
	...

08007800 <_svfiprintf_r>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	4698      	mov	r8, r3
 8007806:	898b      	ldrh	r3, [r1, #12]
 8007808:	4607      	mov	r7, r0
 800780a:	061b      	lsls	r3, r3, #24
 800780c:	460d      	mov	r5, r1
 800780e:	4614      	mov	r4, r2
 8007810:	b09d      	sub	sp, #116	@ 0x74
 8007812:	d510      	bpl.n	8007836 <_svfiprintf_r+0x36>
 8007814:	690b      	ldr	r3, [r1, #16]
 8007816:	b973      	cbnz	r3, 8007836 <_svfiprintf_r+0x36>
 8007818:	2140      	movs	r1, #64	@ 0x40
 800781a:	f7ff ff09 	bl	8007630 <_malloc_r>
 800781e:	6028      	str	r0, [r5, #0]
 8007820:	6128      	str	r0, [r5, #16]
 8007822:	b930      	cbnz	r0, 8007832 <_svfiprintf_r+0x32>
 8007824:	230c      	movs	r3, #12
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	f04f 30ff 	mov.w	r0, #4294967295
 800782c:	b01d      	add	sp, #116	@ 0x74
 800782e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007832:	2340      	movs	r3, #64	@ 0x40
 8007834:	616b      	str	r3, [r5, #20]
 8007836:	2300      	movs	r3, #0
 8007838:	9309      	str	r3, [sp, #36]	@ 0x24
 800783a:	2320      	movs	r3, #32
 800783c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007840:	2330      	movs	r3, #48	@ 0x30
 8007842:	f04f 0901 	mov.w	r9, #1
 8007846:	f8cd 800c 	str.w	r8, [sp, #12]
 800784a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80079e4 <_svfiprintf_r+0x1e4>
 800784e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007852:	4623      	mov	r3, r4
 8007854:	469a      	mov	sl, r3
 8007856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800785a:	b10a      	cbz	r2, 8007860 <_svfiprintf_r+0x60>
 800785c:	2a25      	cmp	r2, #37	@ 0x25
 800785e:	d1f9      	bne.n	8007854 <_svfiprintf_r+0x54>
 8007860:	ebba 0b04 	subs.w	fp, sl, r4
 8007864:	d00b      	beq.n	800787e <_svfiprintf_r+0x7e>
 8007866:	465b      	mov	r3, fp
 8007868:	4622      	mov	r2, r4
 800786a:	4629      	mov	r1, r5
 800786c:	4638      	mov	r0, r7
 800786e:	f7ff ff6b 	bl	8007748 <__ssputs_r>
 8007872:	3001      	adds	r0, #1
 8007874:	f000 80a7 	beq.w	80079c6 <_svfiprintf_r+0x1c6>
 8007878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800787a:	445a      	add	r2, fp
 800787c:	9209      	str	r2, [sp, #36]	@ 0x24
 800787e:	f89a 3000 	ldrb.w	r3, [sl]
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 809f 	beq.w	80079c6 <_svfiprintf_r+0x1c6>
 8007888:	2300      	movs	r3, #0
 800788a:	f04f 32ff 	mov.w	r2, #4294967295
 800788e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007892:	f10a 0a01 	add.w	sl, sl, #1
 8007896:	9304      	str	r3, [sp, #16]
 8007898:	9307      	str	r3, [sp, #28]
 800789a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800789e:	931a      	str	r3, [sp, #104]	@ 0x68
 80078a0:	4654      	mov	r4, sl
 80078a2:	2205      	movs	r2, #5
 80078a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a8:	484e      	ldr	r0, [pc, #312]	@ (80079e4 <_svfiprintf_r+0x1e4>)
 80078aa:	f000 fa5f 	bl	8007d6c <memchr>
 80078ae:	9a04      	ldr	r2, [sp, #16]
 80078b0:	b9d8      	cbnz	r0, 80078ea <_svfiprintf_r+0xea>
 80078b2:	06d0      	lsls	r0, r2, #27
 80078b4:	bf44      	itt	mi
 80078b6:	2320      	movmi	r3, #32
 80078b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078bc:	0711      	lsls	r1, r2, #28
 80078be:	bf44      	itt	mi
 80078c0:	232b      	movmi	r3, #43	@ 0x2b
 80078c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078c6:	f89a 3000 	ldrb.w	r3, [sl]
 80078ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80078cc:	d015      	beq.n	80078fa <_svfiprintf_r+0xfa>
 80078ce:	4654      	mov	r4, sl
 80078d0:	2000      	movs	r0, #0
 80078d2:	f04f 0c0a 	mov.w	ip, #10
 80078d6:	9a07      	ldr	r2, [sp, #28]
 80078d8:	4621      	mov	r1, r4
 80078da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078de:	3b30      	subs	r3, #48	@ 0x30
 80078e0:	2b09      	cmp	r3, #9
 80078e2:	d94b      	bls.n	800797c <_svfiprintf_r+0x17c>
 80078e4:	b1b0      	cbz	r0, 8007914 <_svfiprintf_r+0x114>
 80078e6:	9207      	str	r2, [sp, #28]
 80078e8:	e014      	b.n	8007914 <_svfiprintf_r+0x114>
 80078ea:	eba0 0308 	sub.w	r3, r0, r8
 80078ee:	fa09 f303 	lsl.w	r3, r9, r3
 80078f2:	4313      	orrs	r3, r2
 80078f4:	46a2      	mov	sl, r4
 80078f6:	9304      	str	r3, [sp, #16]
 80078f8:	e7d2      	b.n	80078a0 <_svfiprintf_r+0xa0>
 80078fa:	9b03      	ldr	r3, [sp, #12]
 80078fc:	1d19      	adds	r1, r3, #4
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	9103      	str	r1, [sp, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	bfbb      	ittet	lt
 8007906:	425b      	neglt	r3, r3
 8007908:	f042 0202 	orrlt.w	r2, r2, #2
 800790c:	9307      	strge	r3, [sp, #28]
 800790e:	9307      	strlt	r3, [sp, #28]
 8007910:	bfb8      	it	lt
 8007912:	9204      	strlt	r2, [sp, #16]
 8007914:	7823      	ldrb	r3, [r4, #0]
 8007916:	2b2e      	cmp	r3, #46	@ 0x2e
 8007918:	d10a      	bne.n	8007930 <_svfiprintf_r+0x130>
 800791a:	7863      	ldrb	r3, [r4, #1]
 800791c:	2b2a      	cmp	r3, #42	@ 0x2a
 800791e:	d132      	bne.n	8007986 <_svfiprintf_r+0x186>
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	3402      	adds	r4, #2
 8007924:	1d1a      	adds	r2, r3, #4
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	9203      	str	r2, [sp, #12]
 800792a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800792e:	9305      	str	r3, [sp, #20]
 8007930:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80079e8 <_svfiprintf_r+0x1e8>
 8007934:	2203      	movs	r2, #3
 8007936:	4650      	mov	r0, sl
 8007938:	7821      	ldrb	r1, [r4, #0]
 800793a:	f000 fa17 	bl	8007d6c <memchr>
 800793e:	b138      	cbz	r0, 8007950 <_svfiprintf_r+0x150>
 8007940:	2240      	movs	r2, #64	@ 0x40
 8007942:	9b04      	ldr	r3, [sp, #16]
 8007944:	eba0 000a 	sub.w	r0, r0, sl
 8007948:	4082      	lsls	r2, r0
 800794a:	4313      	orrs	r3, r2
 800794c:	3401      	adds	r4, #1
 800794e:	9304      	str	r3, [sp, #16]
 8007950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007954:	2206      	movs	r2, #6
 8007956:	4825      	ldr	r0, [pc, #148]	@ (80079ec <_svfiprintf_r+0x1ec>)
 8007958:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800795c:	f000 fa06 	bl	8007d6c <memchr>
 8007960:	2800      	cmp	r0, #0
 8007962:	d036      	beq.n	80079d2 <_svfiprintf_r+0x1d2>
 8007964:	4b22      	ldr	r3, [pc, #136]	@ (80079f0 <_svfiprintf_r+0x1f0>)
 8007966:	bb1b      	cbnz	r3, 80079b0 <_svfiprintf_r+0x1b0>
 8007968:	9b03      	ldr	r3, [sp, #12]
 800796a:	3307      	adds	r3, #7
 800796c:	f023 0307 	bic.w	r3, r3, #7
 8007970:	3308      	adds	r3, #8
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007976:	4433      	add	r3, r6
 8007978:	9309      	str	r3, [sp, #36]	@ 0x24
 800797a:	e76a      	b.n	8007852 <_svfiprintf_r+0x52>
 800797c:	460c      	mov	r4, r1
 800797e:	2001      	movs	r0, #1
 8007980:	fb0c 3202 	mla	r2, ip, r2, r3
 8007984:	e7a8      	b.n	80078d8 <_svfiprintf_r+0xd8>
 8007986:	2300      	movs	r3, #0
 8007988:	f04f 0c0a 	mov.w	ip, #10
 800798c:	4619      	mov	r1, r3
 800798e:	3401      	adds	r4, #1
 8007990:	9305      	str	r3, [sp, #20]
 8007992:	4620      	mov	r0, r4
 8007994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007998:	3a30      	subs	r2, #48	@ 0x30
 800799a:	2a09      	cmp	r2, #9
 800799c:	d903      	bls.n	80079a6 <_svfiprintf_r+0x1a6>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0c6      	beq.n	8007930 <_svfiprintf_r+0x130>
 80079a2:	9105      	str	r1, [sp, #20]
 80079a4:	e7c4      	b.n	8007930 <_svfiprintf_r+0x130>
 80079a6:	4604      	mov	r4, r0
 80079a8:	2301      	movs	r3, #1
 80079aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ae:	e7f0      	b.n	8007992 <_svfiprintf_r+0x192>
 80079b0:	ab03      	add	r3, sp, #12
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	462a      	mov	r2, r5
 80079b6:	4638      	mov	r0, r7
 80079b8:	4b0e      	ldr	r3, [pc, #56]	@ (80079f4 <_svfiprintf_r+0x1f4>)
 80079ba:	a904      	add	r1, sp, #16
 80079bc:	f3af 8000 	nop.w
 80079c0:	1c42      	adds	r2, r0, #1
 80079c2:	4606      	mov	r6, r0
 80079c4:	d1d6      	bne.n	8007974 <_svfiprintf_r+0x174>
 80079c6:	89ab      	ldrh	r3, [r5, #12]
 80079c8:	065b      	lsls	r3, r3, #25
 80079ca:	f53f af2d 	bmi.w	8007828 <_svfiprintf_r+0x28>
 80079ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079d0:	e72c      	b.n	800782c <_svfiprintf_r+0x2c>
 80079d2:	ab03      	add	r3, sp, #12
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	462a      	mov	r2, r5
 80079d8:	4638      	mov	r0, r7
 80079da:	4b06      	ldr	r3, [pc, #24]	@ (80079f4 <_svfiprintf_r+0x1f4>)
 80079dc:	a904      	add	r1, sp, #16
 80079de:	f000 f87d 	bl	8007adc <_printf_i>
 80079e2:	e7ed      	b.n	80079c0 <_svfiprintf_r+0x1c0>
 80079e4:	08007ef2 	.word	0x08007ef2
 80079e8:	08007ef8 	.word	0x08007ef8
 80079ec:	08007efc 	.word	0x08007efc
 80079f0:	00000000 	.word	0x00000000
 80079f4:	08007749 	.word	0x08007749

080079f8 <_printf_common>:
 80079f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079fc:	4616      	mov	r6, r2
 80079fe:	4698      	mov	r8, r3
 8007a00:	688a      	ldr	r2, [r1, #8]
 8007a02:	690b      	ldr	r3, [r1, #16]
 8007a04:	4607      	mov	r7, r0
 8007a06:	4293      	cmp	r3, r2
 8007a08:	bfb8      	it	lt
 8007a0a:	4613      	movlt	r3, r2
 8007a0c:	6033      	str	r3, [r6, #0]
 8007a0e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a12:	460c      	mov	r4, r1
 8007a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a18:	b10a      	cbz	r2, 8007a1e <_printf_common+0x26>
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	6033      	str	r3, [r6, #0]
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	0699      	lsls	r1, r3, #26
 8007a22:	bf42      	ittt	mi
 8007a24:	6833      	ldrmi	r3, [r6, #0]
 8007a26:	3302      	addmi	r3, #2
 8007a28:	6033      	strmi	r3, [r6, #0]
 8007a2a:	6825      	ldr	r5, [r4, #0]
 8007a2c:	f015 0506 	ands.w	r5, r5, #6
 8007a30:	d106      	bne.n	8007a40 <_printf_common+0x48>
 8007a32:	f104 0a19 	add.w	sl, r4, #25
 8007a36:	68e3      	ldr	r3, [r4, #12]
 8007a38:	6832      	ldr	r2, [r6, #0]
 8007a3a:	1a9b      	subs	r3, r3, r2
 8007a3c:	42ab      	cmp	r3, r5
 8007a3e:	dc2b      	bgt.n	8007a98 <_printf_common+0xa0>
 8007a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a44:	6822      	ldr	r2, [r4, #0]
 8007a46:	3b00      	subs	r3, #0
 8007a48:	bf18      	it	ne
 8007a4a:	2301      	movne	r3, #1
 8007a4c:	0692      	lsls	r2, r2, #26
 8007a4e:	d430      	bmi.n	8007ab2 <_printf_common+0xba>
 8007a50:	4641      	mov	r1, r8
 8007a52:	4638      	mov	r0, r7
 8007a54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a58:	47c8      	blx	r9
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	d023      	beq.n	8007aa6 <_printf_common+0xae>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	6922      	ldr	r2, [r4, #16]
 8007a62:	f003 0306 	and.w	r3, r3, #6
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	bf14      	ite	ne
 8007a6a:	2500      	movne	r5, #0
 8007a6c:	6833      	ldreq	r3, [r6, #0]
 8007a6e:	f04f 0600 	mov.w	r6, #0
 8007a72:	bf08      	it	eq
 8007a74:	68e5      	ldreq	r5, [r4, #12]
 8007a76:	f104 041a 	add.w	r4, r4, #26
 8007a7a:	bf08      	it	eq
 8007a7c:	1aed      	subeq	r5, r5, r3
 8007a7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007a82:	bf08      	it	eq
 8007a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	bfc4      	itt	gt
 8007a8c:	1a9b      	subgt	r3, r3, r2
 8007a8e:	18ed      	addgt	r5, r5, r3
 8007a90:	42b5      	cmp	r5, r6
 8007a92:	d11a      	bne.n	8007aca <_printf_common+0xd2>
 8007a94:	2000      	movs	r0, #0
 8007a96:	e008      	b.n	8007aaa <_printf_common+0xb2>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	4641      	mov	r1, r8
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	47c8      	blx	r9
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d103      	bne.n	8007aae <_printf_common+0xb6>
 8007aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aae:	3501      	adds	r5, #1
 8007ab0:	e7c1      	b.n	8007a36 <_printf_common+0x3e>
 8007ab2:	2030      	movs	r0, #48	@ 0x30
 8007ab4:	18e1      	adds	r1, r4, r3
 8007ab6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ac0:	4422      	add	r2, r4
 8007ac2:	3302      	adds	r3, #2
 8007ac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ac8:	e7c2      	b.n	8007a50 <_printf_common+0x58>
 8007aca:	2301      	movs	r3, #1
 8007acc:	4622      	mov	r2, r4
 8007ace:	4641      	mov	r1, r8
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	47c8      	blx	r9
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d0e6      	beq.n	8007aa6 <_printf_common+0xae>
 8007ad8:	3601      	adds	r6, #1
 8007ada:	e7d9      	b.n	8007a90 <_printf_common+0x98>

08007adc <_printf_i>:
 8007adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae0:	7e0f      	ldrb	r7, [r1, #24]
 8007ae2:	4691      	mov	r9, r2
 8007ae4:	2f78      	cmp	r7, #120	@ 0x78
 8007ae6:	4680      	mov	r8, r0
 8007ae8:	460c      	mov	r4, r1
 8007aea:	469a      	mov	sl, r3
 8007aec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007aee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007af2:	d807      	bhi.n	8007b04 <_printf_i+0x28>
 8007af4:	2f62      	cmp	r7, #98	@ 0x62
 8007af6:	d80a      	bhi.n	8007b0e <_printf_i+0x32>
 8007af8:	2f00      	cmp	r7, #0
 8007afa:	f000 80d1 	beq.w	8007ca0 <_printf_i+0x1c4>
 8007afe:	2f58      	cmp	r7, #88	@ 0x58
 8007b00:	f000 80b8 	beq.w	8007c74 <_printf_i+0x198>
 8007b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b0c:	e03a      	b.n	8007b84 <_printf_i+0xa8>
 8007b0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b12:	2b15      	cmp	r3, #21
 8007b14:	d8f6      	bhi.n	8007b04 <_printf_i+0x28>
 8007b16:	a101      	add	r1, pc, #4	@ (adr r1, 8007b1c <_printf_i+0x40>)
 8007b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b1c:	08007b75 	.word	0x08007b75
 8007b20:	08007b89 	.word	0x08007b89
 8007b24:	08007b05 	.word	0x08007b05
 8007b28:	08007b05 	.word	0x08007b05
 8007b2c:	08007b05 	.word	0x08007b05
 8007b30:	08007b05 	.word	0x08007b05
 8007b34:	08007b89 	.word	0x08007b89
 8007b38:	08007b05 	.word	0x08007b05
 8007b3c:	08007b05 	.word	0x08007b05
 8007b40:	08007b05 	.word	0x08007b05
 8007b44:	08007b05 	.word	0x08007b05
 8007b48:	08007c87 	.word	0x08007c87
 8007b4c:	08007bb3 	.word	0x08007bb3
 8007b50:	08007c41 	.word	0x08007c41
 8007b54:	08007b05 	.word	0x08007b05
 8007b58:	08007b05 	.word	0x08007b05
 8007b5c:	08007ca9 	.word	0x08007ca9
 8007b60:	08007b05 	.word	0x08007b05
 8007b64:	08007bb3 	.word	0x08007bb3
 8007b68:	08007b05 	.word	0x08007b05
 8007b6c:	08007b05 	.word	0x08007b05
 8007b70:	08007c49 	.word	0x08007c49
 8007b74:	6833      	ldr	r3, [r6, #0]
 8007b76:	1d1a      	adds	r2, r3, #4
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6032      	str	r2, [r6, #0]
 8007b7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b84:	2301      	movs	r3, #1
 8007b86:	e09c      	b.n	8007cc2 <_printf_i+0x1e6>
 8007b88:	6833      	ldr	r3, [r6, #0]
 8007b8a:	6820      	ldr	r0, [r4, #0]
 8007b8c:	1d19      	adds	r1, r3, #4
 8007b8e:	6031      	str	r1, [r6, #0]
 8007b90:	0606      	lsls	r6, r0, #24
 8007b92:	d501      	bpl.n	8007b98 <_printf_i+0xbc>
 8007b94:	681d      	ldr	r5, [r3, #0]
 8007b96:	e003      	b.n	8007ba0 <_printf_i+0xc4>
 8007b98:	0645      	lsls	r5, r0, #25
 8007b9a:	d5fb      	bpl.n	8007b94 <_printf_i+0xb8>
 8007b9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ba0:	2d00      	cmp	r5, #0
 8007ba2:	da03      	bge.n	8007bac <_printf_i+0xd0>
 8007ba4:	232d      	movs	r3, #45	@ 0x2d
 8007ba6:	426d      	negs	r5, r5
 8007ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bac:	230a      	movs	r3, #10
 8007bae:	4858      	ldr	r0, [pc, #352]	@ (8007d10 <_printf_i+0x234>)
 8007bb0:	e011      	b.n	8007bd6 <_printf_i+0xfa>
 8007bb2:	6821      	ldr	r1, [r4, #0]
 8007bb4:	6833      	ldr	r3, [r6, #0]
 8007bb6:	0608      	lsls	r0, r1, #24
 8007bb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bbc:	d402      	bmi.n	8007bc4 <_printf_i+0xe8>
 8007bbe:	0649      	lsls	r1, r1, #25
 8007bc0:	bf48      	it	mi
 8007bc2:	b2ad      	uxthmi	r5, r5
 8007bc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bc6:	6033      	str	r3, [r6, #0]
 8007bc8:	bf14      	ite	ne
 8007bca:	230a      	movne	r3, #10
 8007bcc:	2308      	moveq	r3, #8
 8007bce:	4850      	ldr	r0, [pc, #320]	@ (8007d10 <_printf_i+0x234>)
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bd6:	6866      	ldr	r6, [r4, #4]
 8007bd8:	2e00      	cmp	r6, #0
 8007bda:	60a6      	str	r6, [r4, #8]
 8007bdc:	db05      	blt.n	8007bea <_printf_i+0x10e>
 8007bde:	6821      	ldr	r1, [r4, #0]
 8007be0:	432e      	orrs	r6, r5
 8007be2:	f021 0104 	bic.w	r1, r1, #4
 8007be6:	6021      	str	r1, [r4, #0]
 8007be8:	d04b      	beq.n	8007c82 <_printf_i+0x1a6>
 8007bea:	4616      	mov	r6, r2
 8007bec:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bf0:	fb03 5711 	mls	r7, r3, r1, r5
 8007bf4:	5dc7      	ldrb	r7, [r0, r7]
 8007bf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bfa:	462f      	mov	r7, r5
 8007bfc:	42bb      	cmp	r3, r7
 8007bfe:	460d      	mov	r5, r1
 8007c00:	d9f4      	bls.n	8007bec <_printf_i+0x110>
 8007c02:	2b08      	cmp	r3, #8
 8007c04:	d10b      	bne.n	8007c1e <_printf_i+0x142>
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	07df      	lsls	r7, r3, #31
 8007c0a:	d508      	bpl.n	8007c1e <_printf_i+0x142>
 8007c0c:	6923      	ldr	r3, [r4, #16]
 8007c0e:	6861      	ldr	r1, [r4, #4]
 8007c10:	4299      	cmp	r1, r3
 8007c12:	bfde      	ittt	le
 8007c14:	2330      	movle	r3, #48	@ 0x30
 8007c16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c1e:	1b92      	subs	r2, r2, r6
 8007c20:	6122      	str	r2, [r4, #16]
 8007c22:	464b      	mov	r3, r9
 8007c24:	4621      	mov	r1, r4
 8007c26:	4640      	mov	r0, r8
 8007c28:	f8cd a000 	str.w	sl, [sp]
 8007c2c:	aa03      	add	r2, sp, #12
 8007c2e:	f7ff fee3 	bl	80079f8 <_printf_common>
 8007c32:	3001      	adds	r0, #1
 8007c34:	d14a      	bne.n	8007ccc <_printf_i+0x1f0>
 8007c36:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3a:	b004      	add	sp, #16
 8007c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	f043 0320 	orr.w	r3, r3, #32
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	2778      	movs	r7, #120	@ 0x78
 8007c4a:	4832      	ldr	r0, [pc, #200]	@ (8007d14 <_printf_i+0x238>)
 8007c4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	6831      	ldr	r1, [r6, #0]
 8007c54:	061f      	lsls	r7, r3, #24
 8007c56:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c5a:	d402      	bmi.n	8007c62 <_printf_i+0x186>
 8007c5c:	065f      	lsls	r7, r3, #25
 8007c5e:	bf48      	it	mi
 8007c60:	b2ad      	uxthmi	r5, r5
 8007c62:	6031      	str	r1, [r6, #0]
 8007c64:	07d9      	lsls	r1, r3, #31
 8007c66:	bf44      	itt	mi
 8007c68:	f043 0320 	orrmi.w	r3, r3, #32
 8007c6c:	6023      	strmi	r3, [r4, #0]
 8007c6e:	b11d      	cbz	r5, 8007c78 <_printf_i+0x19c>
 8007c70:	2310      	movs	r3, #16
 8007c72:	e7ad      	b.n	8007bd0 <_printf_i+0xf4>
 8007c74:	4826      	ldr	r0, [pc, #152]	@ (8007d10 <_printf_i+0x234>)
 8007c76:	e7e9      	b.n	8007c4c <_printf_i+0x170>
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	f023 0320 	bic.w	r3, r3, #32
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	e7f6      	b.n	8007c70 <_printf_i+0x194>
 8007c82:	4616      	mov	r6, r2
 8007c84:	e7bd      	b.n	8007c02 <_printf_i+0x126>
 8007c86:	6833      	ldr	r3, [r6, #0]
 8007c88:	6825      	ldr	r5, [r4, #0]
 8007c8a:	1d18      	adds	r0, r3, #4
 8007c8c:	6961      	ldr	r1, [r4, #20]
 8007c8e:	6030      	str	r0, [r6, #0]
 8007c90:	062e      	lsls	r6, r5, #24
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	d501      	bpl.n	8007c9a <_printf_i+0x1be>
 8007c96:	6019      	str	r1, [r3, #0]
 8007c98:	e002      	b.n	8007ca0 <_printf_i+0x1c4>
 8007c9a:	0668      	lsls	r0, r5, #25
 8007c9c:	d5fb      	bpl.n	8007c96 <_printf_i+0x1ba>
 8007c9e:	8019      	strh	r1, [r3, #0]
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4616      	mov	r6, r2
 8007ca4:	6123      	str	r3, [r4, #16]
 8007ca6:	e7bc      	b.n	8007c22 <_printf_i+0x146>
 8007ca8:	6833      	ldr	r3, [r6, #0]
 8007caa:	2100      	movs	r1, #0
 8007cac:	1d1a      	adds	r2, r3, #4
 8007cae:	6032      	str	r2, [r6, #0]
 8007cb0:	681e      	ldr	r6, [r3, #0]
 8007cb2:	6862      	ldr	r2, [r4, #4]
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f000 f859 	bl	8007d6c <memchr>
 8007cba:	b108      	cbz	r0, 8007cc0 <_printf_i+0x1e4>
 8007cbc:	1b80      	subs	r0, r0, r6
 8007cbe:	6060      	str	r0, [r4, #4]
 8007cc0:	6863      	ldr	r3, [r4, #4]
 8007cc2:	6123      	str	r3, [r4, #16]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cca:	e7aa      	b.n	8007c22 <_printf_i+0x146>
 8007ccc:	4632      	mov	r2, r6
 8007cce:	4649      	mov	r1, r9
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	6923      	ldr	r3, [r4, #16]
 8007cd4:	47d0      	blx	sl
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d0ad      	beq.n	8007c36 <_printf_i+0x15a>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	079b      	lsls	r3, r3, #30
 8007cde:	d413      	bmi.n	8007d08 <_printf_i+0x22c>
 8007ce0:	68e0      	ldr	r0, [r4, #12]
 8007ce2:	9b03      	ldr	r3, [sp, #12]
 8007ce4:	4298      	cmp	r0, r3
 8007ce6:	bfb8      	it	lt
 8007ce8:	4618      	movlt	r0, r3
 8007cea:	e7a6      	b.n	8007c3a <_printf_i+0x15e>
 8007cec:	2301      	movs	r3, #1
 8007cee:	4632      	mov	r2, r6
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	47d0      	blx	sl
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d09d      	beq.n	8007c36 <_printf_i+0x15a>
 8007cfa:	3501      	adds	r5, #1
 8007cfc:	68e3      	ldr	r3, [r4, #12]
 8007cfe:	9903      	ldr	r1, [sp, #12]
 8007d00:	1a5b      	subs	r3, r3, r1
 8007d02:	42ab      	cmp	r3, r5
 8007d04:	dcf2      	bgt.n	8007cec <_printf_i+0x210>
 8007d06:	e7eb      	b.n	8007ce0 <_printf_i+0x204>
 8007d08:	2500      	movs	r5, #0
 8007d0a:	f104 0619 	add.w	r6, r4, #25
 8007d0e:	e7f5      	b.n	8007cfc <_printf_i+0x220>
 8007d10:	08007f03 	.word	0x08007f03
 8007d14:	08007f14 	.word	0x08007f14

08007d18 <memmove>:
 8007d18:	4288      	cmp	r0, r1
 8007d1a:	b510      	push	{r4, lr}
 8007d1c:	eb01 0402 	add.w	r4, r1, r2
 8007d20:	d902      	bls.n	8007d28 <memmove+0x10>
 8007d22:	4284      	cmp	r4, r0
 8007d24:	4623      	mov	r3, r4
 8007d26:	d807      	bhi.n	8007d38 <memmove+0x20>
 8007d28:	1e43      	subs	r3, r0, #1
 8007d2a:	42a1      	cmp	r1, r4
 8007d2c:	d008      	beq.n	8007d40 <memmove+0x28>
 8007d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d36:	e7f8      	b.n	8007d2a <memmove+0x12>
 8007d38:	4601      	mov	r1, r0
 8007d3a:	4402      	add	r2, r0
 8007d3c:	428a      	cmp	r2, r1
 8007d3e:	d100      	bne.n	8007d42 <memmove+0x2a>
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d4a:	e7f7      	b.n	8007d3c <memmove+0x24>

08007d4c <_sbrk_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	2300      	movs	r3, #0
 8007d50:	4d05      	ldr	r5, [pc, #20]	@ (8007d68 <_sbrk_r+0x1c>)
 8007d52:	4604      	mov	r4, r0
 8007d54:	4608      	mov	r0, r1
 8007d56:	602b      	str	r3, [r5, #0]
 8007d58:	f7fa f928 	bl	8001fac <_sbrk>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_sbrk_r+0x1a>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_sbrk_r+0x1a>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	20001f00 	.word	0x20001f00

08007d6c <memchr>:
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	b2c9      	uxtb	r1, r1
 8007d72:	4402      	add	r2, r0
 8007d74:	4293      	cmp	r3, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	d101      	bne.n	8007d7e <memchr+0x12>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e003      	b.n	8007d86 <memchr+0x1a>
 8007d7e:	7804      	ldrb	r4, [r0, #0]
 8007d80:	3301      	adds	r3, #1
 8007d82:	428c      	cmp	r4, r1
 8007d84:	d1f6      	bne.n	8007d74 <memchr+0x8>
 8007d86:	bd10      	pop	{r4, pc}

08007d88 <_realloc_r>:
 8007d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8c:	4607      	mov	r7, r0
 8007d8e:	4614      	mov	r4, r2
 8007d90:	460d      	mov	r5, r1
 8007d92:	b921      	cbnz	r1, 8007d9e <_realloc_r+0x16>
 8007d94:	4611      	mov	r1, r2
 8007d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9a:	f7ff bc49 	b.w	8007630 <_malloc_r>
 8007d9e:	b92a      	cbnz	r2, 8007dac <_realloc_r+0x24>
 8007da0:	f7ff fbdc 	bl	800755c <_free_r>
 8007da4:	4625      	mov	r5, r4
 8007da6:	4628      	mov	r0, r5
 8007da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dac:	f000 f81a 	bl	8007de4 <_malloc_usable_size_r>
 8007db0:	4284      	cmp	r4, r0
 8007db2:	4606      	mov	r6, r0
 8007db4:	d802      	bhi.n	8007dbc <_realloc_r+0x34>
 8007db6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007dba:	d8f4      	bhi.n	8007da6 <_realloc_r+0x1e>
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	f7ff fc36 	bl	8007630 <_malloc_r>
 8007dc4:	4680      	mov	r8, r0
 8007dc6:	b908      	cbnz	r0, 8007dcc <_realloc_r+0x44>
 8007dc8:	4645      	mov	r5, r8
 8007dca:	e7ec      	b.n	8007da6 <_realloc_r+0x1e>
 8007dcc:	42b4      	cmp	r4, r6
 8007dce:	4622      	mov	r2, r4
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	bf28      	it	cs
 8007dd4:	4632      	movcs	r2, r6
 8007dd6:	f7ff fbb3 	bl	8007540 <memcpy>
 8007dda:	4629      	mov	r1, r5
 8007ddc:	4638      	mov	r0, r7
 8007dde:	f7ff fbbd 	bl	800755c <_free_r>
 8007de2:	e7f1      	b.n	8007dc8 <_realloc_r+0x40>

08007de4 <_malloc_usable_size_r>:
 8007de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de8:	1f18      	subs	r0, r3, #4
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfbc      	itt	lt
 8007dee:	580b      	ldrlt	r3, [r1, r0]
 8007df0:	18c0      	addlt	r0, r0, r3
 8007df2:	4770      	bx	lr

08007df4 <_init>:
 8007df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df6:	bf00      	nop
 8007df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dfa:	bc08      	pop	{r3}
 8007dfc:	469e      	mov	lr, r3
 8007dfe:	4770      	bx	lr

08007e00 <_fini>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	bf00      	nop
 8007e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e06:	bc08      	pop	{r3}
 8007e08:	469e      	mov	lr, r3
 8007e0a:	4770      	bx	lr
