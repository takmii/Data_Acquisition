
Data_Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000728c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800739c  0800739c  0000839c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007450  08007450  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007450  08007450  00009064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007450  08007450  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007450  08007450  00008450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007454  08007454  00008454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007458  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000200c  20000064  080074bc  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002070  080074bc  00009070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187e9  00000000  00000000  0000908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000410a  00000000  00000000  00021876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  00025980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001032  00000000  00000000  00026ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b787  00000000  00000000  00027eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196eb  00000000  00000000  00043661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aab1  00000000  00000000  0005cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f77fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a98  00000000  00000000  000f7840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000fd2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08007384 	.word	0x08007384

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08007384 	.word	0x08007384

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2uiz>:
 80006f8:	0042      	lsls	r2, r0, #1
 80006fa:	d20e      	bcs.n	800071a <__aeabi_f2uiz+0x22>
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000700:	d30b      	bcc.n	800071a <__aeabi_f2uiz+0x22>
 8000702:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d409      	bmi.n	8000720 <__aeabi_f2uiz+0x28>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2uiz+0x32>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d102      	bne.n	8000730 <__aeabi_f2uiz+0x38>
 800072a:	f04f 30ff 	mov.w	r0, #4294967295
 800072e:	4770      	bx	lr
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000748:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <MX_ADC1_Init+0x74>)
 800074a:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <MX_ADC1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074e:	4b17      	ldr	r3, [pc, #92]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000754:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000756:	2201      	movs	r2, #1
 8000758:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075a:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_ADC1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000762:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_ADC1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000770:	2201      	movs	r2, #1
 8000772:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000774:	480d      	ldr	r0, [pc, #52]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000776:	f001 fc59 	bl	800202c <HAL_ADC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000780:	f001 f9d6 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000788:	2301      	movs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800078c:	2302      	movs	r3, #2
 800078e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000796:	f001 ff0d 	bl	80025b4 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007a0:	f001 f9c6 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000080 	.word	0x20000080
 80007b0:	40012400 	.word	0x40012400

080007b4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007c6:	4a19      	ldr	r2, [pc, #100]	@ (800082c <MX_ADC2_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007de:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80007e2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007f2:	f001 fc1b 	bl	800202c <HAL_ADC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f001 f998 	bl	8001b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000804:	2301      	movs	r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000808:	2302      	movs	r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_ADC2_Init+0x74>)
 8000812:	f001 fecf 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800081c:	f001 f988 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000b0 	.word	0x200000b0
 800082c:	40012800 	.word	0x40012800

08000830 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0318 	add.w	r3, r7, #24
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a28      	ldr	r2, [pc, #160]	@ (80008ec <HAL_ADC_MspInit+0xbc>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d122      	bne.n	8000896 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a26      	ldr	r2, [pc, #152]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 8000856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a20      	ldr	r2, [pc, #128]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000880:	230e      	movs	r3, #14
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000884:	2303      	movs	r3, #3
 8000886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	4619      	mov	r1, r3
 800088e:	4819      	ldr	r0, [pc, #100]	@ (80008f4 <HAL_ADC_MspInit+0xc4>)
 8000890:	f002 fb34 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000894:	e026      	b.n	80008e4 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <HAL_ADC_MspInit+0xc8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d121      	bne.n	80008e4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80008a0:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a0c      	ldr	r2, [pc, #48]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80008d0:	2371      	movs	r3, #113	@ 0x71
 80008d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d4:	2303      	movs	r3, #3
 80008d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	4619      	mov	r1, r3
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <HAL_ADC_MspInit+0xc4>)
 80008e0:	f002 fb0c 	bl	8002efc <HAL_GPIO_Init>
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40012400 	.word	0x40012400
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40012800 	.word	0x40012800

080008fc <setADCChannel1>:
unsigned char readings_qtt=40;


unsigned short sensorData[sensor_qtt][sensor_buffer_size];

HAL_StatusTypeDef setADCChannel1(unsigned char channel){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	switch(channel) {
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b11      	cmp	r3, #17
 800090a:	d86f      	bhi.n	80009ec <setADCChannel1+0xf0>
 800090c:	a201      	add	r2, pc, #4	@ (adr r2, 8000914 <setADCChannel1+0x18>)
 800090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000912:	bf00      	nop
 8000914:	0800095d 	.word	0x0800095d
 8000918:	08000965 	.word	0x08000965
 800091c:	0800096d 	.word	0x0800096d
 8000920:	08000975 	.word	0x08000975
 8000924:	0800097d 	.word	0x0800097d
 8000928:	08000985 	.word	0x08000985
 800092c:	0800098d 	.word	0x0800098d
 8000930:	08000995 	.word	0x08000995
 8000934:	0800099d 	.word	0x0800099d
 8000938:	080009a5 	.word	0x080009a5
 800093c:	080009ad 	.word	0x080009ad
 8000940:	080009b5 	.word	0x080009b5
 8000944:	080009bd 	.word	0x080009bd
 8000948:	080009c5 	.word	0x080009c5
 800094c:	080009cd 	.word	0x080009cd
 8000950:	080009d5 	.word	0x080009d5
 8000954:	080009dd 	.word	0x080009dd
 8000958:	080009e5 	.word	0x080009e5
	       	case 0:
	            sConfig1.Channel = ADC_CHANNEL_0;
 800095c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <setADCChannel1+0x114>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
	            break;
 8000962:	e045      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 1:
	            sConfig1.Channel = ADC_CHANNEL_1;
 8000964:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <setADCChannel1+0x114>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
	            break;
 800096a:	e041      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 2:
	            sConfig1.Channel = ADC_CHANNEL_2;
 800096c:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <setADCChannel1+0x114>)
 800096e:	2202      	movs	r2, #2
 8000970:	601a      	str	r2, [r3, #0]
	            break;
 8000972:	e03d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 3:
	            sConfig1.Channel = ADC_CHANNEL_3;
 8000974:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <setADCChannel1+0x114>)
 8000976:	2203      	movs	r2, #3
 8000978:	601a      	str	r2, [r3, #0]
	            break;
 800097a:	e039      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 4:
	            sConfig1.Channel = ADC_CHANNEL_4;
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <setADCChannel1+0x114>)
 800097e:	2204      	movs	r2, #4
 8000980:	601a      	str	r2, [r3, #0]
	            break;
 8000982:	e035      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 5:
	            sConfig1.Channel = ADC_CHANNEL_5;
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <setADCChannel1+0x114>)
 8000986:	2205      	movs	r2, #5
 8000988:	601a      	str	r2, [r3, #0]
	            break;
 800098a:	e031      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 6:
	            sConfig1.Channel = ADC_CHANNEL_6;
 800098c:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <setADCChannel1+0x114>)
 800098e:	2206      	movs	r2, #6
 8000990:	601a      	str	r2, [r3, #0]
	            break;
 8000992:	e02d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 7:
	            sConfig1.Channel = ADC_CHANNEL_7;
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <setADCChannel1+0x114>)
 8000996:	2207      	movs	r2, #7
 8000998:	601a      	str	r2, [r3, #0]
	            break;
 800099a:	e029      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 8:
	            sConfig1.Channel = ADC_CHANNEL_8;
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <setADCChannel1+0x114>)
 800099e:	2208      	movs	r2, #8
 80009a0:	601a      	str	r2, [r3, #0]
	            break;
 80009a2:	e025      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 9:
	            sConfig1.Channel = ADC_CHANNEL_9;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <setADCChannel1+0x114>)
 80009a6:	2209      	movs	r2, #9
 80009a8:	601a      	str	r2, [r3, #0]
	            break;
 80009aa:	e021      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 10:
	            sConfig1.Channel = ADC_CHANNEL_10;
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <setADCChannel1+0x114>)
 80009ae:	220a      	movs	r2, #10
 80009b0:	601a      	str	r2, [r3, #0]
	            break;
 80009b2:	e01d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 11:
	            sConfig1.Channel = ADC_CHANNEL_11;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <setADCChannel1+0x114>)
 80009b6:	220b      	movs	r2, #11
 80009b8:	601a      	str	r2, [r3, #0]
	            break;
 80009ba:	e019      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 12:
	            sConfig1.Channel = ADC_CHANNEL_12;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <setADCChannel1+0x114>)
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
	            break;
 80009c2:	e015      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 13:
	            sConfig1.Channel = ADC_CHANNEL_13;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <setADCChannel1+0x114>)
 80009c6:	220d      	movs	r2, #13
 80009c8:	601a      	str	r2, [r3, #0]
	            break;
 80009ca:	e011      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 14:
	            sConfig1.Channel = ADC_CHANNEL_14;
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <setADCChannel1+0x114>)
 80009ce:	220e      	movs	r2, #14
 80009d0:	601a      	str	r2, [r3, #0]
	            break;
 80009d2:	e00d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 15:
	            sConfig1.Channel = ADC_CHANNEL_15;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <setADCChannel1+0x114>)
 80009d6:	220f      	movs	r2, #15
 80009d8:	601a      	str	r2, [r3, #0]
	            break;
 80009da:	e009      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 16:
	            sConfig1.Channel = ADC_CHANNEL_16;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <setADCChannel1+0x114>)
 80009de:	2210      	movs	r2, #16
 80009e0:	601a      	str	r2, [r3, #0]
	            break;
 80009e2:	e005      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 17:
	            sConfig1.Channel = ADC_CHANNEL_17;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <setADCChannel1+0x114>)
 80009e6:	2211      	movs	r2, #17
 80009e8:	601a      	str	r2, [r3, #0]
	            break;
 80009ea:	e001      	b.n	80009f0 <setADCChannel1+0xf4>
	        default:
	            return HAL_ERROR; // Canal inválido
 80009ec:	2301      	movs	r3, #1
 80009ee:	e00a      	b.n	8000a06 <setADCChannel1+0x10a>
	    }

	    sConfig1.Rank = ADC_REGULAR_RANK_1;
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <setADCChannel1+0x114>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	605a      	str	r2, [r3, #4]
	    sConfig1.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <setADCChannel1+0x114>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]

	    return HAL_ADC_ConfigChannel(&hadc1, &sConfig1);
 80009fc:	4904      	ldr	r1, [pc, #16]	@ (8000a10 <setADCChannel1+0x114>)
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <setADCChannel1+0x118>)
 8000a00:	f001 fdd8 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0

}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000e0 	.word	0x200000e0
 8000a14:	20000080 	.word	0x20000080

08000a18 <setADCChannel2>:

HAL_StatusTypeDef setADCChannel2(unsigned char channel){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	switch(channel) {
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b11      	cmp	r3, #17
 8000a26:	d86f      	bhi.n	8000b08 <setADCChannel2+0xf0>
 8000a28:	a201      	add	r2, pc, #4	@ (adr r2, 8000a30 <setADCChannel2+0x18>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a79 	.word	0x08000a79
 8000a34:	08000a81 	.word	0x08000a81
 8000a38:	08000a89 	.word	0x08000a89
 8000a3c:	08000a91 	.word	0x08000a91
 8000a40:	08000a99 	.word	0x08000a99
 8000a44:	08000aa1 	.word	0x08000aa1
 8000a48:	08000aa9 	.word	0x08000aa9
 8000a4c:	08000ab1 	.word	0x08000ab1
 8000a50:	08000ab9 	.word	0x08000ab9
 8000a54:	08000ac1 	.word	0x08000ac1
 8000a58:	08000ac9 	.word	0x08000ac9
 8000a5c:	08000ad1 	.word	0x08000ad1
 8000a60:	08000ad9 	.word	0x08000ad9
 8000a64:	08000ae1 	.word	0x08000ae1
 8000a68:	08000ae9 	.word	0x08000ae9
 8000a6c:	08000af1 	.word	0x08000af1
 8000a70:	08000af9 	.word	0x08000af9
 8000a74:	08000b01 	.word	0x08000b01
	        case 0:
	            sConfig2.Channel = ADC_CHANNEL_0;
 8000a78:	4b2c      	ldr	r3, [pc, #176]	@ (8000b2c <setADCChannel2+0x114>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
	            break;
 8000a7e:	e045      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 1:
	            sConfig2.Channel = ADC_CHANNEL_1;
 8000a80:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <setADCChannel2+0x114>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
	            break;
 8000a86:	e041      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 2:
	            sConfig2.Channel = ADC_CHANNEL_2;
 8000a88:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <setADCChannel2+0x114>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	601a      	str	r2, [r3, #0]
	            break;
 8000a8e:	e03d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 3:
	            sConfig2.Channel = ADC_CHANNEL_3;
 8000a90:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <setADCChannel2+0x114>)
 8000a92:	2203      	movs	r2, #3
 8000a94:	601a      	str	r2, [r3, #0]
	            break;
 8000a96:	e039      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 4:
	            sConfig2.Channel = ADC_CHANNEL_4;
 8000a98:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <setADCChannel2+0x114>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	601a      	str	r2, [r3, #0]
	            break;
 8000a9e:	e035      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 5:
	            sConfig2.Channel = ADC_CHANNEL_5;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <setADCChannel2+0x114>)
 8000aa2:	2205      	movs	r2, #5
 8000aa4:	601a      	str	r2, [r3, #0]
	            break;
 8000aa6:	e031      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 6:
	            sConfig2.Channel = ADC_CHANNEL_6;
 8000aa8:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <setADCChannel2+0x114>)
 8000aaa:	2206      	movs	r2, #6
 8000aac:	601a      	str	r2, [r3, #0]
	            break;
 8000aae:	e02d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 7:
	            sConfig2.Channel = ADC_CHANNEL_7;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <setADCChannel2+0x114>)
 8000ab2:	2207      	movs	r2, #7
 8000ab4:	601a      	str	r2, [r3, #0]
	            break;
 8000ab6:	e029      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 8:
	            sConfig2.Channel = ADC_CHANNEL_8;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <setADCChannel2+0x114>)
 8000aba:	2208      	movs	r2, #8
 8000abc:	601a      	str	r2, [r3, #0]
	            break;
 8000abe:	e025      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 9:
	            sConfig2.Channel = ADC_CHANNEL_9;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <setADCChannel2+0x114>)
 8000ac2:	2209      	movs	r2, #9
 8000ac4:	601a      	str	r2, [r3, #0]
	            break;
 8000ac6:	e021      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 10:
	            sConfig2.Channel = ADC_CHANNEL_10;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <setADCChannel2+0x114>)
 8000aca:	220a      	movs	r2, #10
 8000acc:	601a      	str	r2, [r3, #0]
	            break;
 8000ace:	e01d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 11:
	            sConfig2.Channel = ADC_CHANNEL_11;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <setADCChannel2+0x114>)
 8000ad2:	220b      	movs	r2, #11
 8000ad4:	601a      	str	r2, [r3, #0]
	            break;
 8000ad6:	e019      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 12:
	            sConfig2.Channel = ADC_CHANNEL_12;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <setADCChannel2+0x114>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
	            break;
 8000ade:	e015      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 13:
	            sConfig2.Channel = ADC_CHANNEL_13;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <setADCChannel2+0x114>)
 8000ae2:	220d      	movs	r2, #13
 8000ae4:	601a      	str	r2, [r3, #0]
	            break;
 8000ae6:	e011      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 14:
	            sConfig2.Channel = ADC_CHANNEL_14;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <setADCChannel2+0x114>)
 8000aea:	220e      	movs	r2, #14
 8000aec:	601a      	str	r2, [r3, #0]
	            break;
 8000aee:	e00d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 15:
	            sConfig2.Channel = ADC_CHANNEL_15;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <setADCChannel2+0x114>)
 8000af2:	220f      	movs	r2, #15
 8000af4:	601a      	str	r2, [r3, #0]
	            break;
 8000af6:	e009      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 16:
	            sConfig2.Channel = ADC_CHANNEL_16;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <setADCChannel2+0x114>)
 8000afa:	2210      	movs	r2, #16
 8000afc:	601a      	str	r2, [r3, #0]
	            break;
 8000afe:	e005      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 17:
	            sConfig2.Channel = ADC_CHANNEL_17;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <setADCChannel2+0x114>)
 8000b02:	2211      	movs	r2, #17
 8000b04:	601a      	str	r2, [r3, #0]
	            break;
 8000b06:	e001      	b.n	8000b0c <setADCChannel2+0xf4>
	        default:
	            return HAL_ERROR; // canal inválido
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e00a      	b.n	8000b22 <setADCChannel2+0x10a>
	    }

	    sConfig2.Rank = ADC_REGULAR_RANK_1;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <setADCChannel2+0x114>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	605a      	str	r2, [r3, #4]
	    sConfig2.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <setADCChannel2+0x114>)
 8000b14:	2205      	movs	r2, #5
 8000b16:	609a      	str	r2, [r3, #8]
	    return HAL_ADC_ConfigChannel(&hadc2, &sConfig2);
 8000b18:	4904      	ldr	r1, [pc, #16]	@ (8000b2c <setADCChannel2+0x114>)
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <setADCChannel2+0x118>)
 8000b1c:	f001 fd4a 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8000b20:	4603      	mov	r3, r0

}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000ec 	.word	0x200000ec
 8000b30:	200000b0 	.word	0x200000b0

08000b34 <readADCValue1>:

uint16_t readADCValue1(unsigned char channelNumber) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]

    if (setADCChannel1(channelNumber) != HAL_OK) {
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fedb 	bl	80008fc <setADCChannel1>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <readADCValue1+0x1e>
        return 0xFFFF;  // erro
 8000b4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b50:	e031      	b.n	8000bb6 <readADCValue1+0x82>
    }
    delay_us(1);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f000 f91a 	bl	8000d8c <delay_us>
    uint32_t sum=0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Start(&hadc1);
 8000b5c:	4818      	ldr	r0, [pc, #96]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b5e:	f001 fb3d 	bl	80021dc <HAL_ADC_Start>
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	72fb      	strb	r3, [r7, #11]
 8000b66:	e017      	b.n	8000b98 <readADCValue1+0x64>
    	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	4814      	ldr	r0, [pc, #80]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b6e:	f001 fc0f 	bl	8002390 <HAL_ADC_PollForConversion>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d005      	beq.n	8000b84 <readADCValue1+0x50>
    		HAL_ADC_Stop(&hadc1);
 8000b78:	4811      	ldr	r0, [pc, #68]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b7a:	f001 fbdd 	bl	8002338 <HAL_ADC_Stop>
    		return 0xFFFF;  // erro
 8000b7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b82:	e018      	b.n	8000bb6 <readADCValue1+0x82>
    	}
    	sum += HAL_ADC_GetValue(&hadc1);
 8000b84:	480e      	ldr	r0, [pc, #56]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b86:	f001 fd09 	bl	800259c <HAL_ADC_GetValue>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000b92:	7afb      	ldrb	r3, [r7, #11]
 8000b94:	3301      	adds	r3, #1
 8000b96:	72fb      	strb	r3, [r7, #11]
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <readADCValue1+0x90>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	7afa      	ldrb	r2, [r7, #11]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d3e2      	bcc.n	8000b68 <readADCValue1+0x34>
    }
    HAL_ADC_Stop(&hadc1);
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <readADCValue1+0x8c>)
 8000ba4:	f001 fbc8 	bl	8002338 <HAL_ADC_Stop>
    return (uint16_t)(sum / readings_qtt);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <readADCValue1+0x90>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bb4:	b29b      	uxth	r3, r3
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000080 	.word	0x20000080
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <readADCValue2>:

uint16_t readADCValue2(unsigned char channelNumber) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
    if (setADCChannel2(channelNumber) != HAL_OK) {
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff1f 	bl	8000a18 <setADCChannel2>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <readADCValue2+0x1e>
        return 0xFFFF;  // erro
 8000be0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be4:	e031      	b.n	8000c4a <readADCValue2+0x82>
    }
    delay_us(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f000 f8d0 	bl	8000d8c <delay_us>
    uint32_t sum=0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Start(&hadc2);
 8000bf0:	4818      	ldr	r0, [pc, #96]	@ (8000c54 <readADCValue2+0x8c>)
 8000bf2:	f001 faf3 	bl	80021dc <HAL_ADC_Start>
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	72fb      	strb	r3, [r7, #11]
 8000bfa:	e017      	b.n	8000c2c <readADCValue2+0x64>
        if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) != HAL_OK) {
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	4814      	ldr	r0, [pc, #80]	@ (8000c54 <readADCValue2+0x8c>)
 8000c02:	f001 fbc5 	bl	8002390 <HAL_ADC_PollForConversion>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d005      	beq.n	8000c18 <readADCValue2+0x50>
            HAL_ADC_Stop(&hadc2);
 8000c0c:	4811      	ldr	r0, [pc, #68]	@ (8000c54 <readADCValue2+0x8c>)
 8000c0e:	f001 fb93 	bl	8002338 <HAL_ADC_Stop>
            return 0xFFFF;
 8000c12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c16:	e018      	b.n	8000c4a <readADCValue2+0x82>
        }
        sum += HAL_ADC_GetValue(&hadc2);
 8000c18:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <readADCValue2+0x8c>)
 8000c1a:	f001 fcbf 	bl	800259c <HAL_ADC_GetValue>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000c26:	7afb      	ldrb	r3, [r7, #11]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	72fb      	strb	r3, [r7, #11]
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <readADCValue2+0x90>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	7afa      	ldrb	r2, [r7, #11]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d3e2      	bcc.n	8000bfc <readADCValue2+0x34>
    }
    HAL_ADC_Stop(&hadc2);
 8000c36:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <readADCValue2+0x8c>)
 8000c38:	f001 fb7e 	bl	8002338 <HAL_ADC_Stop>
    return (uint16_t)(sum / readings_qtt);
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <readADCValue2+0x90>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c48:	b29b      	uxth	r3, r3
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000b0 	.word	0x200000b0
 8000c58:	20000000 	.word	0x20000000

08000c5c <readSensor>:

uint16_t readSensor(unsigned char mux_pin, unsigned char index){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	unsigned char mux = mux_pin>>4;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	091b      	lsrs	r3, r3, #4
 8000c70:	737b      	strb	r3, [r7, #13]
	unsigned char porta  = mux_pin&0b1111;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	733b      	strb	r3, [r7, #12]
	_Bool s0 = porta&0b0001;
 8000c7a:	7b3b      	ldrb	r3, [r7, #12]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	bf14      	ite	ne
 8000c84:	2301      	movne	r3, #1
 8000c86:	2300      	moveq	r3, #0
 8000c88:	72fb      	strb	r3, [r7, #11]
	_Bool s1 = (porta&0b0010)>>1;
 8000c8a:	7b3b      	ldrb	r3, [r7, #12]
 8000c8c:	105b      	asrs	r3, r3, #1
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf14      	ite	ne
 8000c96:	2301      	movne	r3, #1
 8000c98:	2300      	moveq	r3, #0
 8000c9a:	72bb      	strb	r3, [r7, #10]
	_Bool s2 = (porta&0b0100)>>2;
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	109b      	asrs	r3, r3, #2
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf14      	ite	ne
 8000ca8:	2301      	movne	r3, #1
 8000caa:	2300      	moveq	r3, #0
 8000cac:	727b      	strb	r3, [r7, #9]
	_Bool s3 = (porta&0b1000)>>3;
 8000cae:	7b3b      	ldrb	r3, [r7, #12]
 8000cb0:	10db      	asrs	r3, r3, #3
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf14      	ite	ne
 8000cba:	2301      	movne	r3, #1
 8000cbc:	2300      	moveq	r3, #0
 8000cbe:	723b      	strb	r3, [r7, #8]

	HAL_GPIO_WritePin(EN1_GPIO, EN1_PIN, GPIO_PIN_SET); // EN1 (B4)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	482f      	ldr	r0, [pc, #188]	@ (8000d84 <readSensor+0x128>)
 8000cc6:	f002 fa9d 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO, EN2_PIN, GPIO_PIN_SET); // EN2 (B3)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2108      	movs	r1, #8
 8000cce:	482d      	ldr	r0, [pc, #180]	@ (8000d84 <readSensor+0x128>)
 8000cd0:	f002 fa98 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO, EN3_PIN, GPIO_PIN_SET); // EN3 (A15)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cda:	482b      	ldr	r0, [pc, #172]	@ (8000d88 <readSensor+0x12c>)
 8000cdc:	f002 fa92 	bl	8003204 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(S0_GPIO, S0_PIN, s0);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	2180      	movs	r1, #128	@ 0x80
 8000ce6:	4827      	ldr	r0, [pc, #156]	@ (8000d84 <readSensor+0x128>)
 8000ce8:	f002 fa8c 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S1_GPIO, S1_PIN, s1);
 8000cec:	7abb      	ldrb	r3, [r7, #10]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cf4:	4823      	ldr	r0, [pc, #140]	@ (8000d84 <readSensor+0x128>)
 8000cf6:	f002 fa85 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO, S2_PIN, s2);
 8000cfa:	7a7b      	ldrb	r3, [r7, #9]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	2120      	movs	r1, #32
 8000d00:	4820      	ldr	r0, [pc, #128]	@ (8000d84 <readSensor+0x128>)
 8000d02:	f002 fa7f 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO, S3_PIN, s3);
 8000d06:	7a3b      	ldrb	r3, [r7, #8]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2140      	movs	r1, #64	@ 0x40
 8000d0c:	481d      	ldr	r0, [pc, #116]	@ (8000d84 <readSensor+0x128>)
 8000d0e:	f002 fa79 	bl	8003204 <HAL_GPIO_WritePin>

	uint16_t value;
	switch (mux) {
 8000d12:	7b7b      	ldrb	r3, [r7, #13]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d01c      	beq.n	8000d52 <readSensor+0xf6>
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	dc26      	bgt.n	8000d6a <readSensor+0x10e>
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d002      	beq.n	8000d26 <readSensor+0xca>
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d00b      	beq.n	8000d3c <readSensor+0xe0>
	        case 3:
	            HAL_GPIO_WritePin(EN3_GPIO, EN3_PIN, GPIO_PIN_RESET); // Ativa EN3 (A15)
	            value = readADCValue1(3);
	            break;
	        default:
	            break;
 8000d24:	e021      	b.n	8000d6a <readSensor+0x10e>
	            HAL_GPIO_WritePin(EN1_GPIO, EN1_PIN, GPIO_PIN_RESET); // Ativa EN1 (B4)
 8000d26:	2200      	movs	r2, #0
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4816      	ldr	r0, [pc, #88]	@ (8000d84 <readSensor+0x128>)
 8000d2c:	f002 fa6a 	bl	8003204 <HAL_GPIO_WritePin>
	            value = readADCValue1(1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff feff 	bl	8000b34 <readADCValue1>
 8000d36:	4603      	mov	r3, r0
 8000d38:	81fb      	strh	r3, [r7, #14]
	            break;
 8000d3a:	e017      	b.n	8000d6c <readSensor+0x110>
	            HAL_GPIO_WritePin(EN2_GPIO, EN2_PIN, GPIO_PIN_RESET); // Ativa EN2 (B3)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2108      	movs	r1, #8
 8000d40:	4810      	ldr	r0, [pc, #64]	@ (8000d84 <readSensor+0x128>)
 8000d42:	f002 fa5f 	bl	8003204 <HAL_GPIO_WritePin>
	            value = readADCValue1(2);
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff fef4 	bl	8000b34 <readADCValue1>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	81fb      	strh	r3, [r7, #14]
	            break;
 8000d50:	e00c      	b.n	8000d6c <readSensor+0x110>
	            HAL_GPIO_WritePin(EN3_GPIO, EN3_PIN, GPIO_PIN_RESET); // Ativa EN3 (A15)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d58:	480b      	ldr	r0, [pc, #44]	@ (8000d88 <readSensor+0x12c>)
 8000d5a:	f002 fa53 	bl	8003204 <HAL_GPIO_WritePin>
	            value = readADCValue1(3);
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f7ff fee8 	bl	8000b34 <readADCValue1>
 8000d64:	4603      	mov	r3, r0
 8000d66:	81fb      	strh	r3, [r7, #14]
	            break;
 8000d68:	e000      	b.n	8000d6c <readSensor+0x110>
	            break;
 8000d6a:	bf00      	nop
	    }
	return returnAvgData(value,index);
 8000d6c:	79ba      	ldrb	r2, [r7, #6]
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f826 	bl	8000dc4 <returnAvgData>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40010c00 	.word	0x40010c00
 8000d88:	40010800 	.word	0x40010800

08000d8c <delay_us>:

void delay_us(unsigned short us)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <delay_us+0x34>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim1);
 8000d9e:	4808      	ldr	r0, [pc, #32]	@ (8000dc0 <delay_us+0x34>)
 8000da0:	f003 f844 	bl	8003e2c <HAL_TIM_Base_Start>

    while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000da4:	bf00      	nop
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <delay_us+0x34>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3f9      	bcc.n	8000da6 <delay_us+0x1a>

    HAL_TIM_Base_Stop(&htim1);
 8000db2:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <delay_us+0x34>)
 8000db4:	f003 f884 	bl	8003ec0 <HAL_TIM_Base_Stop>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200004fc 	.word	0x200004fc

08000dc4 <returnAvgData>:

uint16_t returnAvgData(uint16_t data, uint8_t index){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	460a      	mov	r2, r1
 8000dce:	80fb      	strh	r3, [r7, #6]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	717b      	strb	r3, [r7, #5]
	uint8_t weight = 3;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	743b      	strb	r3, [r7, #16]
	uint32_t sum=data*weight;
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	7c3a      	ldrb	r2, [r7, #16]
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
  float factor = 0.95;
 8000de2:	4b64      	ldr	r3, [pc, #400]	@ (8000f74 <returnAvgData+0x1b0>)
 8000de4:	60fb      	str	r3, [r7, #12]
	uint8_t n = weight;
 8000de6:	7c3b      	ldrb	r3, [r7, #16]
 8000de8:	74fb      	strb	r3, [r7, #19]
	for (uint8_t i=0;i<sensor_buffer_size;i++){
 8000dea:	2300      	movs	r3, #0
 8000dec:	74bb      	strb	r3, [r7, #18]
 8000dee:	e082      	b.n	8000ef6 <returnAvgData+0x132>
		if (sensorData[index][i]==0xFFFF){
 8000df0:	797a      	ldrb	r2, [r7, #5]
 8000df2:	7cb9      	ldrb	r1, [r7, #18]
 8000df4:	4860      	ldr	r0, [pc, #384]	@ (8000f78 <returnAvgData+0x1b4>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	440b      	add	r3, r1
 8000e00:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d115      	bne.n	8000e38 <returnAvgData+0x74>
			sensorData[index][i]=data;
 8000e0c:	797a      	ldrb	r2, [r7, #5]
 8000e0e:	7cb9      	ldrb	r1, [r7, #18]
 8000e10:	4859      	ldr	r0, [pc, #356]	@ (8000f78 <returnAvgData+0x1b4>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	440b      	add	r3, r1
 8000e1c:	88fa      	ldrh	r2, [r7, #6]
 8000e1e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			return sensorData[index][i];
 8000e22:	797a      	ldrb	r2, [r7, #5]
 8000e24:	7cb9      	ldrb	r1, [r7, #18]
 8000e26:	4854      	ldr	r0, [pc, #336]	@ (8000f78 <returnAvgData+0x1b4>)
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	440b      	add	r3, r1
 8000e32:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e36:	e099      	b.n	8000f6c <returnAvgData+0x1a8>
		}
		else{
      if (sensorData[index][i]>(factor*data)&&sensorData[index][i]<((1+(1-factor))*data)){
 8000e38:	797a      	ldrb	r2, [r7, #5]
 8000e3a:	7cb9      	ldrb	r1, [r7, #18]
 8000e3c:	484e      	ldr	r0, [pc, #312]	@ (8000f78 <returnAvgData+0x1b4>)
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	440b      	add	r3, r1
 8000e48:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fa39 	bl	80002c4 <__aeabi_i2f>
 8000e52:	4604      	mov	r4, r0
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fa34 	bl	80002c4 <__aeabi_i2f>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	68f9      	ldr	r1, [r7, #12]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fa83 	bl	800036c <__aeabi_fmul>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f7ff fc3a 	bl	80006e4 <__aeabi_fcmpgt>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d03c      	beq.n	8000ef0 <returnAvgData+0x12c>
 8000e76:	797a      	ldrb	r2, [r7, #5]
 8000e78:	7cb9      	ldrb	r1, [r7, #18]
 8000e7a:	483f      	ldr	r0, [pc, #252]	@ (8000f78 <returnAvgData+0x1b4>)
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	440b      	add	r3, r1
 8000e86:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fa1a 	bl	80002c4 <__aeabi_i2f>
 8000e90:	4604      	mov	r4, r0
 8000e92:	68f9      	ldr	r1, [r7, #12]
 8000e94:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000e98:	f7ff f95e 	bl	8000158 <__aeabi_fsub>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff f95a 	bl	800015c <__addsf3>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461d      	mov	r5, r3
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fa08 	bl	80002c4 <__aeabi_i2f>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4628      	mov	r0, r5
 8000eba:	f7ff fa57 	bl	800036c <__aeabi_fmul>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff fbf0 	bl	80006a8 <__aeabi_fcmplt>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d010      	beq.n	8000ef0 <returnAvgData+0x12c>
			sum = sum+sensorData[index][i];
 8000ece:	797a      	ldrb	r2, [r7, #5]
 8000ed0:	7cb9      	ldrb	r1, [r7, #18]
 8000ed2:	4829      	ldr	r0, [pc, #164]	@ (8000f78 <returnAvgData+0x1b4>)
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	440b      	add	r3, r1
 8000ede:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]
			n++;
 8000eea:	7cfb      	ldrb	r3, [r7, #19]
 8000eec:	3301      	adds	r3, #1
 8000eee:	74fb      	strb	r3, [r7, #19]
	for (uint8_t i=0;i<sensor_buffer_size;i++){
 8000ef0:	7cbb      	ldrb	r3, [r7, #18]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	74bb      	strb	r3, [r7, #18]
 8000ef6:	7cbb      	ldrb	r3, [r7, #18]
 8000ef8:	2b09      	cmp	r3, #9
 8000efa:	f67f af79 	bls.w	8000df0 <returnAvgData+0x2c>
      }
		}
	}
  for (uint8_t i=0;i<sensor_buffer_size-1;i++){
 8000efe:	2300      	movs	r3, #0
 8000f00:	747b      	strb	r3, [r7, #17]
 8000f02:	e018      	b.n	8000f36 <returnAvgData+0x172>
    sensorData[index][i]=sensorData[index][i+1];
 8000f04:	7979      	ldrb	r1, [r7, #5]
 8000f06:	7c7b      	ldrb	r3, [r7, #17]
 8000f08:	1c5c      	adds	r4, r3, #1
 8000f0a:	797a      	ldrb	r2, [r7, #5]
 8000f0c:	7c78      	ldrb	r0, [r7, #17]
 8000f0e:	4d1a      	ldr	r5, [pc, #104]	@ (8000f78 <returnAvgData+0x1b4>)
 8000f10:	460b      	mov	r3, r1
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4423      	add	r3, r4
 8000f1a:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8000f1e:	4916      	ldr	r1, [pc, #88]	@ (8000f78 <returnAvgData+0x1b4>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4403      	add	r3, r0
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint8_t i=0;i<sensor_buffer_size-1;i++){
 8000f30:	7c7b      	ldrb	r3, [r7, #17]
 8000f32:	3301      	adds	r3, #1
 8000f34:	747b      	strb	r3, [r7, #17]
 8000f36:	7c7b      	ldrb	r3, [r7, #17]
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d9e3      	bls.n	8000f04 <returnAvgData+0x140>
  }
	sensorData[index][sensor_buffer_size-1]=sum/n;
 8000f3c:	7cfb      	ldrb	r3, [r7, #19]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f44:	797a      	ldrb	r2, [r7, #5]
 8000f46:	b298      	uxth	r0, r3
 8000f48:	490b      	ldr	r1, [pc, #44]	@ (8000f78 <returnAvgData+0x1b4>)
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	3312      	adds	r3, #18
 8000f56:	4602      	mov	r2, r0
 8000f58:	801a      	strh	r2, [r3, #0]
	return sensorData[index][sensor_buffer_size-1];
 8000f5a:	797a      	ldrb	r2, [r7, #5]
 8000f5c:	4906      	ldr	r1, [pc, #24]	@ (8000f78 <returnAvgData+0x1b4>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	3312      	adds	r3, #18
 8000f6a:	881b      	ldrh	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bdb0      	pop	{r4, r5, r7, pc}
 8000f74:	3f733333 	.word	0x3f733333
 8000f78:	200000f8 	.word	0x200000f8

08000f7c <setAvgDataEmpty>:

void setAvgDataEmpty(){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<sensor_qtt;i++){
 8000f82:	2300      	movs	r3, #0
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e017      	b.n	8000fb8 <setAvgDataEmpty+0x3c>
		for (uint8_t j=0;j<sensor_buffer_size;j++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	71bb      	strb	r3, [r7, #6]
 8000f8c:	e00e      	b.n	8000fac <setAvgDataEmpty+0x30>
			sensorData[i][j]=0xFFFF;
 8000f8e:	79fa      	ldrb	r2, [r7, #7]
 8000f90:	79b9      	ldrb	r1, [r7, #6]
 8000f92:	480e      	ldr	r0, [pc, #56]	@ (8000fcc <setAvgDataEmpty+0x50>)
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fa2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (uint8_t j=0;j<sensor_buffer_size;j++){
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	71bb      	strb	r3, [r7, #6]
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	2b09      	cmp	r3, #9
 8000fb0:	d9ed      	bls.n	8000f8e <setAvgDataEmpty+0x12>
	for (uint8_t i=0;i<sensor_qtt;i++){
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b24      	cmp	r3, #36	@ 0x24
 8000fbc:	d9e4      	bls.n	8000f88 <setAvgDataEmpty+0xc>
		}
	}
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200000f8 	.word	0x200000f8

08000fd0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_CAN_Init+0x64>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <MX_CAN_Init+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_CAN_Init+0x64>)
 8000fdc:	2208      	movs	r2, #8
 8000fde:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_CAN_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_CAN_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_CAN_Init+0x64>)
 8000fee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ff2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_CAN_Init+0x64>)
 8000ff6:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000ffa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <MX_CAN_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_CAN_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <MX_CAN_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_CAN_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <MX_CAN_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_CAN_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_CAN_Init+0x64>)
 8001022:	f001 fc5a 	bl	80028da <HAL_CAN_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800102c:	f000 fd80 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200003dc 	.word	0x200003dc
 8001038:	40006400 	.word	0x40006400

0800103c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a1c      	ldr	r2, [pc, #112]	@ (80010c8 <HAL_CAN_MspInit+0x8c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d131      	bne.n	80010c0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <HAL_CAN_MspInit+0x90>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	4a1a      	ldr	r2, [pc, #104]	@ (80010cc <HAL_CAN_MspInit+0x90>)
 8001062:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001066:	61d3      	str	r3, [r2, #28]
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <HAL_CAN_MspInit+0x90>)
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_CAN_MspInit+0x90>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <HAL_CAN_MspInit+0x90>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_CAN_MspInit+0x90>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800108c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001090:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	480b      	ldr	r0, [pc, #44]	@ (80010d0 <HAL_CAN_MspInit+0x94>)
 80010a2:	f001 ff2b 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4619      	mov	r1, r3
 80010ba:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <HAL_CAN_MspInit+0x94>)
 80010bc:	f001 ff1e 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40006400 	.word	0x40006400
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010800 	.word	0x40010800

080010d4 <sendCANString>:


const unsigned char DEBUG_ID = 0x7B;
const unsigned char DEBUG_DLC = 8;

HAL_StatusTypeDef sendCANString(const char* message){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	@ 0x38
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	unsigned long txMailbox;
	unsigned char txData[8];
	
	HAL_StatusTypeDef status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	
	txHeader.StdId = DEBUG_ID;
 80010e2:	237b      	movs	r3, #123	@ 0x7b
 80010e4:	61bb      	str	r3, [r7, #24]
    txHeader.ExtId = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    txHeader.IDE = CAN_ID_STD;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
    txHeader.RTR = CAN_RTR_DATA;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = DEBUG_DLC;
 80010f2:	2308      	movs	r3, #8
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.TransmitGlobalTime = DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	
	unsigned char len = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while (1) {
        if (message[len] == '\0') {
 8001102:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d109      	bne.n	8001124 <sendCANString+0x50>
        	  len++;
 8001110:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001114:	3301      	adds	r3, #1
 8001116:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
              break;
 800111a:	bf00      	nop
        }
        len++;
    }
	
	for (unsigned char i = 0; i < len; i += 8) {
 800111c:	2300      	movs	r3, #0
 800111e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001122:	e060      	b.n	80011e6 <sendCANString+0x112>
        len++;
 8001124:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001128:	3301      	adds	r3, #1
 800112a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if (message[len] == '\0') {
 800112e:	e7e8      	b.n	8001102 <sendCANString+0x2e>
        txHeader.DLC = (len - i > 8) ? 8 : (len - i);
 8001130:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001134:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b08      	cmp	r3, #8
 800113c:	bfa8      	it	ge
 800113e:	2308      	movge	r3, #8
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (unsigned char j = 0; j < 8; j++) {
 8001142:	2300      	movs	r3, #0
 8001144:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001148:	e00b      	b.n	8001162 <sendCANString+0x8e>
            txData[j] = 0;
 800114a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800114e:	3338      	adds	r3, #56	@ 0x38
 8001150:	443b      	add	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	f803 2c2c 	strb.w	r2, [r3, #-44]
        for (unsigned char j = 0; j < 8; j++) {
 8001158:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800115c:	3301      	adds	r3, #1
 800115e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001162:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001166:	2b07      	cmp	r3, #7
 8001168:	d9ef      	bls.n	800114a <sendCANString+0x76>
        }
        for (unsigned char j = 0; j < txHeader.DLC; j++) {
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001170:	e013      	b.n	800119a <sendCANString+0xc6>
            txData[j] = message[i + j];
 8001172:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001176:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800117a:	4413      	add	r3, r2
 800117c:	461a      	mov	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	441a      	add	r2, r3
 8001182:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001186:	7812      	ldrb	r2, [r2, #0]
 8001188:	3338      	adds	r3, #56	@ 0x38
 800118a:	443b      	add	r3, r7
 800118c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        for (unsigned char j = 0; j < txHeader.DLC; j++) {
 8001190:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001194:	3301      	adds	r3, #1
 8001196:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800119a:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800119e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d3e6      	bcc.n	8001172 <sendCANString+0x9e>
        }
        status = HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	f107 020c 	add.w	r2, r7, #12
 80011ac:	f107 0118 	add.w	r1, r7, #24
 80011b0:	4812      	ldr	r0, [pc, #72]	@ (80011fc <sendCANString+0x128>)
 80011b2:	f001 fcd1 	bl	8002b58 <HAL_CAN_AddTxMessage>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (status != HAL_OK) {
 80011bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <sendCANString+0xf6>
            return status;
 80011c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011c8:	e014      	b.n	80011f4 <sendCANString+0x120>
        }
        while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox));
 80011ca:	bf00      	nop
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	4619      	mov	r1, r3
 80011d0:	480a      	ldr	r0, [pc, #40]	@ (80011fc <sendCANString+0x128>)
 80011d2:	f001 fd90 	bl	8002cf6 <HAL_CAN_IsTxMessagePending>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f7      	bne.n	80011cc <sendCANString+0xf8>
	for (unsigned char i = 0; i < len; i += 8) {
 80011dc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80011e0:	3308      	adds	r3, #8
 80011e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80011e6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80011ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d39e      	bcc.n	8001130 <sendCANString+0x5c>
    }
	return HAL_OK;
 80011f2:	2300      	movs	r3, #0

}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3738      	adds	r7, #56	@ 0x38
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200003dc 	.word	0x200003dc

08001200 <sendCANData>:


HAL_StatusTypeDef sendCANData(unsigned char message[8], unsigned char CAN_ID, unsigned char CAN_DLC){
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
 800120c:	4613      	mov	r3, r2
 800120e:	70bb      	strb	r3, [r7, #2]
	CAN_TxHeaderTypeDef txHeader;
	unsigned long txMailbox;

	HAL_StatusTypeDef status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	txHeader.StdId = CAN_ID;
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	60fb      	str	r3, [r7, #12]
    txHeader.ExtId = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
    txHeader.IDE = CAN_ID_STD;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
    txHeader.RTR = CAN_RTR_DATA;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
    txHeader.DLC = CAN_DLC;
 8001226:	78bb      	ldrb	r3, [r7, #2]
 8001228:	61fb      	str	r3, [r7, #28]
    txHeader.TransmitGlobalTime = DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3020 	strb.w	r3, [r7, #32]

    status = HAL_CAN_AddTxMessage(&hcan, &txHeader, message, &txMailbox);
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	f107 010c 	add.w	r1, r7, #12
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	480d      	ldr	r0, [pc, #52]	@ (8001270 <sendCANData+0x70>)
 800123c:	f001 fc8c 	bl	8002b58 <HAL_CAN_AddTxMessage>
 8001240:	4603      	mov	r3, r0
 8001242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8001246:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <sendCANData+0x54>
        return status;
 800124e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001252:	e009      	b.n	8001268 <sendCANData+0x68>
    }
    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){}
 8001254:	bf00      	nop
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	4619      	mov	r1, r3
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <sendCANData+0x70>)
 800125c:	f001 fd4b 	bl	8002cf6 <HAL_CAN_IsTxMessagePending>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f7      	bne.n	8001256 <sendCANData+0x56>
	return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3728      	adds	r7, #40	@ 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200003dc 	.word	0x200003dc

08001274 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	setAvgDataEmpty();
 8001278:	f7ff fe80 	bl	8000f7c <setAvgDataEmpty>
	hal_message=setupSensors();
 800127c:	f000 fc5e 	bl	8001b3c <setupSensors>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <MX_FREERTOS_Init+0x8c>)
 8001286:	701a      	strb	r2, [r3, #0]

	Message_Debug_Time = HAL_GetTick();
 8001288:	f000 fec6 	bl	8002018 <HAL_GetTick>
 800128c:	4603      	mov	r3, r0
 800128e:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <MX_FREERTOS_Init+0x90>)
 8001290:	6013      	str	r3, [r2, #0]

	DATA_01.time = HAL_GetTick();
 8001292:	f000 fec1 	bl	8002018 <HAL_GetTick>
 8001296:	4603      	mov	r3, r0
 8001298:	4a1b      	ldr	r2, [pc, #108]	@ (8001308 <MX_FREERTOS_Init+0x94>)
 800129a:	6013      	str	r3, [r2, #0]
	DATA_02.time = HAL_GetTick();
 800129c:	f000 febc 	bl	8002018 <HAL_GetTick>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a1a      	ldr	r2, [pc, #104]	@ (800130c <MX_FREERTOS_Init+0x98>)
 80012a4:	6013      	str	r3, [r2, #0]
	DATA_03.time = HAL_GetTick();
 80012a6:	f000 feb7 	bl	8002018 <HAL_GetTick>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a18      	ldr	r2, [pc, #96]	@ (8001310 <MX_FREERTOS_Init+0x9c>)
 80012ae:	6013      	str	r3, [r2, #0]
	DATA_04.time = HAL_GetTick();
 80012b0:	f000 feb2 	bl	8002018 <HAL_GetTick>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <MX_FREERTOS_Init+0xa0>)
 80012b8:	6013      	str	r3, [r2, #0]
	DATA_05.time = HAL_GetTick();
 80012ba:	f000 fead 	bl	8002018 <HAL_GetTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a15      	ldr	r2, [pc, #84]	@ (8001318 <MX_FREERTOS_Init+0xa4>)
 80012c2:	6013      	str	r3, [r2, #0]
	DATA_06.time = HAL_GetTick();
 80012c4:	f000 fea8 	bl	8002018 <HAL_GetTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a14      	ldr	r2, [pc, #80]	@ (800131c <MX_FREERTOS_Init+0xa8>)
 80012cc:	6013      	str	r3, [r2, #0]
	DATA_07.time = HAL_GetTick();
 80012ce:	f000 fea3 	bl	8002018 <HAL_GetTick>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <MX_FREERTOS_Init+0xac>)
 80012d6:	6013      	str	r3, [r2, #0]
	DATA_08.time = HAL_GetTick();
 80012d8:	f000 fe9e 	bl	8002018 <HAL_GetTick>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a11      	ldr	r2, [pc, #68]	@ (8001324 <MX_FREERTOS_Init+0xb0>)
 80012e0:	6013      	str	r3, [r2, #0]
	DATA_09.time = HAL_GetTick();
 80012e2:	f000 fe99 	bl	8002018 <HAL_GetTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001328 <MX_FREERTOS_Init+0xb4>)
 80012ea:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensor_Task */
  sensor_TaskHandle = osThreadNew(sensorTask, NULL, &sensor_Task_attributes);
 80012ec:	4a0f      	ldr	r2, [pc, #60]	@ (800132c <MX_FREERTOS_Init+0xb8>)
 80012ee:	2100      	movs	r1, #0
 80012f0:	480f      	ldr	r0, [pc, #60]	@ (8001330 <MX_FREERTOS_Init+0xbc>)
 80012f2:	f003 fa39 	bl	8004768 <osThreadNew>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001334 <MX_FREERTOS_Init+0xc0>)
 80012fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000404 	.word	0x20000404
 8001304:	20000410 	.word	0x20000410
 8001308:	20000414 	.word	0x20000414
 800130c:	20000424 	.word	0x20000424
 8001310:	20000434 	.word	0x20000434
 8001314:	20000444 	.word	0x20000444
 8001318:	20000454 	.word	0x20000454
 800131c:	20000464 	.word	0x20000464
 8001320:	20000474 	.word	0x20000474
 8001324:	20000484 	.word	0x20000484
 8001328:	20000494 	.word	0x20000494
 800132c:	080073cc 	.word	0x080073cc
 8001330:	08001339 	.word	0x08001339
 8001334:	20000408 	.word	0x20000408

08001338 <sensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensorTask */
void sensorTask(void *argument)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorTask */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001340:	f004 fbd8 	bl	8005af4 <xTaskGetTickCount>
 8001344:	4603      	mov	r3, r0
 8001346:	61fb      	str	r3, [r7, #28]
	uint16_t adc_value;
	char value[20];
  /* Infinite loop */
  for(;;)
  {
	RTOS_Time = HAL_GetTick();
 8001348:	f000 fe66 	bl	8002018 <HAL_GetTick>
 800134c:	6278      	str	r0, [r7, #36]	@ 0x24
	uint16_t v_ref = returnAvgData(readADCValue1(VREF_PIN),V_Ref_index);
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fbf0 	bl	8000b34 <readADCValue1>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b60      	ldr	r3, [pc, #384]	@ (80014dc <sensorTask+0x1a4>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f7ff fd30 	bl	8000dc4 <returnAvgData>
 8001364:	4603      	mov	r3, r0
 8001366:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t data;
	if (RTOS_Time - Message_Debug_Time >= MESSAGE_DEBUG_REFRESH_RATE) {
 8001368:	4b5d      	ldr	r3, [pc, #372]	@ (80014e0 <sensorTask+0x1a8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	4a5c      	ldr	r2, [pc, #368]	@ (80014e4 <sensorTask+0x1ac>)
 8001372:	8812      	ldrh	r2, [r2, #0]
 8001374:	4293      	cmp	r3, r2
 8001376:	d302      	bcc.n	800137e <sensorTask+0x46>
		Message_Debug_Time = RTOS_Time;
 8001378:	4a59      	ldr	r2, [pc, #356]	@ (80014e0 <sensorTask+0x1a8>)
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	6013      	str	r3, [r2, #0]
		//sprintf(value, "%u$", adc_value);
		//sprintf(value, "%u$", v_ref);
		//hal_message = sendCANString(value);
		}

	if (RTOS_Time - DATA_01.time >= DATA_01.refresh_rate) {
 800137e:	4b5a      	ldr	r3, [pc, #360]	@ (80014e8 <sensorTask+0x1b0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	4a58      	ldr	r2, [pc, #352]	@ (80014e8 <sensorTask+0x1b0>)
 8001388:	7912      	ldrb	r2, [r2, #4]
 800138a:	4293      	cmp	r3, r2
 800138c:	f0c0 80c7 	bcc.w	800151e <sensorTask+0x1e6>
	    DATA_01.time = RTOS_Time;
 8001390:	4a55      	ldr	r2, [pc, #340]	@ (80014e8 <sensorTask+0x1b0>)
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	6013      	str	r3, [r2, #0]

	    data = vBatValue(returnAvgData(readADCValue2(VBAT_PIN),V_Bat_index));  // Tensao da Bateria
 8001396:	2004      	movs	r0, #4
 8001398:	f7ff fc16 	bl	8000bc8 <readADCValue2>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b52      	ldr	r3, [pc, #328]	@ (80014ec <sensorTask+0x1b4>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	4610      	mov	r0, r2
 80013a8:	f7ff fd0c 	bl	8000dc4 <returnAvgData>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fc66 	bl	8001c80 <vBatValue>
 80013b4:	4603      	mov	r3, r0
 80013b6:	843b      	strh	r3, [r7, #32]
	    DATA_01.data[0] = data&0xFF;
 80013b8:	8c3b      	ldrh	r3, [r7, #32]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b4a      	ldr	r3, [pc, #296]	@ (80014e8 <sensorTask+0x1b0>)
 80013be:	71da      	strb	r2, [r3, #7]
	    DATA_01.data[1] = (data>>8)&0x0F;
 80013c0:	8c3b      	ldrh	r3, [r7, #32]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b46      	ldr	r3, [pc, #280]	@ (80014e8 <sensorTask+0x1b0>)
 80013d0:	721a      	strb	r2, [r3, #8]

	    data = returnAvgData(readADCValue2(TEMP_PIN),Temp_index);  // Sensor de Temperatura Interno
 80013d2:	2006      	movs	r0, #6
 80013d4:	f7ff fbf8 	bl	8000bc8 <readADCValue2>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	4b44      	ldr	r3, [pc, #272]	@ (80014f0 <sensorTask+0x1b8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4610      	mov	r0, r2
 80013e4:	f7ff fcee 	bl	8000dc4 <returnAvgData>
 80013e8:	4603      	mov	r3, r0
 80013ea:	843b      	strh	r3, [r7, #32]
	    DATA_01.data[1]|=(data&0x0F)<<4;
 80013ec:	4b3e      	ldr	r3, [pc, #248]	@ (80014e8 <sensorTask+0x1b0>)
 80013ee:	7a1b      	ldrb	r3, [r3, #8]
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	8c3b      	ldrh	r3, [r7, #32]
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b39      	ldr	r3, [pc, #228]	@ (80014e8 <sensorTask+0x1b0>)
 8001402:	721a      	strb	r2, [r3, #8]
	    DATA_01.data[2] = (data>>4)&0xFF;
 8001404:	8c3b      	ldrh	r3, [r7, #32]
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	b29b      	uxth	r3, r3
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <sensorTask+0x1b0>)
 800140e:	725a      	strb	r2, [r3, #9]
	    DATA_01.data[3] = v_ref&0xFF;    // Tensao Referencia
 8001410:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <sensorTask+0x1b0>)
 8001416:	729a      	strb	r2, [r3, #10]
	    DATA_01.data[4] = (v_ref>>8)&0x0F;
 8001418:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	b29b      	uxth	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b30      	ldr	r3, [pc, #192]	@ (80014e8 <sensorTask+0x1b0>)
 8001428:	72da      	strb	r2, [r3, #11]
	    data = returnAvgData(readADCValue2(GEAR_PIN),Gear_index);  // Sensor de Marcha
 800142a:	2005      	movs	r0, #5
 800142c:	f7ff fbcc 	bl	8000bc8 <readADCValue2>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	4b2f      	ldr	r3, [pc, #188]	@ (80014f4 <sensorTask+0x1bc>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	4610      	mov	r0, r2
 800143c:	f7ff fcc2 	bl	8000dc4 <returnAvgData>
 8001440:	4603      	mov	r3, r0
 8001442:	843b      	strh	r3, [r7, #32]
	    if (data>3682){
 8001444:	8c3b      	ldrh	r3, [r7, #32]
 8001446:	f640 6262 	movw	r2, #3682	@ 0xe62
 800144a:	4293      	cmp	r3, r2
 800144c:	d907      	bls.n	800145e <sensorTask+0x126>
	    	DATA_01.data[4] |= (7<<4);
 800144e:	4b26      	ldr	r3, [pc, #152]	@ (80014e8 <sensorTask+0x1b0>)
 8001450:	7adb      	ldrb	r3, [r3, #11]
 8001452:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <sensorTask+0x1b0>)
 800145a:	72da      	strb	r2, [r3, #11]
 800145c:	e053      	b.n	8001506 <sensorTask+0x1ce>
	    	}
	    else if (data>2995){
 800145e:	8c3b      	ldrh	r3, [r7, #32]
 8001460:	f640 32b3 	movw	r2, #2995	@ 0xbb3
 8001464:	4293      	cmp	r3, r2
 8001466:	d907      	bls.n	8001478 <sensorTask+0x140>
	    	DATA_01.data[4] |= (1<<4);
 8001468:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <sensorTask+0x1b0>)
 800146a:	7adb      	ldrb	r3, [r3, #11]
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b1d      	ldr	r3, [pc, #116]	@ (80014e8 <sensorTask+0x1b0>)
 8001474:	72da      	strb	r2, [r3, #11]
 8001476:	e046      	b.n	8001506 <sensorTask+0x1ce>
	    }
	    else if (data>2432){
 8001478:	8c3b      	ldrh	r3, [r7, #32]
 800147a:	f5b3 6f18 	cmp.w	r3, #2432	@ 0x980
 800147e:	d907      	bls.n	8001490 <sensorTask+0x158>
	    	DATA_01.data[4] |= (2<<4);
 8001480:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <sensorTask+0x1b0>)
 8001482:	7adb      	ldrb	r3, [r3, #11]
 8001484:	f043 0320 	orr.w	r3, r3, #32
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <sensorTask+0x1b0>)
 800148c:	72da      	strb	r2, [r3, #11]
 800148e:	e03a      	b.n	8001506 <sensorTask+0x1ce>
	    }
	    else if (data>1852){
 8001490:	8c3b      	ldrh	r3, [r7, #32]
 8001492:	f240 723c 	movw	r2, #1852	@ 0x73c
 8001496:	4293      	cmp	r3, r2
 8001498:	d907      	bls.n	80014aa <sensorTask+0x172>
	    	DATA_01.data[4] |= (3<<4);
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <sensorTask+0x1b0>)
 800149c:	7adb      	ldrb	r3, [r3, #11]
 800149e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <sensorTask+0x1b0>)
 80014a6:	72da      	strb	r2, [r3, #11]
 80014a8:	e02d      	b.n	8001506 <sensorTask+0x1ce>
	    }
	    else if (data>1249){
 80014aa:	8c3b      	ldrh	r3, [r7, #32]
 80014ac:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d907      	bls.n	80014c4 <sensorTask+0x18c>
	    	DATA_01.data[4] |= (4<<4);
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <sensorTask+0x1b0>)
 80014b6:	7adb      	ldrb	r3, [r3, #11]
 80014b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <sensorTask+0x1b0>)
 80014c0:	72da      	strb	r2, [r3, #11]
 80014c2:	e020      	b.n	8001506 <sensorTask+0x1ce>
	    }
	    else if (data>672){
 80014c4:	8c3b      	ldrh	r3, [r7, #32]
 80014c6:	f5b3 7f28 	cmp.w	r3, #672	@ 0x2a0
 80014ca:	d915      	bls.n	80014f8 <sensorTask+0x1c0>
	    	DATA_01.data[4] |= (5<<4);
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <sensorTask+0x1b0>)
 80014ce:	7adb      	ldrb	r3, [r3, #11]
 80014d0:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <sensorTask+0x1b0>)
 80014d8:	72da      	strb	r2, [r3, #11]
 80014da:	e014      	b.n	8001506 <sensorTask+0x1ce>
 80014dc:	08007400 	.word	0x08007400
 80014e0:	20000410 	.word	0x20000410
 80014e4:	080073f2 	.word	0x080073f2
 80014e8:	20000414 	.word	0x20000414
 80014ec:	08007401 	.word	0x08007401
 80014f0:	08007402 	.word	0x08007402
 80014f4:	08007403 	.word	0x08007403
	    }
	    else {
	    	DATA_01.data[4] |= (6<<4);
 80014f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001770 <sensorTask+0x438>)
 80014fa:	7adb      	ldrb	r3, [r3, #11]
 80014fc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b9b      	ldr	r3, [pc, #620]	@ (8001770 <sensorTask+0x438>)
 8001504:	72da      	strb	r2, [r3, #11]
	    }
	    hal_message = sendCANData(DATA_01.data,DATA_01.id,DATA_01.dlc);
 8001506:	4b9a      	ldr	r3, [pc, #616]	@ (8001770 <sensorTask+0x438>)
 8001508:	795b      	ldrb	r3, [r3, #5]
 800150a:	4a99      	ldr	r2, [pc, #612]	@ (8001770 <sensorTask+0x438>)
 800150c:	7992      	ldrb	r2, [r2, #6]
 800150e:	4619      	mov	r1, r3
 8001510:	4898      	ldr	r0, [pc, #608]	@ (8001774 <sensorTask+0x43c>)
 8001512:	f7ff fe75 	bl	8001200 <sendCANData>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b97      	ldr	r3, [pc, #604]	@ (8001778 <sensorTask+0x440>)
 800151c:	701a      	strb	r2, [r3, #0]
	}

	if (RTOS_Time - DATA_02.time >= DATA_02.refresh_rate) {
 800151e:	4b97      	ldr	r3, [pc, #604]	@ (800177c <sensorTask+0x444>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	4a95      	ldr	r2, [pc, #596]	@ (800177c <sensorTask+0x444>)
 8001528:	7912      	ldrb	r2, [r2, #4]
 800152a:	4293      	cmp	r3, r2
 800152c:	f0c0 808c 	bcc.w	8001648 <sensorTask+0x310>
	    DATA_02.time = RTOS_Time;
 8001530:	4a92      	ldr	r2, [pc, #584]	@ (800177c <sensorTask+0x444>)
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	6013      	str	r3, [r2, #0]

	    data = readSensor(FR_Susp_Angle,FR_Susp_Angle_index);
 8001536:	4b92      	ldr	r3, [pc, #584]	@ (8001780 <sensorTask+0x448>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4a92      	ldr	r2, [pc, #584]	@ (8001784 <sensorTask+0x44c>)
 800153c:	7812      	ldrb	r2, [r2, #0]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fb8b 	bl	8000c5c <readSensor>
 8001546:	4603      	mov	r3, r0
 8001548:	843b      	strh	r3, [r7, #32]
	    DATA_02.data[0] = data&0xFF;;
 800154a:	8c3b      	ldrh	r3, [r7, #32]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b8b      	ldr	r3, [pc, #556]	@ (800177c <sensorTask+0x444>)
 8001550:	71da      	strb	r2, [r3, #7]
	    DATA_02.data[1] = (data>>8)&0xF;
 8001552:	8c3b      	ldrh	r3, [r7, #32]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	b29b      	uxth	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b86      	ldr	r3, [pc, #536]	@ (800177c <sensorTask+0x444>)
 8001562:	721a      	strb	r2, [r3, #8]

	    data = readSensor(FL_Susp_Angle,FL_Susp_Angle_index);
 8001564:	4b88      	ldr	r3, [pc, #544]	@ (8001788 <sensorTask+0x450>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4a88      	ldr	r2, [pc, #544]	@ (800178c <sensorTask+0x454>)
 800156a:	7812      	ldrb	r2, [r2, #0]
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fb74 	bl	8000c5c <readSensor>
 8001574:	4603      	mov	r3, r0
 8001576:	843b      	strh	r3, [r7, #32]
	    DATA_02.data[1] |= (data&0xF)<<4;
 8001578:	4b80      	ldr	r3, [pc, #512]	@ (800177c <sensorTask+0x444>)
 800157a:	7a1b      	ldrb	r3, [r3, #8]
 800157c:	b25a      	sxtb	r2, r3
 800157e:	8c3b      	ldrh	r3, [r7, #32]
 8001580:	b25b      	sxtb	r3, r3
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	b25b      	sxtb	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b25b      	sxtb	r3, r3
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b7b      	ldr	r3, [pc, #492]	@ (800177c <sensorTask+0x444>)
 800158e:	721a      	strb	r2, [r3, #8]
	    DATA_02.data[2] = (data>>4)&0xFF;
 8001590:	8c3b      	ldrh	r3, [r7, #32]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	b29b      	uxth	r3, r3
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b78      	ldr	r3, [pc, #480]	@ (800177c <sensorTask+0x444>)
 800159a:	725a      	strb	r2, [r3, #9]

	    data = readSensor(RR_Susp_Angle,RR_Susp_Angle_index);
 800159c:	4b7c      	ldr	r3, [pc, #496]	@ (8001790 <sensorTask+0x458>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4a7c      	ldr	r2, [pc, #496]	@ (8001794 <sensorTask+0x45c>)
 80015a2:	7812      	ldrb	r2, [r2, #0]
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb58 	bl	8000c5c <readSensor>
 80015ac:	4603      	mov	r3, r0
 80015ae:	843b      	strh	r3, [r7, #32]
	    DATA_02.data[3] = data&0xFF;;
 80015b0:	8c3b      	ldrh	r3, [r7, #32]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b71      	ldr	r3, [pc, #452]	@ (800177c <sensorTask+0x444>)
 80015b6:	729a      	strb	r2, [r3, #10]
	    DATA_02.data[4] = (data>>8)&0xF;
 80015b8:	8c3b      	ldrh	r3, [r7, #32]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b6d      	ldr	r3, [pc, #436]	@ (800177c <sensorTask+0x444>)
 80015c8:	72da      	strb	r2, [r3, #11]

	    data = readSensor(RL_Susp_Angle,RL_Susp_Angle_index);
 80015ca:	4b73      	ldr	r3, [pc, #460]	@ (8001798 <sensorTask+0x460>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4a73      	ldr	r2, [pc, #460]	@ (800179c <sensorTask+0x464>)
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fb41 	bl	8000c5c <readSensor>
 80015da:	4603      	mov	r3, r0
 80015dc:	843b      	strh	r3, [r7, #32]
	    DATA_02.data[4] |= (data&0xF)<<4;
 80015de:	4b67      	ldr	r3, [pc, #412]	@ (800177c <sensorTask+0x444>)
 80015e0:	7adb      	ldrb	r3, [r3, #11]
 80015e2:	b25a      	sxtb	r2, r3
 80015e4:	8c3b      	ldrh	r3, [r7, #32]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b62      	ldr	r3, [pc, #392]	@ (800177c <sensorTask+0x444>)
 80015f4:	72da      	strb	r2, [r3, #11]
	    DATA_02.data[5] = (data>>4)&0xFF;
 80015f6:	8c3b      	ldrh	r3, [r7, #32]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b5f      	ldr	r3, [pc, #380]	@ (800177c <sensorTask+0x444>)
 8001600:	731a      	strb	r2, [r3, #12]

	    data = readSensor(Wheel_Angle,Wheel_Angle_index);
 8001602:	4b67      	ldr	r3, [pc, #412]	@ (80017a0 <sensorTask+0x468>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4a67      	ldr	r2, [pc, #412]	@ (80017a4 <sensorTask+0x46c>)
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fb25 	bl	8000c5c <readSensor>
 8001612:	4603      	mov	r3, r0
 8001614:	843b      	strh	r3, [r7, #32]
	    DATA_02.data[6] = data&0xFF;;
 8001616:	8c3b      	ldrh	r3, [r7, #32]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b58      	ldr	r3, [pc, #352]	@ (800177c <sensorTask+0x444>)
 800161c:	735a      	strb	r2, [r3, #13]
	    DATA_02.data[7] = (data>>8)&0xF;
 800161e:	8c3b      	ldrh	r3, [r7, #32]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	b29b      	uxth	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b53      	ldr	r3, [pc, #332]	@ (800177c <sensorTask+0x444>)
 800162e:	739a      	strb	r2, [r3, #14]

	    hal_message = sendCANData(DATA_02.data,DATA_02.id,DATA_02.dlc);
 8001630:	4b52      	ldr	r3, [pc, #328]	@ (800177c <sensorTask+0x444>)
 8001632:	795b      	ldrb	r3, [r3, #5]
 8001634:	4a51      	ldr	r2, [pc, #324]	@ (800177c <sensorTask+0x444>)
 8001636:	7992      	ldrb	r2, [r2, #6]
 8001638:	4619      	mov	r1, r3
 800163a:	485b      	ldr	r0, [pc, #364]	@ (80017a8 <sensorTask+0x470>)
 800163c:	f7ff fde0 	bl	8001200 <sendCANData>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	4b4c      	ldr	r3, [pc, #304]	@ (8001778 <sensorTask+0x440>)
 8001646:	701a      	strb	r2, [r3, #0]
	}

	if (RTOS_Time - DATA_03.time >= DATA_03.refresh_rate) {
 8001648:	4b58      	ldr	r3, [pc, #352]	@ (80017ac <sensorTask+0x474>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	4a56      	ldr	r2, [pc, #344]	@ (80017ac <sensorTask+0x474>)
 8001652:	7912      	ldrb	r2, [r2, #4]
 8001654:	4293      	cmp	r3, r2
 8001656:	d374      	bcc.n	8001742 <sensorTask+0x40a>
	    DATA_03.time = RTOS_Time;
 8001658:	4a54      	ldr	r2, [pc, #336]	@ (80017ac <sensorTask+0x474>)
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	6013      	str	r3, [r2, #0]

	    data = readSensor(FR_Hall,FR_Hall_index);
 800165e:	4b54      	ldr	r3, [pc, #336]	@ (80017b0 <sensorTask+0x478>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4a54      	ldr	r2, [pc, #336]	@ (80017b4 <sensorTask+0x47c>)
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff faf7 	bl	8000c5c <readSensor>
 800166e:	4603      	mov	r3, r0
 8001670:	843b      	strh	r3, [r7, #32]
	    DATA_03.data[0] = data&0xFF;;
 8001672:	8c3b      	ldrh	r3, [r7, #32]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b4d      	ldr	r3, [pc, #308]	@ (80017ac <sensorTask+0x474>)
 8001678:	71da      	strb	r2, [r3, #7]
	    DATA_03.data[1] = (data>>8)&0xF;
 800167a:	8c3b      	ldrh	r3, [r7, #32]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	b29b      	uxth	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b48      	ldr	r3, [pc, #288]	@ (80017ac <sensorTask+0x474>)
 800168a:	721a      	strb	r2, [r3, #8]

	    data = readSensor(FL_Hall,FL_Hall_index);
 800168c:	4b4a      	ldr	r3, [pc, #296]	@ (80017b8 <sensorTask+0x480>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4a4a      	ldr	r2, [pc, #296]	@ (80017bc <sensorTask+0x484>)
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fae0 	bl	8000c5c <readSensor>
 800169c:	4603      	mov	r3, r0
 800169e:	843b      	strh	r3, [r7, #32]
	    DATA_03.data[1] |= (data&0xF)<<4;
 80016a0:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <sensorTask+0x474>)
 80016a2:	7a1b      	ldrb	r3, [r3, #8]
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	8c3b      	ldrh	r3, [r7, #32]
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <sensorTask+0x474>)
 80016b6:	721a      	strb	r2, [r3, #8]
	    DATA_03.data[2] = (data>>4)&0xFF;
 80016b8:	8c3b      	ldrh	r3, [r7, #32]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	b29b      	uxth	r3, r3
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b3a      	ldr	r3, [pc, #232]	@ (80017ac <sensorTask+0x474>)
 80016c2:	725a      	strb	r2, [r3, #9]

	    data = readSensor(RR_Hall,FL_Hall_index);
 80016c4:	4b3e      	ldr	r3, [pc, #248]	@ (80017c0 <sensorTask+0x488>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4a3c      	ldr	r2, [pc, #240]	@ (80017bc <sensorTask+0x484>)
 80016ca:	7812      	ldrb	r2, [r2, #0]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fac4 	bl	8000c5c <readSensor>
 80016d4:	4603      	mov	r3, r0
 80016d6:	843b      	strh	r3, [r7, #32]
	    DATA_03.data[3] = data&0xFF;;
 80016d8:	8c3b      	ldrh	r3, [r7, #32]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b33      	ldr	r3, [pc, #204]	@ (80017ac <sensorTask+0x474>)
 80016de:	729a      	strb	r2, [r3, #10]
	    DATA_03.data[4] = (data>>8)&0xF;
 80016e0:	8c3b      	ldrh	r3, [r7, #32]
 80016e2:	0a1b      	lsrs	r3, r3, #8
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b2f      	ldr	r3, [pc, #188]	@ (80017ac <sensorTask+0x474>)
 80016f0:	72da      	strb	r2, [r3, #11]

	    data = readSensor(RL_Hall,RL_Hall_index);
 80016f2:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <sensorTask+0x48c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	4a34      	ldr	r2, [pc, #208]	@ (80017c8 <sensorTask+0x490>)
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff faad 	bl	8000c5c <readSensor>
 8001702:	4603      	mov	r3, r0
 8001704:	843b      	strh	r3, [r7, #32]
	    DATA_03.data[4] |= (data&0xF)<<4;
 8001706:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <sensorTask+0x474>)
 8001708:	7adb      	ldrb	r3, [r3, #11]
 800170a:	b25a      	sxtb	r2, r3
 800170c:	8c3b      	ldrh	r3, [r7, #32]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	b25b      	sxtb	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b25b      	sxtb	r3, r3
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <sensorTask+0x474>)
 800171c:	72da      	strb	r2, [r3, #11]
	    DATA_03.data[5] = (data>>4)&0xFF;
 800171e:	8c3b      	ldrh	r3, [r7, #32]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	b29b      	uxth	r3, r3
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <sensorTask+0x474>)
 8001728:	731a      	strb	r2, [r3, #12]

	    hal_message = sendCANData(DATA_03.data,DATA_03.id,DATA_03.dlc);
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <sensorTask+0x474>)
 800172c:	795b      	ldrb	r3, [r3, #5]
 800172e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ac <sensorTask+0x474>)
 8001730:	7992      	ldrb	r2, [r2, #6]
 8001732:	4619      	mov	r1, r3
 8001734:	4825      	ldr	r0, [pc, #148]	@ (80017cc <sensorTask+0x494>)
 8001736:	f7ff fd63 	bl	8001200 <sendCANData>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <sensorTask+0x440>)
 8001740:	701a      	strb	r2, [r3, #0]
	}

	if (RTOS_Time - DATA_04.time >= DATA_04.refresh_rate) {
 8001742:	4b23      	ldr	r3, [pc, #140]	@ (80017d0 <sensorTask+0x498>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4a21      	ldr	r2, [pc, #132]	@ (80017d0 <sensorTask+0x498>)
 800174c:	7912      	ldrb	r2, [r2, #4]
 800174e:	4293      	cmp	r3, r2
 8001750:	d35d      	bcc.n	800180e <sensorTask+0x4d6>
	    DATA_04.time = RTOS_Time;
 8001752:	4a1f      	ldr	r2, [pc, #124]	@ (80017d0 <sensorTask+0x498>)
 8001754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001756:	6013      	str	r3, [r2, #0]

	    data = readSensor(Oil_Pressure,Oil_Pressure_index);
 8001758:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <sensorTask+0x49c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4a1e      	ldr	r2, [pc, #120]	@ (80017d8 <sensorTask+0x4a0>)
 800175e:	7812      	ldrb	r2, [r2, #0]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fa7a 	bl	8000c5c <readSensor>
 8001768:	4603      	mov	r3, r0
 800176a:	843b      	strh	r3, [r7, #32]
 800176c:	e036      	b.n	80017dc <sensorTask+0x4a4>
 800176e:	bf00      	nop
 8001770:	20000414 	.word	0x20000414
 8001774:	2000041b 	.word	0x2000041b
 8001778:	20000404 	.word	0x20000404
 800177c:	20000424 	.word	0x20000424
 8001780:	080073fb 	.word	0x080073fb
 8001784:	0800740a 	.word	0x0800740a
 8001788:	080073fc 	.word	0x080073fc
 800178c:	0800740b 	.word	0x0800740b
 8001790:	080073fd 	.word	0x080073fd
 8001794:	0800740c 	.word	0x0800740c
 8001798:	080073fe 	.word	0x080073fe
 800179c:	0800740d 	.word	0x0800740d
 80017a0:	080073f4 	.word	0x080073f4
 80017a4:	08007404 	.word	0x08007404
 80017a8:	2000042b 	.word	0x2000042b
 80017ac:	20000434 	.word	0x20000434
 80017b0:	080073f5 	.word	0x080073f5
 80017b4:	08007405 	.word	0x08007405
 80017b8:	080073f6 	.word	0x080073f6
 80017bc:	08007406 	.word	0x08007406
 80017c0:	080073f7 	.word	0x080073f7
 80017c4:	080073f8 	.word	0x080073f8
 80017c8:	08007407 	.word	0x08007407
 80017cc:	2000043b 	.word	0x2000043b
 80017d0:	20000444 	.word	0x20000444
 80017d4:	080073ff 	.word	0x080073ff
 80017d8:	0800740e 	.word	0x0800740e
	    DATA_04.data[0] = data&0xFF;;
 80017dc:	8c3b      	ldrh	r3, [r7, #32]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b4a      	ldr	r3, [pc, #296]	@ (800190c <sensorTask+0x5d4>)
 80017e2:	71da      	strb	r2, [r3, #7]
	    DATA_04.data[1] = (data>>8)&0xF;
 80017e4:	8c3b      	ldrh	r3, [r7, #32]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b46      	ldr	r3, [pc, #280]	@ (800190c <sensorTask+0x5d4>)
 80017f4:	721a      	strb	r2, [r3, #8]

	    //data = readSensor(Oil_Temp,Oil_Temp_index);
	    //DATA_04.data[1] |= (data&0xF)<<4;
	    //DATA_04.data[2] = (data>>4)&0xFF;

	    hal_message = sendCANData(DATA_04.data,DATA_04.id,DATA_04.dlc);
 80017f6:	4b45      	ldr	r3, [pc, #276]	@ (800190c <sensorTask+0x5d4>)
 80017f8:	795b      	ldrb	r3, [r3, #5]
 80017fa:	4a44      	ldr	r2, [pc, #272]	@ (800190c <sensorTask+0x5d4>)
 80017fc:	7992      	ldrb	r2, [r2, #6]
 80017fe:	4619      	mov	r1, r3
 8001800:	4843      	ldr	r0, [pc, #268]	@ (8001910 <sensorTask+0x5d8>)
 8001802:	f7ff fcfd 	bl	8001200 <sendCANData>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b42      	ldr	r3, [pc, #264]	@ (8001914 <sensorTask+0x5dc>)
 800180c:	701a      	strb	r2, [r3, #0]
	    DATA_05.data[5] = (data>>4)&0xFF;

	    hal_message = sendCANData(DATA_05.data,DATA_05.id,DATA_05.dlc);
	}*/

	if (RTOS_Time - DATA_06.time >= DATA_06.refresh_rate) {
 800180e:	4b42      	ldr	r3, [pc, #264]	@ (8001918 <sensorTask+0x5e0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	4a40      	ldr	r2, [pc, #256]	@ (8001918 <sensorTask+0x5e0>)
 8001818:	7912      	ldrb	r2, [r2, #4]
 800181a:	4293      	cmp	r3, r2
 800181c:	d34a      	bcc.n	80018b4 <sensorTask+0x57c>
	    DATA_06.time = RTOS_Time;
 800181e:	4a3e      	ldr	r2, [pc, #248]	@ (8001918 <sensorTask+0x5e0>)
 8001820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001822:	6013      	str	r3, [r2, #0]

	    data = readSensor(Brake_Pedal_Angle,Brake_Pedal_Angle_index);
	    DATA_06.data[1] |= (data&0xF)<<4;
	    DATA_06.data[2] = (data>>4)&0xFF;*/

	    DATA_06.data[0] = 0;
 8001824:	4b3c      	ldr	r3, [pc, #240]	@ (8001918 <sensorTask+0x5e0>)
 8001826:	2200      	movs	r2, #0
 8001828:	71da      	strb	r2, [r3, #7]
	    DATA_06.data[1] = 0;
 800182a:	4b3b      	ldr	r3, [pc, #236]	@ (8001918 <sensorTask+0x5e0>)
 800182c:	2200      	movs	r2, #0
 800182e:	721a      	strb	r2, [r3, #8]
	    DATA_06.data[2] = 0;
 8001830:	4b39      	ldr	r3, [pc, #228]	@ (8001918 <sensorTask+0x5e0>)
 8001832:	2200      	movs	r2, #0
 8001834:	725a      	strb	r2, [r3, #9]

	    data = readSensor(F_Brakeline_Pressure,F_Brakeline_Pressure_index);
 8001836:	4b39      	ldr	r3, [pc, #228]	@ (800191c <sensorTask+0x5e4>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	4a39      	ldr	r2, [pc, #228]	@ (8001920 <sensorTask+0x5e8>)
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa0b 	bl	8000c5c <readSensor>
 8001846:	4603      	mov	r3, r0
 8001848:	843b      	strh	r3, [r7, #32]
	    DATA_06.data[3] = data&0xFF;;
 800184a:	8c3b      	ldrh	r3, [r7, #32]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b32      	ldr	r3, [pc, #200]	@ (8001918 <sensorTask+0x5e0>)
 8001850:	729a      	strb	r2, [r3, #10]
	    DATA_06.data[4] = (data>>8)&0xF;
 8001852:	8c3b      	ldrh	r3, [r7, #32]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b29b      	uxth	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <sensorTask+0x5e0>)
 8001862:	72da      	strb	r2, [r3, #11]

	    data = readSensor(R_Brakeline_Pressure,R_Brakeline_Pressure_index);
 8001864:	4b2f      	ldr	r3, [pc, #188]	@ (8001924 <sensorTask+0x5ec>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4a2f      	ldr	r2, [pc, #188]	@ (8001928 <sensorTask+0x5f0>)
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f9f4 	bl	8000c5c <readSensor>
 8001874:	4603      	mov	r3, r0
 8001876:	843b      	strh	r3, [r7, #32]
	    DATA_06.data[4] |= (data&0xF)<<4;
 8001878:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <sensorTask+0x5e0>)
 800187a:	7adb      	ldrb	r3, [r3, #11]
 800187c:	b25a      	sxtb	r2, r3
 800187e:	8c3b      	ldrh	r3, [r7, #32]
 8001880:	b25b      	sxtb	r3, r3
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	b25b      	sxtb	r3, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	b25b      	sxtb	r3, r3
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <sensorTask+0x5e0>)
 800188e:	72da      	strb	r2, [r3, #11]
	    DATA_06.data[5] = (data>>4)&0xFF;
 8001890:	8c3b      	ldrh	r3, [r7, #32]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	b29b      	uxth	r3, r3
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b1f      	ldr	r3, [pc, #124]	@ (8001918 <sensorTask+0x5e0>)
 800189a:	731a      	strb	r2, [r3, #12]

	    hal_message = sendCANData(DATA_06.data,DATA_06.id,DATA_06.dlc);
 800189c:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <sensorTask+0x5e0>)
 800189e:	795b      	ldrb	r3, [r3, #5]
 80018a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <sensorTask+0x5e0>)
 80018a2:	7992      	ldrb	r2, [r2, #6]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4821      	ldr	r0, [pc, #132]	@ (800192c <sensorTask+0x5f4>)
 80018a8:	f7ff fcaa 	bl	8001200 <sendCANData>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <sensorTask+0x5dc>)
 80018b2:	701a      	strb	r2, [r3, #0]
	if (RTOS_Time - DATA_09.time >= DATA_09.refresh_rate) {
	    DATA_09.time = RTOS_Time;
	}*/


	if (RTOS_Time - BUFFER_ACK.time >= BUFFER_ACK.refresh_rate) {
 80018b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <sensorTask+0x5f8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001930 <sensorTask+0x5f8>)
 80018be:	7912      	ldrb	r2, [r2, #4]
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d311      	bcc.n	80018e8 <sensorTask+0x5b0>
		BUFFER_ACK.time = RTOS_Time;
 80018c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001930 <sensorTask+0x5f8>)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	6013      	str	r3, [r2, #0]
		BUFFER_ACK.data[0]='1';
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <sensorTask+0x5f8>)
 80018cc:	2231      	movs	r2, #49	@ 0x31
 80018ce:	71da      	strb	r2, [r3, #7]
		hal_message = sendCANData(BUFFER_ACK.data,BUFFER_ACK.id,BUFFER_ACK.dlc);
 80018d0:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <sensorTask+0x5f8>)
 80018d2:	795b      	ldrb	r3, [r3, #5]
 80018d4:	4a16      	ldr	r2, [pc, #88]	@ (8001930 <sensorTask+0x5f8>)
 80018d6:	7992      	ldrb	r2, [r2, #6]
 80018d8:	4619      	mov	r1, r3
 80018da:	4816      	ldr	r0, [pc, #88]	@ (8001934 <sensorTask+0x5fc>)
 80018dc:	f7ff fc90 	bl	8001200 <sendCANData>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <sensorTask+0x5dc>)
 80018e6:	701a      	strb	r2, [r3, #0]
	}
	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(Time_Mult));
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <sensorTask+0x600>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	4a11      	ldr	r2, [pc, #68]	@ (800193c <sensorTask+0x604>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	099a      	lsrs	r2, r3, #6
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f003 ff59 	bl	80057bc <vTaskDelayUntil>
  {
 800190a:	e51d      	b.n	8001348 <sensorTask+0x10>
 800190c:	20000444 	.word	0x20000444
 8001910:	2000044b 	.word	0x2000044b
 8001914:	20000404 	.word	0x20000404
 8001918:	20000464 	.word	0x20000464
 800191c:	080073f9 	.word	0x080073f9
 8001920:	08007408 	.word	0x08007408
 8001924:	080073fa 	.word	0x080073fa
 8001928:	08007409 	.word	0x08007409
 800192c:	2000046b 	.word	0x2000046b
 8001930:	200004a4 	.word	0x200004a4
 8001934:	200004ab 	.word	0x200004ab
 8001938:	080073f0 	.word	0x080073f0
 800193c:	10624dd3 	.word	0x10624dd3

08001940 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001954:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <MX_GPIO_Init+0xb8>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a27      	ldr	r2, [pc, #156]	@ (80019f8 <MX_GPIO_Init+0xb8>)
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <MX_GPIO_Init+0xb8>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <MX_GPIO_Init+0xb8>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a21      	ldr	r2, [pc, #132]	@ (80019f8 <MX_GPIO_Init+0xb8>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <MX_GPIO_Init+0xb8>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <MX_GPIO_Init+0xb8>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a1b      	ldr	r2, [pc, #108]	@ (80019f8 <MX_GPIO_Init+0xb8>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <MX_GPIO_Init+0xb8>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 80019a2:	4816      	ldr	r0, [pc, #88]	@ (80019fc <MX_GPIO_Init+0xbc>)
 80019a4:	f001 fc2e 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 80019ae:	4814      	ldr	r0, [pc, #80]	@ (8001a00 <MX_GPIO_Init+0xc0>)
 80019b0:	f001 fc28 	bl	8003204 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80019b4:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80019b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	4619      	mov	r1, r3
 80019cc:	480b      	ldr	r0, [pc, #44]	@ (80019fc <MX_GPIO_Init+0xbc>)
 80019ce:	f001 fa95 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80019d2:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80019d6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	4619      	mov	r1, r3
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <MX_GPIO_Init+0xc0>)
 80019ec:	f001 fa86 	bl	8002efc <HAL_GPIO_Init>

}
 80019f0:	bf00      	nop
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010800 	.word	0x40010800
 8001a00:	40010c00 	.word	0x40010c00

08001a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a08:	f000 fade 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a0c:	f000 f822 	bl	8001a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a10:	f7ff ff96 	bl	8001940 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a14:	f7fe fe90 	bl	8000738 <MX_ADC1_Init>
  MX_CAN_Init();
 8001a18:	f7ff fada 	bl	8000fd0 <MX_CAN_Init>
  MX_ADC2_Init();
 8001a1c:	f7fe feca 	bl	80007b4 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001a20:	f000 fa3e 	bl	8001ea0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8001a24:	4808      	ldr	r0, [pc, #32]	@ (8001a48 <main+0x44>)
 8001a26:	f001 f853 	bl	8002ad0 <HAL_CAN_Start>
  can_msg = sendCANString("CAN Started");
 8001a2a:	4808      	ldr	r0, [pc, #32]	@ (8001a4c <main+0x48>)
 8001a2c:	f7ff fb52 	bl	80010d4 <sendCANString>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <main+0x4c>)
 8001a36:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a38:	f002 fe4e 	bl	80046d8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001a3c:	f7ff fc1a 	bl	8001274 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a40:	f002 fe6c 	bl	800471c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <main+0x40>
 8001a48:	200003dc 	.word	0x200003dc
 8001a4c:	080073a8 	.word	0x080073a8
 8001a50:	2000040c 	.word	0x2000040c

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b094      	sub	sp, #80	@ 0x50
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a5e:	2228      	movs	r2, #40	@ 0x28
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f005 fba0 	bl	80071a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a84:	2301      	movs	r3, #1
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a92:	2301      	movs	r3, #1
 8001a94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a96:	2302      	movs	r3, #2
 8001a98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aa0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 fbc2 	bl	8003234 <HAL_RCC_OscConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ab6:	f000 f83b 	bl	8001b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aba:	230f      	movs	r3, #15
 8001abc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 fe2e 	bl	8003738 <HAL_RCC_ClockConfig>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ae2:	f000 f825 	bl	8001b30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001aee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	4618      	mov	r0, r3
 8001af4:	f001 ffde 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001afe:	f000 f817 	bl	8001b30 <Error_Handler>
  }
}
 8001b02:	bf00      	nop
 8001b04:	3750      	adds	r7, #80	@ 0x50
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d101      	bne.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001b1e:	f000 fa69 	bl	8001ff4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40000800 	.word	0x40000800

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <Error_Handler+0x8>

08001b3c <setupSensors>:
Sensor DATA_08;
Sensor DATA_09;
Sensor BUFFER_ACK;


HAL_StatusTypeDef setupSensors(){
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
	DATA_01.refresh_rate = Time_Mult;
 8001b40:	2202      	movs	r2, #2
 8001b42:	4b45      	ldr	r3, [pc, #276]	@ (8001c58 <setupSensors+0x11c>)
 8001b44:	711a      	strb	r2, [r3, #4]
	DATA_01.id = 0x02;
 8001b46:	4b44      	ldr	r3, [pc, #272]	@ (8001c58 <setupSensors+0x11c>)
 8001b48:	2202      	movs	r2, #2
 8001b4a:	715a      	strb	r2, [r3, #5]
	DATA_01.dlc = 5;
 8001b4c:	4b42      	ldr	r3, [pc, #264]	@ (8001c58 <setupSensors+0x11c>)
 8001b4e:	2205      	movs	r2, #5
 8001b50:	719a      	strb	r2, [r3, #6]

	DATA_02.refresh_rate = Time_Mult;
 8001b52:	2202      	movs	r2, #2
 8001b54:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <setupSensors+0x120>)
 8001b56:	711a      	strb	r2, [r3, #4]
	DATA_02.id = 0x03;
 8001b58:	4b40      	ldr	r3, [pc, #256]	@ (8001c5c <setupSensors+0x120>)
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	715a      	strb	r2, [r3, #5]
	DATA_02.dlc = 8;
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c5c <setupSensors+0x120>)
 8001b60:	2208      	movs	r2, #8
 8001b62:	719a      	strb	r2, [r3, #6]

	DATA_03.refresh_rate = Time_Mult;
 8001b64:	2202      	movs	r2, #2
 8001b66:	4b3e      	ldr	r3, [pc, #248]	@ (8001c60 <setupSensors+0x124>)
 8001b68:	711a      	strb	r2, [r3, #4]
	DATA_03.id = 0x04;
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <setupSensors+0x124>)
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	715a      	strb	r2, [r3, #5]
	DATA_03.dlc = 8;
 8001b70:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <setupSensors+0x124>)
 8001b72:	2208      	movs	r2, #8
 8001b74:	719a      	strb	r2, [r3, #6]

	DATA_04.refresh_rate = 25*Time_Mult;
 8001b76:	2302      	movs	r3, #2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	0091      	lsls	r1, r2, #2
 8001b82:	461a      	mov	r2, r3
 8001b84:	460b      	mov	r3, r1
 8001b86:	4413      	add	r3, r2
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b36      	ldr	r3, [pc, #216]	@ (8001c64 <setupSensors+0x128>)
 8001b8c:	711a      	strb	r2, [r3, #4]
	DATA_04.id = 0x05;
 8001b8e:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <setupSensors+0x128>)
 8001b90:	2205      	movs	r2, #5
 8001b92:	715a      	strb	r2, [r3, #5]
	DATA_04.dlc = 8;
 8001b94:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <setupSensors+0x128>)
 8001b96:	2208      	movs	r2, #8
 8001b98:	719a      	strb	r2, [r3, #6]

	DATA_05.refresh_rate = 25*Time_Mult;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	0091      	lsls	r1, r2, #2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4413      	add	r3, r2
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b2e      	ldr	r3, [pc, #184]	@ (8001c68 <setupSensors+0x12c>)
 8001bb0:	711a      	strb	r2, [r3, #4]
	DATA_05.id = 0x06;
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <setupSensors+0x12c>)
 8001bb4:	2206      	movs	r2, #6
 8001bb6:	715a      	strb	r2, [r3, #5]
	DATA_05.dlc = 6;
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <setupSensors+0x12c>)
 8001bba:	2206      	movs	r2, #6
 8001bbc:	719a      	strb	r2, [r3, #6]

	DATA_06.refresh_rate = Time_Mult;
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <setupSensors+0x130>)
 8001bc2:	711a      	strb	r2, [r3, #4]
	DATA_06.id = 0x07;
 8001bc4:	4b29      	ldr	r3, [pc, #164]	@ (8001c6c <setupSensors+0x130>)
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	715a      	strb	r2, [r3, #5]
	DATA_06.dlc = 6;
 8001bca:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <setupSensors+0x130>)
 8001bcc:	2206      	movs	r2, #6
 8001bce:	719a      	strb	r2, [r3, #6]

	DATA_07.refresh_rate = 25*Time_Mult;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	0092      	lsls	r2, r2, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	0091      	lsls	r1, r2, #2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	460b      	mov	r3, r1
 8001be0:	4413      	add	r3, r2
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b22      	ldr	r3, [pc, #136]	@ (8001c70 <setupSensors+0x134>)
 8001be6:	711a      	strb	r2, [r3, #4]
	DATA_07.id = 0x08;
 8001be8:	4b21      	ldr	r3, [pc, #132]	@ (8001c70 <setupSensors+0x134>)
 8001bea:	2208      	movs	r2, #8
 8001bec:	715a      	strb	r2, [r3, #5]
	DATA_07.dlc = 8;
 8001bee:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <setupSensors+0x134>)
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	719a      	strb	r2, [r3, #6]

	DATA_08.refresh_rate = 25*Time_Mult;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	0092      	lsls	r2, r2, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	0091      	lsls	r1, r2, #2
 8001c00:	461a      	mov	r2, r3
 8001c02:	460b      	mov	r3, r1
 8001c04:	4413      	add	r3, r2
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <setupSensors+0x138>)
 8001c0a:	711a      	strb	r2, [r3, #4]
	DATA_08.id = 0x09;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <setupSensors+0x138>)
 8001c0e:	2209      	movs	r2, #9
 8001c10:	715a      	strb	r2, [r3, #5]
	DATA_08.dlc = 8;
 8001c12:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <setupSensors+0x138>)
 8001c14:	2208      	movs	r2, #8
 8001c16:	719a      	strb	r2, [r3, #6]

	DATA_09.refresh_rate = 25*Time_Mult;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	461a      	mov	r2, r3
 8001c22:	0091      	lsls	r1, r2, #2
 8001c24:	461a      	mov	r2, r3
 8001c26:	460b      	mov	r3, r1
 8001c28:	4413      	add	r3, r2
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <setupSensors+0x13c>)
 8001c2e:	711a      	strb	r2, [r3, #4]
	DATA_09.id = 0x0A;
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <setupSensors+0x13c>)
 8001c32:	220a      	movs	r2, #10
 8001c34:	715a      	strb	r2, [r3, #5]
	DATA_09.dlc = 6;
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <setupSensors+0x13c>)
 8001c38:	2206      	movs	r2, #6
 8001c3a:	719a      	strb	r2, [r3, #6]

	BUFFER_ACK.refresh_rate = Time_Mult;
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <setupSensors+0x140>)
 8001c40:	711a      	strb	r2, [r3, #4]
	BUFFER_ACK.id = 0x0B;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <setupSensors+0x140>)
 8001c44:	220b      	movs	r2, #11
 8001c46:	715a      	strb	r2, [r3, #5]
	BUFFER_ACK.dlc = 1;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <setupSensors+0x140>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	20000414 	.word	0x20000414
 8001c5c:	20000424 	.word	0x20000424
 8001c60:	20000434 	.word	0x20000434
 8001c64:	20000444 	.word	0x20000444
 8001c68:	20000454 	.word	0x20000454
 8001c6c:	20000464 	.word	0x20000464
 8001c70:	20000474 	.word	0x20000474
 8001c74:	20000484 	.word	0x20000484
 8001c78:	20000494 	.word	0x20000494
 8001c7c:	200004a4 	.word	0x200004a4

08001c80 <vBatValue>:

unsigned short vBatValue(unsigned short ADC_Value){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
	float vBat = ADC_Value*(VBAT_R1 + VBAT_R2)/VBAT_R2;
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	f645 525c 	movw	r2, #23900	@ 0x5d5c
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd4 <vBatValue+0x54>)
 8001c96:	fb82 1203 	smull	r1, r2, r2, r3
 8001c9a:	1252      	asrs	r2, r2, #9
 8001c9c:	17db      	asrs	r3, r3, #31
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fb0f 	bl	80002c4 <__aeabi_i2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	60fb      	str	r3, [r7, #12]
	unsigned short vBat0 = vBat/A_20V * 4095;
 8001caa:	490b      	ldr	r1, [pc, #44]	@ (8001cd8 <vBatValue+0x58>)
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f7fe fc11 	bl	80004d4 <__aeabi_fdiv>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4909      	ldr	r1, [pc, #36]	@ (8001cdc <vBatValue+0x5c>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fb58 	bl	800036c <__aeabi_fmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fd1a 	bl	80006f8 <__aeabi_f2uiz>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	817b      	strh	r3, [r7, #10]
	return vBat0;
 8001cc8:	897b      	ldrh	r3, [r7, #10]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	219bb355 	.word	0x219bb355
 8001cd8:	46c1e400 	.word	0x46c1e400
 8001cdc:	457ff000 	.word	0x457ff000

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce6:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <HAL_MspInit+0x68>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <HAL_MspInit+0x68>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6193      	str	r3, [r2, #24]
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HAL_MspInit+0x68>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_MspInit+0x68>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a11      	ldr	r2, [pc, #68]	@ (8001d48 <HAL_MspInit+0x68>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <HAL_MspInit+0x68>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	210f      	movs	r1, #15
 8001d1a:	f06f 0001 	mvn.w	r0, #1
 8001d1e:	f001 f8c2 	bl	8002ea6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_MspInit+0x6c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <HAL_MspInit+0x6c>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010000 	.word	0x40010000

08001d50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08e      	sub	sp, #56	@ 0x38
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001d66:	4b34      	ldr	r3, [pc, #208]	@ (8001e38 <HAL_InitTick+0xe8>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a33      	ldr	r2, [pc, #204]	@ (8001e38 <HAL_InitTick+0xe8>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <HAL_InitTick+0xe8>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d7e:	f107 0210 	add.w	r2, r7, #16
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 fe45 	bl	8003a18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d98:	f001 fe16 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8001d9c:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d9e:	e004      	b.n	8001daa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001da0:	f001 fe12 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8001da4:	4603      	mov	r3, r0
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dac:	4a23      	ldr	r2, [pc, #140]	@ (8001e3c <HAL_InitTick+0xec>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0c9b      	lsrs	r3, r3, #18
 8001db4:	3b01      	subs	r3, #1
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001db8:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <HAL_InitTick+0xf0>)
 8001dba:	4a22      	ldr	r2, [pc, #136]	@ (8001e44 <HAL_InitTick+0xf4>)
 8001dbc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001dbe:	4b20      	ldr	r3, [pc, #128]	@ (8001e40 <HAL_InitTick+0xf0>)
 8001dc0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dc4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e40 <HAL_InitTick+0xf0>)
 8001dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dca:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <HAL_InitTick+0xf0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <HAL_InitTick+0xf0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_InitTick+0xf0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001dde:	4818      	ldr	r0, [pc, #96]	@ (8001e40 <HAL_InitTick+0xf0>)
 8001de0:	f001 ffd4 	bl	8003d8c <HAL_TIM_Base_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001dea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11b      	bne.n	8001e2a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001df2:	4813      	ldr	r0, [pc, #76]	@ (8001e40 <HAL_InitTick+0xf0>)
 8001df4:	f002 f88a 	bl	8003f0c <HAL_TIM_Base_Start_IT>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001dfe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d111      	bne.n	8001e2a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e06:	201e      	movs	r0, #30
 8001e08:	f001 f869 	bl	8002ede <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	d808      	bhi.n	8001e24 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001e12:	2200      	movs	r2, #0
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	201e      	movs	r0, #30
 8001e18:	f001 f845 	bl	8002ea6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <HAL_InitTick+0xf8>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e002      	b.n	8001e2a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e2a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3738      	adds	r7, #56	@ 0x38
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	200004b4 	.word	0x200004b4
 8001e44:	40000800 	.word	0x40000800
 8001e48:	20000008 	.word	0x20000008

08001e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <NMI_Handler+0x4>

08001e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <HardFault_Handler+0x4>

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <MemManage_Handler+0x4>

08001e64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <BusFault_Handler+0x4>

08001e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <UsageFault_Handler+0x4>

08001e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <TIM4_IRQHandler+0x10>)
 8001e86:	f002 f893 	bl	8003fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200004b4 	.word	0x200004b4

08001e94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <MX_TIM1_Init+0x98>)
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <MX_TIM1_Init+0x9c>)
 8001ec0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <MX_TIM1_Init+0x98>)
 8001ec4:	2247      	movs	r2, #71	@ 0x47
 8001ec6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <MX_TIM1_Init+0x98>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <MX_TIM1_Init+0x98>)
 8001ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ed4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <MX_TIM1_Init+0x98>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <MX_TIM1_Init+0x98>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <MX_TIM1_Init+0x98>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ee8:	4813      	ldr	r0, [pc, #76]	@ (8001f38 <MX_TIM1_Init+0x98>)
 8001eea:	f001 ff4f 	bl	8003d8c <HAL_TIM_Base_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ef4:	f7ff fe1c 	bl	8001b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	4619      	mov	r1, r3
 8001f04:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <MX_TIM1_Init+0x98>)
 8001f06:	f002 f943 	bl	8004190 <HAL_TIM_ConfigClockSource>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f10:	f7ff fe0e 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <MX_TIM1_Init+0x98>)
 8001f22:	f002 fb25 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f2c:	f7ff fe00 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200004fc 	.word	0x200004fc
 8001f3c:	40012c00 	.word	0x40012c00

08001f40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a09      	ldr	r2, [pc, #36]	@ (8001f74 <HAL_TIM_Base_MspInit+0x34>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d10b      	bne.n	8001f6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <HAL_TIM_Base_MspInit+0x38>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	4a08      	ldr	r2, [pc, #32]	@ (8001f78 <HAL_TIM_Base_MspInit+0x38>)
 8001f58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f5c:	6193      	str	r3, [r2, #24]
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_TIM_Base_MspInit+0x38>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40012c00 	.word	0x40012c00
 8001f78:	40021000 	.word	0x40021000

08001f7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f7c:	f7ff ff8a 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f80:	480b      	ldr	r0, [pc, #44]	@ (8001fb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f82:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f84:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a09      	ldr	r2, [pc, #36]	@ (8001fbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f98:	4c09      	ldr	r4, [pc, #36]	@ (8001fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f005 f965 	bl	8007274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001faa:	f7ff fd2b 	bl	8001a04 <main>
  bx lr
 8001fae:	4770      	bx	lr
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001fb8:	08007458 	.word	0x08007458
  ldr r2, =_sbss
 8001fbc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001fc0:	20002070 	.word	0x20002070

08001fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC1_2_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fcc:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <HAL_Init+0x28>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a07      	ldr	r2, [pc, #28]	@ (8001ff0 <HAL_Init+0x28>)
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f000 ff59 	bl	8002e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fde:	200f      	movs	r0, #15
 8001fe0:	f7ff feb6 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe4:	f7ff fe7c 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40022000 	.word	0x40022000

08001ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_IncTick+0x1c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_IncTick+0x20>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a03      	ldr	r2, [pc, #12]	@ (8002014 <HAL_IncTick+0x20>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	2000000c 	.word	0x2000000c
 8002014:	20000544 	.word	0x20000544

08002018 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b02      	ldr	r3, [pc, #8]	@ (8002028 <HAL_GetTick+0x10>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	20000544 	.word	0x20000544

0800202c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0be      	b.n	80021cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fbe0 	bl	8000830 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fbf1 	bl	8002858 <ADC_ConversionStop_Disable>
 8002076:	4603      	mov	r3, r0
 8002078:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 8099 	bne.w	80021ba <HAL_ADC_Init+0x18e>
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 8095 	bne.w	80021ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002098:	f023 0302 	bic.w	r3, r3, #2
 800209c:	f043 0202 	orr.w	r2, r3, #2
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7b1b      	ldrb	r3, [r3, #12]
 80020b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020c4:	d003      	beq.n	80020ce <HAL_ADC_Init+0xa2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d102      	bne.n	80020d4 <HAL_ADC_Init+0xa8>
 80020ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d2:	e000      	b.n	80020d6 <HAL_ADC_Init+0xaa>
 80020d4:	2300      	movs	r3, #0
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7d1b      	ldrb	r3, [r3, #20]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d119      	bne.n	8002118 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7b1b      	ldrb	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	035a      	lsls	r2, r3, #13
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	e00b      	b.n	8002118 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <HAL_ADC_Init+0x1a8>)
 8002134:	4013      	ands	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	430b      	orrs	r3, r1
 800213e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002148:	d003      	beq.n	8002152 <HAL_ADC_Init+0x126>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d104      	bne.n	800215c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	3b01      	subs	r3, #1
 8002158:	051b      	lsls	r3, r3, #20
 800215a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	430a      	orrs	r2, r1
 800216e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <HAL_ADC_Init+0x1ac>)
 8002178:	4013      	ands	r3, r2
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	429a      	cmp	r2, r3
 800217e:	d10b      	bne.n	8002198 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	f023 0303 	bic.w	r3, r3, #3
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002196:	e018      	b.n	80021ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219c:	f023 0312 	bic.w	r3, r3, #18
 80021a0:	f043 0210 	orr.w	r2, r3, #16
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021b8:	e007      	b.n	80021ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	ffe1f7fd 	.word	0xffe1f7fd
 80021d8:	ff1f0efe 	.word	0xff1f0efe

080021dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Start+0x1a>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e098      	b.n	8002328 <HAL_ADC_Start+0x14c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fad0 	bl	80027a4 <ADC_Enable>
 8002204:	4603      	mov	r3, r0
 8002206:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f040 8087 	bne.w	800231e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a41      	ldr	r2, [pc, #260]	@ (8002330 <HAL_ADC_Start+0x154>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d105      	bne.n	800223a <HAL_ADC_Start+0x5e>
 800222e:	4b41      	ldr	r3, [pc, #260]	@ (8002334 <HAL_ADC_Start+0x158>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d115      	bne.n	8002266 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d026      	beq.n	80022a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800225c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002264:	e01d      	b.n	80022a2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a2f      	ldr	r2, [pc, #188]	@ (8002334 <HAL_ADC_Start+0x158>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d004      	beq.n	8002286 <HAL_ADC_Start+0xaa>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a2b      	ldr	r2, [pc, #172]	@ (8002330 <HAL_ADC_Start+0x154>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10d      	bne.n	80022a2 <HAL_ADC_Start+0xc6>
 8002286:	4b2b      	ldr	r3, [pc, #172]	@ (8002334 <HAL_ADC_Start+0x158>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800229a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b2:	f023 0206 	bic.w	r2, r3, #6
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022ba:	e002      	b.n	80022c2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f06f 0202 	mvn.w	r2, #2
 80022d2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80022de:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022e2:	d113      	bne.n	800230c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022e8:	4a11      	ldr	r2, [pc, #68]	@ (8002330 <HAL_ADC_Start+0x154>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d105      	bne.n	80022fa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022ee:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_ADC_Start+0x158>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d108      	bne.n	800230c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	e00c      	b.n	8002326 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	e003      	b.n	8002326 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40012800 	.word	0x40012800
 8002334:	40012400 	.word	0x40012400

08002338 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Stop+0x1a>
 800234e:	2302      	movs	r3, #2
 8002350:	e01a      	b.n	8002388 <HAL_ADC_Stop+0x50>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fa7c 	bl	8002858 <ADC_ConversionStop_Disable>
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80023a6:	f7ff fe37 	bl	8002018 <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023be:	f043 0220 	orr.w	r2, r3, #32
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0d3      	b.n	800257a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d131      	bne.n	8002444 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d12a      	bne.n	8002444 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023ee:	e021      	b.n	8002434 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f6:	d01d      	beq.n	8002434 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_ADC_PollForConversion+0x7e>
 80023fe:	f7ff fe0b 	bl	8002018 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d212      	bcs.n	8002434 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	f043 0204 	orr.w	r2, r3, #4
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0a2      	b.n	800257a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0d6      	beq.n	80023f0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002442:	e070      	b.n	8002526 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002444:	4b4f      	ldr	r3, [pc, #316]	@ (8002584 <HAL_ADC_PollForConversion+0x1f4>)
 8002446:	681c      	ldr	r4, [r3, #0]
 8002448:	2002      	movs	r0, #2
 800244a:	f001 fbe9 	bl	8003c20 <HAL_RCCEx_GetPeriphCLKFreq>
 800244e:	4603      	mov	r3, r0
 8002450:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6919      	ldr	r1, [r3, #16]
 800245a:	4b4b      	ldr	r3, [pc, #300]	@ (8002588 <HAL_ADC_PollForConversion+0x1f8>)
 800245c:	400b      	ands	r3, r1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d118      	bne.n	8002494 <HAL_ADC_PollForConversion+0x104>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68d9      	ldr	r1, [r3, #12]
 8002468:	4b48      	ldr	r3, [pc, #288]	@ (800258c <HAL_ADC_PollForConversion+0x1fc>)
 800246a:	400b      	ands	r3, r1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d111      	bne.n	8002494 <HAL_ADC_PollForConversion+0x104>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6919      	ldr	r1, [r3, #16]
 8002476:	4b46      	ldr	r3, [pc, #280]	@ (8002590 <HAL_ADC_PollForConversion+0x200>)
 8002478:	400b      	ands	r3, r1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d108      	bne.n	8002490 <HAL_ADC_PollForConversion+0x100>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68d9      	ldr	r1, [r3, #12]
 8002484:	4b43      	ldr	r3, [pc, #268]	@ (8002594 <HAL_ADC_PollForConversion+0x204>)
 8002486:	400b      	ands	r3, r1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_ADC_PollForConversion+0x100>
 800248c:	2314      	movs	r3, #20
 800248e:	e020      	b.n	80024d2 <HAL_ADC_PollForConversion+0x142>
 8002490:	2329      	movs	r3, #41	@ 0x29
 8002492:	e01e      	b.n	80024d2 <HAL_ADC_PollForConversion+0x142>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6919      	ldr	r1, [r3, #16]
 800249a:	4b3d      	ldr	r3, [pc, #244]	@ (8002590 <HAL_ADC_PollForConversion+0x200>)
 800249c:	400b      	ands	r3, r1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_PollForConversion+0x120>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68d9      	ldr	r1, [r3, #12]
 80024a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002594 <HAL_ADC_PollForConversion+0x204>)
 80024aa:	400b      	ands	r3, r1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_ADC_PollForConversion+0x13c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6919      	ldr	r1, [r3, #16]
 80024b6:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <HAL_ADC_PollForConversion+0x208>)
 80024b8:	400b      	ands	r3, r1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d108      	bne.n	80024d0 <HAL_ADC_PollForConversion+0x140>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68d9      	ldr	r1, [r3, #12]
 80024c4:	4b34      	ldr	r3, [pc, #208]	@ (8002598 <HAL_ADC_PollForConversion+0x208>)
 80024c6:	400b      	ands	r3, r1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_PollForConversion+0x140>
 80024cc:	2354      	movs	r3, #84	@ 0x54
 80024ce:	e000      	b.n	80024d2 <HAL_ADC_PollForConversion+0x142>
 80024d0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024d8:	e021      	b.n	800251e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d01a      	beq.n	8002518 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_ADC_PollForConversion+0x168>
 80024e8:	f7ff fd96 	bl	8002018 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d20f      	bcs.n	8002518 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d90b      	bls.n	8002518 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002504:	f043 0204 	orr.w	r2, r3, #4
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e030      	b.n	800257a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3301      	adds	r3, #1
 800251c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	429a      	cmp	r2, r3
 8002524:	d8d9      	bhi.n	80024da <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f06f 0212 	mvn.w	r2, #18
 800252e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002546:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800254a:	d115      	bne.n	8002578 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002550:	2b00      	cmp	r3, #0
 8002552:	d111      	bne.n	8002578 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	bd90      	pop	{r4, r7, pc}
 8002582:	bf00      	nop
 8002584:	20000004 	.word	0x20000004
 8002588:	24924924 	.word	0x24924924
 800258c:	00924924 	.word	0x00924924
 8002590:	12492492 	.word	0x12492492
 8002594:	00492492 	.word	0x00492492
 8002598:	00249249 	.word	0x00249249

0800259c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x20>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e0dc      	b.n	800278e <HAL_ADC_ConfigChannel+0x1da>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b06      	cmp	r3, #6
 80025e2:	d81c      	bhi.n	800261e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b05      	subs	r3, #5
 80025f6:	221f      	movs	r2, #31
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4019      	ands	r1, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	3b05      	subs	r3, #5
 8002610:	fa00 f203 	lsl.w	r2, r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	635a      	str	r2, [r3, #52]	@ 0x34
 800261c:	e03c      	b.n	8002698 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b0c      	cmp	r3, #12
 8002624:	d81c      	bhi.n	8002660 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	3b23      	subs	r3, #35	@ 0x23
 8002638:	221f      	movs	r2, #31
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	4019      	ands	r1, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	3b23      	subs	r3, #35	@ 0x23
 8002652:	fa00 f203 	lsl.w	r2, r0, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	631a      	str	r2, [r3, #48]	@ 0x30
 800265e:	e01b      	b.n	8002698 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	3b41      	subs	r3, #65	@ 0x41
 8002672:	221f      	movs	r2, #31
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	4019      	ands	r1, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	3b41      	subs	r3, #65	@ 0x41
 800268c:	fa00 f203 	lsl.w	r2, r0, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b09      	cmp	r3, #9
 800269e:	d91c      	bls.n	80026da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68d9      	ldr	r1, [r3, #12]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	3b1e      	subs	r3, #30
 80026b2:	2207      	movs	r2, #7
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	4019      	ands	r1, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6898      	ldr	r0, [r3, #8]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	3b1e      	subs	r3, #30
 80026cc:	fa00 f203 	lsl.w	r2, r0, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	e019      	b.n	800270e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6919      	ldr	r1, [r3, #16]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	2207      	movs	r2, #7
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	4019      	ands	r1, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6898      	ldr	r0, [r3, #8]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	fa00 f203 	lsl.w	r2, r0, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b10      	cmp	r3, #16
 8002714:	d003      	beq.n	800271e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800271a:	2b11      	cmp	r3, #17
 800271c:	d132      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1d      	ldr	r2, [pc, #116]	@ (8002798 <HAL_ADC_ConfigChannel+0x1e4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d125      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d126      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002744:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b10      	cmp	r3, #16
 800274c:	d11a      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800274e:	4b13      	ldr	r3, [pc, #76]	@ (800279c <HAL_ADC_ConfigChannel+0x1e8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a13      	ldr	r2, [pc, #76]	@ (80027a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	0c9a      	lsrs	r2, r3, #18
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002764:	e002      	b.n	800276c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3b01      	subs	r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f9      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x1b2>
 8002772:	e007      	b.n	8002784 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	40012400 	.word	0x40012400
 800279c:	20000004 	.word	0x20000004
 80027a0:	431bde83 	.word	0x431bde83

080027a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d040      	beq.n	8002844 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002850 <ADC_Enable+0xac>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002854 <ADC_Enable+0xb0>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	0c9b      	lsrs	r3, r3, #18
 80027de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027e0:	e002      	b.n	80027e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f9      	bne.n	80027e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027ee:	f7ff fc13 	bl	8002018 <HAL_GetTick>
 80027f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027f4:	e01f      	b.n	8002836 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027f6:	f7ff fc0f 	bl	8002018 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d918      	bls.n	8002836 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d011      	beq.n	8002836 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002816:	f043 0210 	orr.w	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e007      	b.n	8002846 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d1d8      	bne.n	80027f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000004 	.word	0x20000004
 8002854:	431bde83 	.word	0x431bde83

08002858 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d12e      	bne.n	80028d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002882:	f7ff fbc9 	bl	8002018 <HAL_GetTick>
 8002886:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002888:	e01b      	b.n	80028c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800288a:	f7ff fbc5 	bl	8002018 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d914      	bls.n	80028c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d10d      	bne.n	80028c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028aa:	f043 0210 	orr.w	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e007      	b.n	80028d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d0dc      	beq.n	800288a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0ed      	b.n	8002ac8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7fe fb9f 	bl	800103c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800290e:	f7ff fb83 	bl	8002018 <HAL_GetTick>
 8002912:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002914:	e012      	b.n	800293c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002916:	f7ff fb7f 	bl	8002018 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b0a      	cmp	r3, #10
 8002922:	d90b      	bls.n	800293c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2205      	movs	r2, #5
 8002934:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0c5      	b.n	8002ac8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0e5      	beq.n	8002916 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0202 	bic.w	r2, r2, #2
 8002958:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800295a:	f7ff fb5d 	bl	8002018 <HAL_GetTick>
 800295e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002960:	e012      	b.n	8002988 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002962:	f7ff fb59 	bl	8002018 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b0a      	cmp	r3, #10
 800296e:	d90b      	bls.n	8002988 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2205      	movs	r2, #5
 8002980:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e09f      	b.n	8002ac8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e5      	bne.n	8002962 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7e1b      	ldrb	r3, [r3, #24]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d108      	bne.n	80029b0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e007      	b.n	80029c0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7e5b      	ldrb	r3, [r3, #25]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d108      	bne.n	80029da <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	e007      	b.n	80029ea <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7e9b      	ldrb	r3, [r3, #26]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d108      	bne.n	8002a04 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0220 	orr.w	r2, r2, #32
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e007      	b.n	8002a14 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0220 	bic.w	r2, r2, #32
 8002a12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7edb      	ldrb	r3, [r3, #27]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d108      	bne.n	8002a2e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0210 	bic.w	r2, r2, #16
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e007      	b.n	8002a3e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0210 	orr.w	r2, r2, #16
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7f1b      	ldrb	r3, [r3, #28]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d108      	bne.n	8002a58 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0208 	orr.w	r2, r2, #8
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e007      	b.n	8002a68 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0208 	bic.w	r2, r2, #8
 8002a66:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7f5b      	ldrb	r3, [r3, #29]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d108      	bne.n	8002a82 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0204 	orr.w	r2, r2, #4
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e007      	b.n	8002a92 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0204 	bic.w	r2, r2, #4
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	ea42 0103 	orr.w	r1, r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	1e5a      	subs	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d12e      	bne.n	8002b42 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002afc:	f7ff fa8c 	bl	8002018 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b02:	e012      	b.n	8002b2a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b04:	f7ff fa88 	bl	8002018 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b0a      	cmp	r3, #10
 8002b10:	d90b      	bls.n	8002b2a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2205      	movs	r2, #5
 8002b22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e012      	b.n	8002b50 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e5      	bne.n	8002b04 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e006      	b.n	8002b50 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	@ 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b6c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b76:	7ffb      	ldrb	r3, [r7, #31]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d003      	beq.n	8002b84 <HAL_CAN_AddTxMessage+0x2c>
 8002b7c:	7ffb      	ldrb	r3, [r7, #31]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	f040 80ad 	bne.w	8002cde <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8095 	beq.w	8002cce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	0e1b      	lsrs	r3, r3, #24
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002bae:	2201      	movs	r2, #1
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10d      	bne.n	8002bdc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	6809      	ldr	r1, [r1, #0]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3318      	adds	r3, #24
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	440b      	add	r3, r1
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e00f      	b.n	8002bfc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002be6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002bf0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3318      	adds	r3, #24
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	440b      	add	r3, r1
 8002bfa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6819      	ldr	r1, [r3, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3318      	adds	r3, #24
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	7d1b      	ldrb	r3, [r3, #20]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d111      	bne.n	8002c3c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3318      	adds	r3, #24
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	4413      	add	r3, r2
 8002c24:	3304      	adds	r3, #4
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	6811      	ldr	r1, [r2, #0]
 8002c2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3318      	adds	r3, #24
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	440b      	add	r3, r1
 8002c38:	3304      	adds	r3, #4
 8002c3a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3307      	adds	r3, #7
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	061a      	lsls	r2, r3, #24
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3306      	adds	r3, #6
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3305      	adds	r3, #5
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	4313      	orrs	r3, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	3204      	adds	r2, #4
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	4610      	mov	r0, r2
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	6811      	ldr	r1, [r2, #0]
 8002c64:	ea43 0200 	orr.w	r2, r3, r0
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002c72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3303      	adds	r3, #3
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	061a      	lsls	r2, r3, #24
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3302      	adds	r3, #2
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	7812      	ldrb	r2, [r2, #0]
 8002c94:	4610      	mov	r0, r2
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	6811      	ldr	r1, [r2, #0]
 8002c9a:	ea43 0200 	orr.w	r2, r3, r0
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002ca8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3318      	adds	r3, #24
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	4413      	add	r3, r2
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	6811      	ldr	r1, [r2, #0]
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	3318      	adds	r3, #24
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	440b      	add	r3, r1
 8002cc8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e00e      	b.n	8002cec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e006      	b.n	8002cec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
  }
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3724      	adds	r7, #36	@ 0x24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d0a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d0c:	7afb      	ldrb	r3, [r7, #11]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d002      	beq.n	8002d18 <HAL_CAN_IsTxMessagePending+0x22>
 8002d12:	7afb      	ldrb	r3, [r7, #11]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d10b      	bne.n	8002d30 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	069b      	lsls	r3, r3, #26
 8002d22:	401a      	ands	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	069b      	lsls	r3, r3, #26
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002d30:	68fb      	ldr	r3, [r7, #12]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	@ (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4906      	ldr	r1, [pc, #24]	@ (8002dd4 <__NVIC_EnableIRQ+0x34>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	db0a      	blt.n	8002e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	490c      	ldr	r1, [pc, #48]	@ (8002e24 <__NVIC_SetPriority+0x4c>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e00:	e00a      	b.n	8002e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4908      	ldr	r1, [pc, #32]	@ (8002e28 <__NVIC_SetPriority+0x50>)
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	3b04      	subs	r3, #4
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	761a      	strb	r2, [r3, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000e100 	.word	0xe000e100
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	@ 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f1c3 0307 	rsb	r3, r3, #7
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	bf28      	it	cs
 8002e4a:	2304      	movcs	r3, #4
 8002e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d902      	bls.n	8002e5c <NVIC_EncodePriority+0x30>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3b03      	subs	r3, #3
 8002e5a:	e000      	b.n	8002e5e <NVIC_EncodePriority+0x32>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	401a      	ands	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e74:	f04f 31ff 	mov.w	r1, #4294967295
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	43d9      	mvns	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	4313      	orrs	r3, r2
         );
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3724      	adds	r7, #36	@ 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ff4f 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb8:	f7ff ff64 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	6978      	ldr	r0, [r7, #20]
 8002ec4:	f7ff ffb2 	bl	8002e2c <NVIC_EncodePriority>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff81 	bl	8002dd8 <__NVIC_SetPriority>
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff57 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b08b      	sub	sp, #44	@ 0x2c
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f06:	2300      	movs	r3, #0
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0e:	e169      	b.n	80031e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f10:	2201      	movs	r2, #1
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f040 8158 	bne.w	80031de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4a9a      	ldr	r2, [pc, #616]	@ (800319c <HAL_GPIO_Init+0x2a0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d05e      	beq.n	8002ff6 <HAL_GPIO_Init+0xfa>
 8002f38:	4a98      	ldr	r2, [pc, #608]	@ (800319c <HAL_GPIO_Init+0x2a0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d875      	bhi.n	800302a <HAL_GPIO_Init+0x12e>
 8002f3e:	4a98      	ldr	r2, [pc, #608]	@ (80031a0 <HAL_GPIO_Init+0x2a4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d058      	beq.n	8002ff6 <HAL_GPIO_Init+0xfa>
 8002f44:	4a96      	ldr	r2, [pc, #600]	@ (80031a0 <HAL_GPIO_Init+0x2a4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d86f      	bhi.n	800302a <HAL_GPIO_Init+0x12e>
 8002f4a:	4a96      	ldr	r2, [pc, #600]	@ (80031a4 <HAL_GPIO_Init+0x2a8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d052      	beq.n	8002ff6 <HAL_GPIO_Init+0xfa>
 8002f50:	4a94      	ldr	r2, [pc, #592]	@ (80031a4 <HAL_GPIO_Init+0x2a8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d869      	bhi.n	800302a <HAL_GPIO_Init+0x12e>
 8002f56:	4a94      	ldr	r2, [pc, #592]	@ (80031a8 <HAL_GPIO_Init+0x2ac>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d04c      	beq.n	8002ff6 <HAL_GPIO_Init+0xfa>
 8002f5c:	4a92      	ldr	r2, [pc, #584]	@ (80031a8 <HAL_GPIO_Init+0x2ac>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d863      	bhi.n	800302a <HAL_GPIO_Init+0x12e>
 8002f62:	4a92      	ldr	r2, [pc, #584]	@ (80031ac <HAL_GPIO_Init+0x2b0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d046      	beq.n	8002ff6 <HAL_GPIO_Init+0xfa>
 8002f68:	4a90      	ldr	r2, [pc, #576]	@ (80031ac <HAL_GPIO_Init+0x2b0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d85d      	bhi.n	800302a <HAL_GPIO_Init+0x12e>
 8002f6e:	2b12      	cmp	r3, #18
 8002f70:	d82a      	bhi.n	8002fc8 <HAL_GPIO_Init+0xcc>
 8002f72:	2b12      	cmp	r3, #18
 8002f74:	d859      	bhi.n	800302a <HAL_GPIO_Init+0x12e>
 8002f76:	a201      	add	r2, pc, #4	@ (adr r2, 8002f7c <HAL_GPIO_Init+0x80>)
 8002f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7c:	08002ff7 	.word	0x08002ff7
 8002f80:	08002fd1 	.word	0x08002fd1
 8002f84:	08002fe3 	.word	0x08002fe3
 8002f88:	08003025 	.word	0x08003025
 8002f8c:	0800302b 	.word	0x0800302b
 8002f90:	0800302b 	.word	0x0800302b
 8002f94:	0800302b 	.word	0x0800302b
 8002f98:	0800302b 	.word	0x0800302b
 8002f9c:	0800302b 	.word	0x0800302b
 8002fa0:	0800302b 	.word	0x0800302b
 8002fa4:	0800302b 	.word	0x0800302b
 8002fa8:	0800302b 	.word	0x0800302b
 8002fac:	0800302b 	.word	0x0800302b
 8002fb0:	0800302b 	.word	0x0800302b
 8002fb4:	0800302b 	.word	0x0800302b
 8002fb8:	0800302b 	.word	0x0800302b
 8002fbc:	0800302b 	.word	0x0800302b
 8002fc0:	08002fd9 	.word	0x08002fd9
 8002fc4:	08002fed 	.word	0x08002fed
 8002fc8:	4a79      	ldr	r2, [pc, #484]	@ (80031b0 <HAL_GPIO_Init+0x2b4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fce:	e02c      	b.n	800302a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	623b      	str	r3, [r7, #32]
          break;
 8002fd6:	e029      	b.n	800302c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	623b      	str	r3, [r7, #32]
          break;
 8002fe0:	e024      	b.n	800302c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	623b      	str	r3, [r7, #32]
          break;
 8002fea:	e01f      	b.n	800302c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	623b      	str	r3, [r7, #32]
          break;
 8002ff4:	e01a      	b.n	800302c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ffe:	2304      	movs	r3, #4
 8003000:	623b      	str	r3, [r7, #32]
          break;
 8003002:	e013      	b.n	800302c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800300c:	2308      	movs	r3, #8
 800300e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	611a      	str	r2, [r3, #16]
          break;
 8003016:	e009      	b.n	800302c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003018:	2308      	movs	r3, #8
 800301a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	615a      	str	r2, [r3, #20]
          break;
 8003022:	e003      	b.n	800302c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003024:	2300      	movs	r3, #0
 8003026:	623b      	str	r3, [r7, #32]
          break;
 8003028:	e000      	b.n	800302c <HAL_GPIO_Init+0x130>
          break;
 800302a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2bff      	cmp	r3, #255	@ 0xff
 8003030:	d801      	bhi.n	8003036 <HAL_GPIO_Init+0x13a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	e001      	b.n	800303a <HAL_GPIO_Init+0x13e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3304      	adds	r3, #4
 800303a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2bff      	cmp	r3, #255	@ 0xff
 8003040:	d802      	bhi.n	8003048 <HAL_GPIO_Init+0x14c>
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	e002      	b.n	800304e <HAL_GPIO_Init+0x152>
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	3b08      	subs	r3, #8
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	210f      	movs	r1, #15
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	401a      	ands	r2, r3
 8003060:	6a39      	ldr	r1, [r7, #32]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	431a      	orrs	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80b1 	beq.w	80031de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800307c:	4b4d      	ldr	r3, [pc, #308]	@ (80031b4 <HAL_GPIO_Init+0x2b8>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	4a4c      	ldr	r2, [pc, #304]	@ (80031b4 <HAL_GPIO_Init+0x2b8>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6193      	str	r3, [r2, #24]
 8003088:	4b4a      	ldr	r3, [pc, #296]	@ (80031b4 <HAL_GPIO_Init+0x2b8>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003094:	4a48      	ldr	r2, [pc, #288]	@ (80031b8 <HAL_GPIO_Init+0x2bc>)
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	3302      	adds	r3, #2
 800309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	220f      	movs	r2, #15
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a40      	ldr	r2, [pc, #256]	@ (80031bc <HAL_GPIO_Init+0x2c0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <HAL_GPIO_Init+0x1ec>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3f      	ldr	r2, [pc, #252]	@ (80031c0 <HAL_GPIO_Init+0x2c4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00d      	beq.n	80030e4 <HAL_GPIO_Init+0x1e8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a3e      	ldr	r2, [pc, #248]	@ (80031c4 <HAL_GPIO_Init+0x2c8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d007      	beq.n	80030e0 <HAL_GPIO_Init+0x1e4>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a3d      	ldr	r2, [pc, #244]	@ (80031c8 <HAL_GPIO_Init+0x2cc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d101      	bne.n	80030dc <HAL_GPIO_Init+0x1e0>
 80030d8:	2303      	movs	r3, #3
 80030da:	e006      	b.n	80030ea <HAL_GPIO_Init+0x1ee>
 80030dc:	2304      	movs	r3, #4
 80030de:	e004      	b.n	80030ea <HAL_GPIO_Init+0x1ee>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e002      	b.n	80030ea <HAL_GPIO_Init+0x1ee>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_GPIO_Init+0x1ee>
 80030e8:	2300      	movs	r3, #0
 80030ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ec:	f002 0203 	and.w	r2, r2, #3
 80030f0:	0092      	lsls	r2, r2, #2
 80030f2:	4093      	lsls	r3, r2
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030fa:	492f      	ldr	r1, [pc, #188]	@ (80031b8 <HAL_GPIO_Init+0x2bc>)
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3302      	adds	r3, #2
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003114:	4b2d      	ldr	r3, [pc, #180]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	492c      	ldr	r1, [pc, #176]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003122:	4b2a      	ldr	r3, [pc, #168]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	43db      	mvns	r3, r3
 800312a:	4928      	ldr	r1, [pc, #160]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 800312c:	4013      	ands	r3, r2
 800312e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d006      	beq.n	800314a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800313c:	4b23      	ldr	r3, [pc, #140]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	4922      	ldr	r1, [pc, #136]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	60cb      	str	r3, [r1, #12]
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800314a:	4b20      	ldr	r3, [pc, #128]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	43db      	mvns	r3, r3
 8003152:	491e      	ldr	r1, [pc, #120]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 8003154:	4013      	ands	r3, r2
 8003156:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d006      	beq.n	8003172 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	4918      	ldr	r1, [pc, #96]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
 8003170:	e006      	b.n	8003180 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003172:	4b16      	ldr	r3, [pc, #88]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	43db      	mvns	r3, r3
 800317a:	4914      	ldr	r1, [pc, #80]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 800317c:	4013      	ands	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d021      	beq.n	80031d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800318c:	4b0f      	ldr	r3, [pc, #60]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	490e      	ldr	r1, [pc, #56]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	e021      	b.n	80031de <HAL_GPIO_Init+0x2e2>
 800319a:	bf00      	nop
 800319c:	10320000 	.word	0x10320000
 80031a0:	10310000 	.word	0x10310000
 80031a4:	10220000 	.word	0x10220000
 80031a8:	10210000 	.word	0x10210000
 80031ac:	10120000 	.word	0x10120000
 80031b0:	10110000 	.word	0x10110000
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40010000 	.word	0x40010000
 80031bc:	40010800 	.word	0x40010800
 80031c0:	40010c00 	.word	0x40010c00
 80031c4:	40011000 	.word	0x40011000
 80031c8:	40011400 	.word	0x40011400
 80031cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <HAL_GPIO_Init+0x304>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	4909      	ldr	r1, [pc, #36]	@ (8003200 <HAL_GPIO_Init+0x304>)
 80031da:	4013      	ands	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	3301      	adds	r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	fa22 f303 	lsr.w	r3, r2, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f47f ae8e 	bne.w	8002f10 <HAL_GPIO_Init+0x14>
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	372c      	adds	r7, #44	@ 0x2c
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	40010400 	.word	0x40010400

08003204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
 8003210:	4613      	mov	r3, r2
 8003212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003214:	787b      	ldrb	r3, [r7, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003220:	e003      	b.n	800322a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	041a      	lsls	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	611a      	str	r2, [r3, #16]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e272      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8087 	beq.w	8003362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003254:	4b92      	ldr	r3, [pc, #584]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b04      	cmp	r3, #4
 800325e:	d00c      	beq.n	800327a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003260:	4b8f      	ldr	r3, [pc, #572]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d112      	bne.n	8003292 <HAL_RCC_OscConfig+0x5e>
 800326c:	4b8c      	ldr	r3, [pc, #560]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003278:	d10b      	bne.n	8003292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327a:	4b89      	ldr	r3, [pc, #548]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d06c      	beq.n	8003360 <HAL_RCC_OscConfig+0x12c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d168      	bne.n	8003360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e24c      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x76>
 800329c:	4b80      	ldr	r3, [pc, #512]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a7f      	ldr	r2, [pc, #508]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e02e      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x98>
 80032b2:	4b7b      	ldr	r3, [pc, #492]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7a      	ldr	r2, [pc, #488]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b78      	ldr	r3, [pc, #480]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a77      	ldr	r2, [pc, #476]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0xbc>
 80032d6:	4b72      	ldr	r3, [pc, #456]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a71      	ldr	r2, [pc, #452]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6f      	ldr	r3, [pc, #444]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6e      	ldr	r2, [pc, #440]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032f0:	4b6b      	ldr	r3, [pc, #428]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a6a      	ldr	r2, [pc, #424]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b68      	ldr	r3, [pc, #416]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a67      	ldr	r2, [pc, #412]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fe82 	bl	8002018 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7fe fe7e 	bl	8002018 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	@ 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e200      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b5d      	ldr	r3, [pc, #372]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xe4>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fe6e 	bl	8002018 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fe6a 	bl	8002018 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	@ 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1ec      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b53      	ldr	r3, [pc, #332]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x10c>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800336e:	4b4c      	ldr	r3, [pc, #304]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800337a:	4b49      	ldr	r3, [pc, #292]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x18c>
 8003386:	4b46      	ldr	r3, [pc, #280]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b43      	ldr	r3, [pc, #268]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x176>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1c0      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b3d      	ldr	r3, [pc, #244]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4939      	ldr	r1, [pc, #228]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e03a      	b.n	8003436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b36      	ldr	r3, [pc, #216]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fe fe23 	bl	8002018 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fe fe1f 	bl	8002018 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1a1      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	4b2d      	ldr	r3, [pc, #180]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b2a      	ldr	r3, [pc, #168]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4927      	ldr	r1, [pc, #156]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b26      	ldr	r3, [pc, #152]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe fe02 	bl	8002018 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003418:	f7fe fdfe 	bl	8002018 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e180      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b1d      	ldr	r3, [pc, #116]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d03a      	beq.n	80034b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d019      	beq.n	800347e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b17      	ldr	r3, [pc, #92]	@ (80034a8 <HAL_RCC_OscConfig+0x274>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003450:	f7fe fde2 	bl	8002018 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe fdde 	bl	8002018 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e160      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	4b0d      	ldr	r3, [pc, #52]	@ (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003476:	2001      	movs	r0, #1
 8003478:	f000 fafe 	bl	8003a78 <RCC_Delay>
 800347c:	e01c      	b.n	80034b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347e:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fe fdc8 	bl	8002018 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348a:	e00f      	b.n	80034ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7fe fdc4 	bl	8002018 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d908      	bls.n	80034ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e146      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	42420000 	.word	0x42420000
 80034a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ac:	4b92      	ldr	r3, [pc, #584]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e9      	bne.n	800348c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80a6 	beq.w	8003612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ca:	4b8b      	ldr	r3, [pc, #556]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10d      	bne.n	80034f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	4b88      	ldr	r3, [pc, #544]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4a87      	ldr	r2, [pc, #540]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e0:	61d3      	str	r3, [r2, #28]
 80034e2:	4b85      	ldr	r3, [pc, #532]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b82      	ldr	r3, [pc, #520]	@ (80036fc <HAL_RCC_OscConfig+0x4c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d118      	bne.n	8003530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fe:	4b7f      	ldr	r3, [pc, #508]	@ (80036fc <HAL_RCC_OscConfig+0x4c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7e      	ldr	r2, [pc, #504]	@ (80036fc <HAL_RCC_OscConfig+0x4c8>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7fe fd85 	bl	8002018 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7fe fd81 	bl	8002018 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b64      	cmp	r3, #100	@ 0x64
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e103      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003524:	4b75      	ldr	r3, [pc, #468]	@ (80036fc <HAL_RCC_OscConfig+0x4c8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x312>
 8003538:	4b6f      	ldr	r3, [pc, #444]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4a6e      	ldr	r2, [pc, #440]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	e02d      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x334>
 800354e:	4b6a      	ldr	r3, [pc, #424]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a69      	ldr	r2, [pc, #420]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6213      	str	r3, [r2, #32]
 800355a:	4b67      	ldr	r3, [pc, #412]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a66      	ldr	r2, [pc, #408]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6213      	str	r3, [r2, #32]
 8003566:	e01c      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b05      	cmp	r3, #5
 800356e:	d10c      	bne.n	800358a <HAL_RCC_OscConfig+0x356>
 8003570:	4b61      	ldr	r3, [pc, #388]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a60      	ldr	r2, [pc, #384]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	6213      	str	r3, [r2, #32]
 800357c:	4b5e      	ldr	r3, [pc, #376]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4a5d      	ldr	r2, [pc, #372]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6213      	str	r3, [r2, #32]
 8003588:	e00b      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 800358a:	4b5b      	ldr	r3, [pc, #364]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a5a      	ldr	r2, [pc, #360]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	6213      	str	r3, [r2, #32]
 8003596:	4b58      	ldr	r3, [pc, #352]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a57      	ldr	r2, [pc, #348]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d015      	beq.n	80035d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fd35 	bl	8002018 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe fd31 	bl	8002018 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0b1      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c8:	4b4b      	ldr	r3, [pc, #300]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ee      	beq.n	80035b2 <HAL_RCC_OscConfig+0x37e>
 80035d4:	e014      	b.n	8003600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d6:	f7fe fd1f 	bl	8002018 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fe fd1b 	bl	8002018 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e09b      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f4:	4b40      	ldr	r3, [pc, #256]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ee      	bne.n	80035de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d105      	bne.n	8003612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	4b3c      	ldr	r3, [pc, #240]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4a3b      	ldr	r2, [pc, #236]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8087 	beq.w	800372a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800361c:	4b36      	ldr	r3, [pc, #216]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b08      	cmp	r3, #8
 8003626:	d061      	beq.n	80036ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d146      	bne.n	80036be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003630:	4b33      	ldr	r3, [pc, #204]	@ (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003636:	f7fe fcef 	bl	8002018 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363e:	f7fe fceb 	bl	8002018 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e06d      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003650:	4b29      	ldr	r3, [pc, #164]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f0      	bne.n	800363e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003664:	d108      	bne.n	8003678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003666:	4b24      	ldr	r3, [pc, #144]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4921      	ldr	r1, [pc, #132]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003678:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a19      	ldr	r1, [r3, #32]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	430b      	orrs	r3, r1
 800368a:	491b      	ldr	r1, [pc, #108]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003690:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fe fcbf 	bl	8002018 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7fe fcbb 	bl	8002018 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e03d      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b0:	4b11      	ldr	r3, [pc, #68]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x46a>
 80036bc:	e035      	b.n	800372a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe fca8 	bl	8002018 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe fca4 	bl	8002018 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e026      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036de:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x498>
 80036ea:	e01e      	b.n	800372a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e019      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40007000 	.word	0x40007000
 8003700:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003704:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <HAL_RCC_OscConfig+0x500>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	429a      	cmp	r2, r3
 8003716:	d106      	bne.n	8003726 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40021000 	.word	0x40021000

08003738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0d0      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b6a      	ldr	r3, [pc, #424]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d910      	bls.n	800377c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b67      	ldr	r3, [pc, #412]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 0207 	bic.w	r2, r3, #7
 8003762:	4965      	ldr	r1, [pc, #404]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b63      	ldr	r3, [pc, #396]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b8      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003794:	4b59      	ldr	r3, [pc, #356]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a58      	ldr	r2, [pc, #352]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800379e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ac:	4b53      	ldr	r3, [pc, #332]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a52      	ldr	r2, [pc, #328]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80037b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b50      	ldr	r3, [pc, #320]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	494d      	ldr	r1, [pc, #308]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d040      	beq.n	8003858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b47      	ldr	r3, [pc, #284]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d115      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e073      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b3d      	ldr	r3, [pc, #244]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b39      	ldr	r3, [pc, #228]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4936      	ldr	r1, [pc, #216]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003828:	f7fe fbf6 	bl	8002018 <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fe fbf2 	bl	8002018 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e053      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b2d      	ldr	r3, [pc, #180]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b27      	ldr	r3, [pc, #156]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d210      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b24      	ldr	r3, [pc, #144]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 0207 	bic.w	r2, r3, #7
 800386e:	4922      	ldr	r1, [pc, #136]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b20      	ldr	r3, [pc, #128]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e032      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b19      	ldr	r3, [pc, #100]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4916      	ldr	r1, [pc, #88]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038b2:	4b12      	ldr	r3, [pc, #72]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490e      	ldr	r1, [pc, #56]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c6:	f000 f821 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	490a      	ldr	r1, [pc, #40]	@ (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80038d8:	5ccb      	ldrb	r3, [r1, r3]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a09      	ldr	r2, [pc, #36]	@ (8003904 <HAL_RCC_ClockConfig+0x1cc>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038e2:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <HAL_RCC_ClockConfig+0x1d0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fa32 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40022000 	.word	0x40022000
 80038fc:	40021000 	.word	0x40021000
 8003900:	08007410 	.word	0x08007410
 8003904:	20000004 	.word	0x20000004
 8003908:	20000008 	.word	0x20000008

0800390c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	2300      	movs	r3, #0
 8003920:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003926:	4b1e      	ldr	r3, [pc, #120]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b04      	cmp	r3, #4
 8003934:	d002      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x30>
 8003936:	2b08      	cmp	r3, #8
 8003938:	d003      	beq.n	8003942 <HAL_RCC_GetSysClockFreq+0x36>
 800393a:	e027      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800393c:	4b19      	ldr	r3, [pc, #100]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800393e:	613b      	str	r3, [r7, #16]
      break;
 8003940:	e027      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	0c9b      	lsrs	r3, r3, #18
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	4a17      	ldr	r2, [pc, #92]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800394c:	5cd3      	ldrb	r3, [r2, r3]
 800394e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d010      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800395a:	4b11      	ldr	r3, [pc, #68]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	0c5b      	lsrs	r3, r3, #17
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	4a11      	ldr	r2, [pc, #68]	@ (80039ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003966:	5cd3      	ldrb	r3, [r2, r3]
 8003968:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a0d      	ldr	r2, [pc, #52]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800396e:	fb03 f202 	mul.w	r2, r3, r2
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	e004      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a0c      	ldr	r2, [pc, #48]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003980:	fb02 f303 	mul.w	r3, r2, r3
 8003984:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	613b      	str	r3, [r7, #16]
      break;
 800398a:	e002      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800398e:	613b      	str	r3, [r7, #16]
      break;
 8003990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003992:	693b      	ldr	r3, [r7, #16]
}
 8003994:	4618      	mov	r0, r3
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000
 80039a4:	007a1200 	.word	0x007a1200
 80039a8:	08007428 	.word	0x08007428
 80039ac:	08007438 	.word	0x08007438
 80039b0:	003d0900 	.word	0x003d0900

080039b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b8:	4b02      	ldr	r3, [pc, #8]	@ (80039c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	20000004 	.word	0x20000004

080039c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039cc:	f7ff fff2 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4903      	ldr	r1, [pc, #12]	@ (80039ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	08007420 	.word	0x08007420

080039f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039f4:	f7ff ffde 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	0adb      	lsrs	r3, r3, #11
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4903      	ldr	r1, [pc, #12]	@ (8003a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000
 8003a14:	08007420 	.word	0x08007420

08003a18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	220f      	movs	r2, #15
 8003a26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a28:	4b11      	ldr	r3, [pc, #68]	@ (8003a70 <HAL_RCC_GetClockConfig+0x58>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0203 	and.w	r2, r3, #3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a34:	4b0e      	ldr	r3, [pc, #56]	@ (8003a70 <HAL_RCC_GetClockConfig+0x58>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <HAL_RCC_GetClockConfig+0x58>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a4c:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <HAL_RCC_GetClockConfig+0x58>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	08db      	lsrs	r3, r3, #3
 8003a52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <HAL_RCC_GetClockConfig+0x5c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0207 	and.w	r2, r3, #7
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40022000 	.word	0x40022000

08003a78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a80:	4b0a      	ldr	r3, [pc, #40]	@ (8003aac <RCC_Delay+0x34>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab0 <RCC_Delay+0x38>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	0a5b      	lsrs	r3, r3, #9
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a94:	bf00      	nop
  }
  while (Delay --);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1e5a      	subs	r2, r3, #1
 8003a9a:	60fa      	str	r2, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f9      	bne.n	8003a94 <RCC_Delay+0x1c>
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	20000004 	.word	0x20000004
 8003ab0:	10624dd3 	.word	0x10624dd3

08003ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d07d      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10d      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	4a4b      	ldr	r2, [pc, #300]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	61d3      	str	r3, [r2, #28]
 8003aec:	4b49      	ldr	r3, [pc, #292]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	4b46      	ldr	r3, [pc, #280]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d118      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b08:	4b43      	ldr	r3, [pc, #268]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a42      	ldr	r2, [pc, #264]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b14:	f7fe fa80 	bl	8002018 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1a:	e008      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1c:	f7fe fa7c 	bl	8002018 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	@ 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e06d      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b3a:	4b36      	ldr	r3, [pc, #216]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d02e      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d027      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b58:	4b2e      	ldr	r3, [pc, #184]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b62:	4b2e      	ldr	r3, [pc, #184]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b68:	4b2c      	ldr	r3, [pc, #176]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b6e:	4a29      	ldr	r2, [pc, #164]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d014      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7fe fa4b 	bl	8002018 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b84:	e00a      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7fe fa47 	bl	8002018 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e036      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ee      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4917      	ldr	r1, [pc, #92]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d105      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc0:	4b14      	ldr	r3, [pc, #80]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	4a13      	ldr	r2, [pc, #76]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	490b      	ldr	r1, [pc, #44]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf6:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4904      	ldr	r1, [pc, #16]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	42420440 	.word	0x42420440

08003c20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	2300      	movs	r3, #0
 8003c32:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	f200 808a 	bhi.w	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d045      	beq.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d075      	beq.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c56:	e082      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003c58:	4b46      	ldr	r3, [pc, #280]	@ (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c5e:	4b45      	ldr	r3, [pc, #276]	@ (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d07b      	beq.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	0c9b      	lsrs	r3, r3, #18
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	4a41      	ldr	r2, [pc, #260]	@ (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003c74:	5cd3      	ldrb	r3, [r2, r3]
 8003c76:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d015      	beq.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c82:	4b3c      	ldr	r3, [pc, #240]	@ (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	0c5b      	lsrs	r3, r3, #17
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003c8e:	5cd3      	ldrb	r3, [r2, r3]
 8003c90:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c9c:	4a38      	ldr	r2, [pc, #224]	@ (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	e004      	b.n	8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4a34      	ldr	r2, [pc, #208]	@ (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cc4:	d102      	bne.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	61bb      	str	r3, [r7, #24]
      break;
 8003cca:	e04a      	b.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	61bb      	str	r3, [r7, #24]
      break;
 8003cda:	e042      	b.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003cdc:	4b25      	ldr	r3, [pc, #148]	@ (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ce8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cec:	d108      	bne.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003cf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	e01f      	b.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d0a:	d109      	bne.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d0c:	4b19      	ldr	r3, [pc, #100]	@ (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003d18:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	e00f      	b.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d2a:	d11c      	bne.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d2c:	4b11      	ldr	r3, [pc, #68]	@ (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d016      	beq.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003d38:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003d3c:	61bb      	str	r3, [r7, #24]
      break;
 8003d3e:	e012      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d40:	e011      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d42:	f7ff fe55 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8003d46:	4602      	mov	r2, r0
 8003d48:	4b0a      	ldr	r3, [pc, #40]	@ (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	0b9b      	lsrs	r3, r3, #14
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	3301      	adds	r3, #1
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	61bb      	str	r3, [r7, #24]
      break;
 8003d5c:	e004      	b.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e002      	b.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d66:	bf00      	nop
    }
  }
  return (frequency);
 8003d68:	69bb      	ldr	r3, [r7, #24]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000
 8003d78:	0800743c 	.word	0x0800743c
 8003d7c:	0800744c 	.word	0x0800744c
 8003d80:	007a1200 	.word	0x007a1200
 8003d84:	003d0900 	.word	0x003d0900
 8003d88:	aaaaaaab 	.word	0xaaaaaaab

08003d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e041      	b.n	8003e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe f8c4 	bl	8001f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f000 facc 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d001      	beq.n	8003e44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e032      	b.n	8003eaa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a18      	ldr	r2, [pc, #96]	@ (8003eb4 <HAL_TIM_Base_Start+0x88>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00e      	beq.n	8003e74 <HAL_TIM_Base_Start+0x48>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5e:	d009      	beq.n	8003e74 <HAL_TIM_Base_Start+0x48>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a14      	ldr	r2, [pc, #80]	@ (8003eb8 <HAL_TIM_Base_Start+0x8c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_TIM_Base_Start+0x48>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a13      	ldr	r2, [pc, #76]	@ (8003ebc <HAL_TIM_Base_Start+0x90>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d111      	bne.n	8003e98 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d010      	beq.n	8003ea8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0201 	orr.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e96:	e007      	b.n	8003ea8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800

08003ec0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6a1a      	ldr	r2, [r3, #32]
 8003ece:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_TIM_Base_Stop+0x38>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_Base_Stop+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d001      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e03a      	b.n	8003f9a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a18      	ldr	r2, [pc, #96]	@ (8003fa4 <HAL_TIM_Base_Start_IT+0x98>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00e      	beq.n	8003f64 <HAL_TIM_Base_Start_IT+0x58>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4e:	d009      	beq.n	8003f64 <HAL_TIM_Base_Start_IT+0x58>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a14      	ldr	r2, [pc, #80]	@ (8003fa8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <HAL_TIM_Base_Start_IT+0x58>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a13      	ldr	r2, [pc, #76]	@ (8003fac <HAL_TIM_Base_Start_IT+0xa0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d111      	bne.n	8003f88 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	d010      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f86:	e007      	b.n	8003f98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	40012c00 	.word	0x40012c00
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800

08003fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d020      	beq.n	8004014 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0202 	mvn.w	r2, #2
 8003fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f998 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f98b 	bl	800431e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f99a 	bl	8004342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d020      	beq.n	8004060 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01b      	beq.n	8004060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0204 	mvn.w	r2, #4
 8004030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f972 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f965 	bl	800431e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f974 	bl	8004342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d020      	beq.n	80040ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01b      	beq.n	80040ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0208 	mvn.w	r2, #8
 800407c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2204      	movs	r2, #4
 8004082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f94c 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f93f 	bl	800431e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f94e 	bl	8004342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d020      	beq.n	80040f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01b      	beq.n	80040f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0210 	mvn.w	r2, #16
 80040c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2208      	movs	r2, #8
 80040ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f926 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 80040e4:	e005      	b.n	80040f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f919 	bl	800431e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f928 	bl	8004342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00c      	beq.n	800411c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0201 	mvn.w	r2, #1
 8004114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd fcf8 	bl	8001b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00c      	beq.n	8004140 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fa7f 	bl	800463e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00c      	beq.n	8004164 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800415c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f8f8 	bl	8004354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00c      	beq.n	8004188 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0220 	mvn.w	r2, #32
 8004180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fa52 	bl	800462c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_TIM_ConfigClockSource+0x1c>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e0b4      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x186>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e4:	d03e      	beq.n	8004264 <HAL_TIM_ConfigClockSource+0xd4>
 80041e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ea:	f200 8087 	bhi.w	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f2:	f000 8086 	beq.w	8004302 <HAL_TIM_ConfigClockSource+0x172>
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fa:	d87f      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b70      	cmp	r3, #112	@ 0x70
 80041fe:	d01a      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xa6>
 8004200:	2b70      	cmp	r3, #112	@ 0x70
 8004202:	d87b      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b60      	cmp	r3, #96	@ 0x60
 8004206:	d050      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0x11a>
 8004208:	2b60      	cmp	r3, #96	@ 0x60
 800420a:	d877      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b50      	cmp	r3, #80	@ 0x50
 800420e:	d03c      	beq.n	800428a <HAL_TIM_ConfigClockSource+0xfa>
 8004210:	2b50      	cmp	r3, #80	@ 0x50
 8004212:	d873      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b40      	cmp	r3, #64	@ 0x40
 8004216:	d058      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x13a>
 8004218:	2b40      	cmp	r3, #64	@ 0x40
 800421a:	d86f      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b30      	cmp	r3, #48	@ 0x30
 800421e:	d064      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004220:	2b30      	cmp	r3, #48	@ 0x30
 8004222:	d86b      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b20      	cmp	r3, #32
 8004226:	d060      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004228:	2b20      	cmp	r3, #32
 800422a:	d867      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d05c      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004230:	2b10      	cmp	r3, #16
 8004232:	d05a      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004234:	e062      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004246:	f000 f974 	bl	8004532 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	609a      	str	r2, [r3, #8]
      break;
 8004262:	e04f      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004274:	f000 f95d 	bl	8004532 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004286:	609a      	str	r2, [r3, #8]
      break;
 8004288:	e03c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004296:	461a      	mov	r2, r3
 8004298:	f000 f8d4 	bl	8004444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2150      	movs	r1, #80	@ 0x50
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f92b 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 80042a8:	e02c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042b6:	461a      	mov	r2, r3
 80042b8:	f000 f8f2 	bl	80044a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2160      	movs	r1, #96	@ 0x60
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f91b 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 80042c8:	e01c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d6:	461a      	mov	r2, r3
 80042d8:	f000 f8b4 	bl	8004444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2140      	movs	r1, #64	@ 0x40
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f90b 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 80042e8:	e00c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f000 f902 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 80042fa:	e003      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004300:	e000      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004314:	7bfb      	ldrb	r3, [r7, #15]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr
	...

08004368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a2f      	ldr	r2, [pc, #188]	@ (8004438 <TIM_Base_SetConfig+0xd0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00b      	beq.n	8004398 <TIM_Base_SetConfig+0x30>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004386:	d007      	beq.n	8004398 <TIM_Base_SetConfig+0x30>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a2c      	ldr	r2, [pc, #176]	@ (800443c <TIM_Base_SetConfig+0xd4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <TIM_Base_SetConfig+0x30>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a2b      	ldr	r2, [pc, #172]	@ (8004440 <TIM_Base_SetConfig+0xd8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d108      	bne.n	80043aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a22      	ldr	r2, [pc, #136]	@ (8004438 <TIM_Base_SetConfig+0xd0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00b      	beq.n	80043ca <TIM_Base_SetConfig+0x62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b8:	d007      	beq.n	80043ca <TIM_Base_SetConfig+0x62>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1f      	ldr	r2, [pc, #124]	@ (800443c <TIM_Base_SetConfig+0xd4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d003      	beq.n	80043ca <TIM_Base_SetConfig+0x62>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004440 <TIM_Base_SetConfig+0xd8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d108      	bne.n	80043dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a0d      	ldr	r2, [pc, #52]	@ (8004438 <TIM_Base_SetConfig+0xd0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d103      	bne.n	8004410 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f023 0201 	bic.w	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	611a      	str	r2, [r3, #16]
  }
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800

08004444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	f023 0201 	bic.w	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800446e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f023 030a 	bic.w	r3, r3, #10
 8004480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0210 	bic.w	r2, r3, #16
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	031b      	lsls	r3, r3, #12
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	621a      	str	r2, [r3, #32]
}
 80044f4:	bf00      	nop
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr

080044fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	f043 0307 	orr.w	r3, r3, #7
 8004520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr

08004532 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004532:	b480      	push	{r7}
 8004534:	b087      	sub	sp, #28
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800454c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	021a      	lsls	r2, r3, #8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	431a      	orrs	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	4313      	orrs	r3, r2
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	609a      	str	r2, [r3, #8]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004584:	2302      	movs	r3, #2
 8004586:	e046      	b.n	8004616 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a16      	ldr	r2, [pc, #88]	@ (8004620 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d4:	d009      	beq.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a12      	ldr	r2, [pc, #72]	@ (8004624 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a10      	ldr	r2, [pc, #64]	@ (8004628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d10c      	bne.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800

0800462c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <__NVIC_SetPriority>:
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	6039      	str	r1, [r7, #0]
 800465a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800465c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004660:	2b00      	cmp	r3, #0
 8004662:	db0a      	blt.n	800467a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	490c      	ldr	r1, [pc, #48]	@ (800469c <__NVIC_SetPriority+0x4c>)
 800466a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466e:	0112      	lsls	r2, r2, #4
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	440b      	add	r3, r1
 8004674:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004678:	e00a      	b.n	8004690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4908      	ldr	r1, [pc, #32]	@ (80046a0 <__NVIC_SetPriority+0x50>)
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	3b04      	subs	r3, #4
 8004688:	0112      	lsls	r2, r2, #4
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	440b      	add	r3, r1
 800468e:	761a      	strb	r2, [r3, #24]
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000e100 	.word	0xe000e100
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <SysTick_Handler+0x1c>)
 80046aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80046ac:	f001 fd66 	bl	800617c <xTaskGetSchedulerState>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d001      	beq.n	80046ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80046b6:	f002 fb07 	bl	8006cc8 <xPortSysTickHandler>
  }
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	e000e010 	.word	0xe000e010

080046c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80046c8:	2100      	movs	r1, #0
 80046ca:	f06f 0004 	mvn.w	r0, #4
 80046ce:	f7ff ffbf 	bl	8004650 <__NVIC_SetPriority>
#endif
}
 80046d2:	bf00      	nop
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046de:	f3ef 8305 	mrs	r3, IPSR
 80046e2:	603b      	str	r3, [r7, #0]
  return(result);
 80046e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80046ea:	f06f 0305 	mvn.w	r3, #5
 80046ee:	607b      	str	r3, [r7, #4]
 80046f0:	e00c      	b.n	800470c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046f2:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <osKernelInitialize+0x40>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046fa:	4b07      	ldr	r3, [pc, #28]	@ (8004718 <osKernelInitialize+0x40>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004700:	2300      	movs	r3, #0
 8004702:	607b      	str	r3, [r7, #4]
 8004704:	e002      	b.n	800470c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004706:	f04f 33ff 	mov.w	r3, #4294967295
 800470a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800470c:	687b      	ldr	r3, [r7, #4]
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr
 8004718:	20000548 	.word	0x20000548

0800471c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004722:	f3ef 8305 	mrs	r3, IPSR
 8004726:	603b      	str	r3, [r7, #0]
  return(result);
 8004728:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <osKernelStart+0x1a>
    stat = osErrorISR;
 800472e:	f06f 0305 	mvn.w	r3, #5
 8004732:	607b      	str	r3, [r7, #4]
 8004734:	e010      	b.n	8004758 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004736:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <osKernelStart+0x48>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d109      	bne.n	8004752 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800473e:	f7ff ffc1 	bl	80046c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004742:	4b08      	ldr	r3, [pc, #32]	@ (8004764 <osKernelStart+0x48>)
 8004744:	2202      	movs	r2, #2
 8004746:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004748:	f001 f8b8 	bl	80058bc <vTaskStartScheduler>
      stat = osOK;
 800474c:	2300      	movs	r3, #0
 800474e:	607b      	str	r3, [r7, #4]
 8004750:	e002      	b.n	8004758 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004752:	f04f 33ff 	mov.w	r3, #4294967295
 8004756:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004758:	687b      	ldr	r3, [r7, #4]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20000548 	.word	0x20000548

08004768 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b08e      	sub	sp, #56	@ 0x38
 800476c:	af04      	add	r7, sp, #16
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004774:	2300      	movs	r3, #0
 8004776:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004778:	f3ef 8305 	mrs	r3, IPSR
 800477c:	617b      	str	r3, [r7, #20]
  return(result);
 800477e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004780:	2b00      	cmp	r3, #0
 8004782:	d17e      	bne.n	8004882 <osThreadNew+0x11a>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d07b      	beq.n	8004882 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800478a:	2380      	movs	r3, #128	@ 0x80
 800478c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800478e:	2318      	movs	r3, #24
 8004790:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004796:	f04f 33ff 	mov.w	r3, #4294967295
 800479a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d045      	beq.n	800482e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <osThreadNew+0x48>
        name = attr->name;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <osThreadNew+0x6e>
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b38      	cmp	r3, #56	@ 0x38
 80047c8:	d805      	bhi.n	80047d6 <osThreadNew+0x6e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <osThreadNew+0x72>
        return (NULL);
 80047d6:	2300      	movs	r3, #0
 80047d8:	e054      	b.n	8004884 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00e      	beq.n	8004810 <osThreadNew+0xa8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2ba7      	cmp	r3, #167	@ 0xa7
 80047f8:	d90a      	bls.n	8004810 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d006      	beq.n	8004810 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <osThreadNew+0xa8>
        mem = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	e010      	b.n	8004832 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10c      	bne.n	8004832 <osThreadNew+0xca>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d108      	bne.n	8004832 <osThreadNew+0xca>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d104      	bne.n	8004832 <osThreadNew+0xca>
          mem = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	e001      	b.n	8004832 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d110      	bne.n	800485a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004840:	9202      	str	r2, [sp, #8]
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	6a3a      	ldr	r2, [r7, #32]
 800484c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fdf6 	bl	8005440 <xTaskCreateStatic>
 8004854:	4603      	mov	r3, r0
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	e013      	b.n	8004882 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d110      	bne.n	8004882 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	b29a      	uxth	r2, r3
 8004864:	f107 0310 	add.w	r3, r7, #16
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fe44 	bl	8005500 <xTaskCreate>
 8004878:	4603      	mov	r3, r0
 800487a:	2b01      	cmp	r3, #1
 800487c:	d001      	beq.n	8004882 <osThreadNew+0x11a>
            hTask = NULL;
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004882:	693b      	ldr	r3, [r7, #16]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3728      	adds	r7, #40	@ 0x28
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a06      	ldr	r2, [pc, #24]	@ (80048b4 <vApplicationGetIdleTaskMemory+0x28>)
 800489c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4a05      	ldr	r2, [pc, #20]	@ (80048b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80048a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2280      	movs	r2, #128	@ 0x80
 80048a8:	601a      	str	r2, [r3, #0]
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr
 80048b4:	2000054c 	.word	0x2000054c
 80048b8:	200005f4 	.word	0x200005f4

080048bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a07      	ldr	r2, [pc, #28]	@ (80048e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80048cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4a06      	ldr	r2, [pc, #24]	@ (80048ec <vApplicationGetTimerTaskMemory+0x30>)
 80048d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048da:	601a      	str	r2, [r3, #0]
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	200007f4 	.word	0x200007f4
 80048ec:	2000089c 	.word	0x2000089c

080048f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f103 0208 	add.w	r2, r3, #8
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f04f 32ff 	mov.w	r2, #4294967295
 8004908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f103 0208 	add.w	r2, r3, #8
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f103 0208 	add.w	r2, r3, #8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr

08004946 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d103      	bne.n	80049ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	e00c      	b.n	80049c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3308      	adds	r3, #8
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	e002      	b.n	80049ba <vListInsert+0x2e>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d2f6      	bcs.n	80049b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6892      	ldr	r2, [r2, #8]
 8004a12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6852      	ldr	r2, [r2, #4]
 8004a1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d103      	bne.n	8004a30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	1e5a      	subs	r2, r3, #1
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
	...

08004a50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a7c:	f002 f8a6 	bl	8006bcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a88:	68f9      	ldr	r1, [r7, #12]
 8004a8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	441a      	add	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aac:	3b01      	subs	r3, #1
 8004aae:	68f9      	ldr	r1, [r7, #12]
 8004ab0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ab2:	fb01 f303 	mul.w	r3, r1, r3
 8004ab6:	441a      	add	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	22ff      	movs	r2, #255	@ 0xff
 8004ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	22ff      	movs	r2, #255	@ 0xff
 8004ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d114      	bne.n	8004afc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01a      	beq.n	8004b10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3310      	adds	r3, #16
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 f986 	bl	8005df0 <xTaskRemoveFromEventList>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d012      	beq.n	8004b10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <xQueueGenericReset+0xd0>)
 8004aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	e009      	b.n	8004b10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3310      	adds	r3, #16
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fef5 	bl	80048f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3324      	adds	r3, #36	@ 0x24
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fef0 	bl	80048f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b10:	f002 f88c 	bl	8006c2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b14:	2301      	movs	r3, #1
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08e      	sub	sp, #56	@ 0x38
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	e7fd      	b.n	8004b6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <xQueueGenericCreateStatic+0x56>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <xQueueGenericCreateStatic+0x5a>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <xQueueGenericCreateStatic+0x5c>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	623b      	str	r3, [r7, #32]
}
 8004b96:	bf00      	nop
 8004b98:	bf00      	nop
 8004b9a:	e7fd      	b.n	8004b98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <xQueueGenericCreateStatic+0x84>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <xQueueGenericCreateStatic+0x88>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <xQueueGenericCreateStatic+0x8a>
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	61fb      	str	r3, [r7, #28]
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	e7fd      	b.n	8004bc6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bca:	2350      	movs	r3, #80	@ 0x50
 8004bcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b50      	cmp	r3, #80	@ 0x50
 8004bd2:	d00b      	beq.n	8004bec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	61bb      	str	r3, [r7, #24]
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c00:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f805 	bl	8004c1e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3730      	adds	r7, #48	@ 0x30
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d103      	bne.n	8004c3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e002      	b.n	8004c40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	69b8      	ldr	r0, [r7, #24]
 8004c50:	f7ff fefe 	bl	8004a50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	@ 0x38
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c72:	2300      	movs	r3, #0
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10b      	bne.n	8004c98 <xQueueGenericSend+0x34>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d103      	bne.n	8004ca6 <xQueueGenericSend+0x42>
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <xQueueGenericSend+0x46>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <xQueueGenericSend+0x48>
 8004caa:	2300      	movs	r3, #0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10b      	bne.n	8004cc8 <xQueueGenericSend+0x64>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
 8004cc6:	e7fd      	b.n	8004cc4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d103      	bne.n	8004cd6 <xQueueGenericSend+0x72>
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <xQueueGenericSend+0x76>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <xQueueGenericSend+0x78>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <xQueueGenericSend+0x94>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	623b      	str	r3, [r7, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	e7fd      	b.n	8004cf4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cf8:	f001 fa40 	bl	800617c <xTaskGetSchedulerState>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <xQueueGenericSend+0xa4>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <xQueueGenericSend+0xa8>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <xQueueGenericSend+0xaa>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <xQueueGenericSend+0xc6>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	61fb      	str	r3, [r7, #28]
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d2a:	f001 ff4f 	bl	8006bcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d302      	bcc.n	8004d40 <xQueueGenericSend+0xdc>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d129      	bne.n	8004d94 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d46:	f000 fa0f 	bl	8005168 <prvCopyDataToQueue>
 8004d4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d010      	beq.n	8004d76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d56:	3324      	adds	r3, #36	@ 0x24
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f001 f849 	bl	8005df0 <xTaskRemoveFromEventList>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d013      	beq.n	8004d8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d64:	4b3f      	ldr	r3, [pc, #252]	@ (8004e64 <xQueueGenericSend+0x200>)
 8004d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	e00a      	b.n	8004d8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d7c:	4b39      	ldr	r3, [pc, #228]	@ (8004e64 <xQueueGenericSend+0x200>)
 8004d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d8c:	f001 ff4e 	bl	8006c2c <vPortExitCritical>
				return pdPASS;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e063      	b.n	8004e5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d9a:	f001 ff47 	bl	8006c2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e05c      	b.n	8004e5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004da8:	f107 0314 	add.w	r3, r7, #20
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 f883 	bl	8005eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004db2:	2301      	movs	r3, #1
 8004db4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004db6:	f001 ff39 	bl	8006c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dba:	f000 fdef 	bl	800599c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dbe:	f001 ff05 	bl	8006bcc <vPortEnterCritical>
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dc8:	b25b      	sxtb	r3, r3
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	d103      	bne.n	8004dd8 <xQueueGenericSend+0x174>
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dde:	b25b      	sxtb	r3, r3
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d103      	bne.n	8004dee <xQueueGenericSend+0x18a>
 8004de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dee:	f001 ff1d 	bl	8006c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004df2:	1d3a      	adds	r2, r7, #4
 8004df4:	f107 0314 	add.w	r3, r7, #20
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f001 f872 	bl	8005ee4 <xTaskCheckForTimeOut>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d124      	bne.n	8004e50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e08:	f000 faa6 	bl	8005358 <prvIsQueueFull>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d018      	beq.n	8004e44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	3310      	adds	r3, #16
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 ff96 	bl	8005d4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e22:	f000 fa31 	bl	8005288 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e26:	f000 fdc7 	bl	80059b8 <xTaskResumeAll>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f47f af7c 	bne.w	8004d2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e32:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <xQueueGenericSend+0x200>)
 8004e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	e772      	b.n	8004d2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e46:	f000 fa1f 	bl	8005288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e4a:	f000 fdb5 	bl	80059b8 <xTaskResumeAll>
 8004e4e:	e76c      	b.n	8004d2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e52:	f000 fa19 	bl	8005288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e56:	f000 fdaf 	bl	80059b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3738      	adds	r7, #56	@ 0x38
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	e000ed04 	.word	0xe000ed04

08004e68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b090      	sub	sp, #64	@ 0x40
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	e7fd      	b.n	8004e94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d103      	bne.n	8004ea6 <xQueueGenericSendFromISR+0x3e>
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <xQueueGenericSendFromISR+0x42>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <xQueueGenericSendFromISR+0x44>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d103      	bne.n	8004ed6 <xQueueGenericSendFromISR+0x6e>
 8004ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <xQueueGenericSendFromISR+0x72>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xQueueGenericSendFromISR+0x74>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10b      	bne.n	8004ef8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	623b      	str	r3, [r7, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	bf00      	nop
 8004ef6:	e7fd      	b.n	8004ef4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ef8:	f001 ff2a 	bl	8006d50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004efc:	f3ef 8211 	mrs	r2, BASEPRI
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	61fa      	str	r2, [r7, #28]
 8004f12:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f14:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f16:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d302      	bcc.n	8004f2a <xQueueGenericSendFromISR+0xc2>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d12f      	bne.n	8004f8a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f40:	f000 f912 	bl	8005168 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d112      	bne.n	8004f74 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d016      	beq.n	8004f84 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f58:	3324      	adds	r3, #36	@ 0x24
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 ff48 	bl	8005df0 <xTaskRemoveFromEventList>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00e      	beq.n	8004f84 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00b      	beq.n	8004f84 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	e007      	b.n	8004f84 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f78:	3301      	adds	r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	b25a      	sxtb	r2, r3
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f84:	2301      	movs	r3, #1
 8004f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004f88:	e001      	b.n	8004f8e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f90:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3740      	adds	r7, #64	@ 0x40
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08c      	sub	sp, #48	@ 0x30
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10b      	bne.n	8004fd6 <xQueueReceive+0x32>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	623b      	str	r3, [r7, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	e7fd      	b.n	8004fd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <xQueueReceive+0x40>
 8004fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <xQueueReceive+0x44>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <xQueueReceive+0x46>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10b      	bne.n	8005006 <xQueueReceive+0x62>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	61fb      	str	r3, [r7, #28]
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005006:	f001 f8b9 	bl	800617c <xTaskGetSchedulerState>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <xQueueReceive+0x72>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <xQueueReceive+0x76>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <xQueueReceive+0x78>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <xQueueReceive+0x94>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	61bb      	str	r3, [r7, #24]
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005038:	f001 fdc8 	bl	8006bcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800503c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01f      	beq.n	8005088 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800504c:	f000 f8f6 	bl	800523c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	1e5a      	subs	r2, r3, #1
 8005054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005056:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00f      	beq.n	8005080 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005062:	3310      	adds	r3, #16
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fec3 	bl	8005df0 <xTaskRemoveFromEventList>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d007      	beq.n	8005080 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005070:	4b3c      	ldr	r3, [pc, #240]	@ (8005164 <xQueueReceive+0x1c0>)
 8005072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005080:	f001 fdd4 	bl	8006c2c <vPortExitCritical>
				return pdPASS;
 8005084:	2301      	movs	r3, #1
 8005086:	e069      	b.n	800515c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d103      	bne.n	8005096 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800508e:	f001 fdcd 	bl	8006c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005092:	2300      	movs	r3, #0
 8005094:	e062      	b.n	800515c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800509c:	f107 0310 	add.w	r3, r7, #16
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 ff09 	bl	8005eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050a6:	2301      	movs	r3, #1
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050aa:	f001 fdbf 	bl	8006c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050ae:	f000 fc75 	bl	800599c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050b2:	f001 fd8b 	bl	8006bcc <vPortEnterCritical>
 80050b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050bc:	b25b      	sxtb	r3, r3
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d103      	bne.n	80050cc <xQueueReceive+0x128>
 80050c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050d2:	b25b      	sxtb	r3, r3
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d103      	bne.n	80050e2 <xQueueReceive+0x13e>
 80050da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050e2:	f001 fda3 	bl	8006c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050e6:	1d3a      	adds	r2, r7, #4
 80050e8:	f107 0310 	add.w	r3, r7, #16
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fef8 	bl	8005ee4 <xTaskCheckForTimeOut>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d123      	bne.n	8005142 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050fc:	f000 f916 	bl	800532c <prvIsQueueEmpty>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d017      	beq.n	8005136 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005108:	3324      	adds	r3, #36	@ 0x24
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	4611      	mov	r1, r2
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fe1c 	bl	8005d4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005114:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005116:	f000 f8b7 	bl	8005288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800511a:	f000 fc4d 	bl	80059b8 <xTaskResumeAll>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d189      	bne.n	8005038 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005124:	4b0f      	ldr	r3, [pc, #60]	@ (8005164 <xQueueReceive+0x1c0>)
 8005126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	e780      	b.n	8005038 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005136:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005138:	f000 f8a6 	bl	8005288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800513c:	f000 fc3c 	bl	80059b8 <xTaskResumeAll>
 8005140:	e77a      	b.n	8005038 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005144:	f000 f8a0 	bl	8005288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005148:	f000 fc36 	bl	80059b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800514c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800514e:	f000 f8ed 	bl	800532c <prvIsQueueEmpty>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	f43f af6f 	beq.w	8005038 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800515a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800515c:	4618      	mov	r0, r3
 800515e:	3730      	adds	r7, #48	@ 0x30
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d14d      	bne.n	800522a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f001 f810 	bl	80061b8 <xTaskPriorityDisinherit>
 8005198:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	609a      	str	r2, [r3, #8]
 80051a0:	e043      	b.n	800522a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d119      	bne.n	80051dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6858      	ldr	r0, [r3, #4]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b0:	461a      	mov	r2, r3
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	f002 f884 	bl	80072c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c0:	441a      	add	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d32b      	bcc.n	800522a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	e026      	b.n	800522a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68d8      	ldr	r0, [r3, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e4:	461a      	mov	r2, r3
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	f002 f86a 	bl	80072c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f4:	425b      	negs	r3, r3
 80051f6:	441a      	add	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d207      	bcs.n	8005218 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	425b      	negs	r3, r3
 8005212:	441a      	add	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d105      	bne.n	800522a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	3b01      	subs	r3, #1
 8005228:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005232:	697b      	ldr	r3, [r7, #20]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	441a      	add	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	429a      	cmp	r2, r3
 8005266:	d303      	bcc.n	8005270 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68d9      	ldr	r1, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	461a      	mov	r2, r3
 800527a:	6838      	ldr	r0, [r7, #0]
 800527c:	f002 f820 	bl	80072c0 <memcpy>
	}
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005290:	f001 fc9c 	bl	8006bcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800529a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800529c:	e011      	b.n	80052c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d012      	beq.n	80052cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3324      	adds	r3, #36	@ 0x24
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fda0 	bl	8005df0 <xTaskRemoveFromEventList>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052b6:	f000 fe79 	bl	8005fac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	3b01      	subs	r3, #1
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	dce9      	bgt.n	800529e <prvUnlockQueue+0x16>
 80052ca:	e000      	b.n	80052ce <prvUnlockQueue+0x46>
					break;
 80052cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	22ff      	movs	r2, #255	@ 0xff
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80052d6:	f001 fca9 	bl	8006c2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052da:	f001 fc77 	bl	8006bcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052e6:	e011      	b.n	800530c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3310      	adds	r3, #16
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fd7b 	bl	8005df0 <xTaskRemoveFromEventList>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005300:	f000 fe54 	bl	8005fac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005304:	7bbb      	ldrb	r3, [r7, #14]
 8005306:	3b01      	subs	r3, #1
 8005308:	b2db      	uxtb	r3, r3
 800530a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800530c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005310:	2b00      	cmp	r3, #0
 8005312:	dce9      	bgt.n	80052e8 <prvUnlockQueue+0x60>
 8005314:	e000      	b.n	8005318 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005316:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	22ff      	movs	r2, #255	@ 0xff
 800531c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005320:	f001 fc84 	bl	8006c2c <vPortExitCritical>
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005334:	f001 fc4a 	bl	8006bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005340:	2301      	movs	r3, #1
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e001      	b.n	800534a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800534a:	f001 fc6f 	bl	8006c2c <vPortExitCritical>

	return xReturn;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005360:	f001 fc34 	bl	8006bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536c:	429a      	cmp	r2, r3
 800536e:	d102      	bne.n	8005376 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005370:	2301      	movs	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e001      	b.n	800537a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800537a:	f001 fc57 	bl	8006c2c <vPortExitCritical>

	return xReturn;
 800537e:	68fb      	ldr	r3, [r7, #12]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	e014      	b.n	80053c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005398:	4a0e      	ldr	r2, [pc, #56]	@ (80053d4 <vQueueAddToRegistry+0x4c>)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10b      	bne.n	80053bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053a4:	490b      	ldr	r1, [pc, #44]	@ (80053d4 <vQueueAddToRegistry+0x4c>)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053ae:	4a09      	ldr	r2, [pc, #36]	@ (80053d4 <vQueueAddToRegistry+0x4c>)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053ba:	e006      	b.n	80053ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b07      	cmp	r3, #7
 80053c6:	d9e7      	bls.n	8005398 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	20000c9c 	.word	0x20000c9c

080053d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053e8:	f001 fbf0 	bl	8006bcc <vPortEnterCritical>
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053f2:	b25b      	sxtb	r3, r3
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d103      	bne.n	8005402 <vQueueWaitForMessageRestricted+0x2a>
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005408:	b25b      	sxtb	r3, r3
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d103      	bne.n	8005418 <vQueueWaitForMessageRestricted+0x40>
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005418:	f001 fc08 	bl	8006c2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3324      	adds	r3, #36	@ 0x24
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fcb3 	bl	8005d98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005432:	6978      	ldr	r0, [r7, #20]
 8005434:	f7ff ff28 	bl	8005288 <prvUnlockQueue>
	}
 8005438:	bf00      	nop
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08e      	sub	sp, #56	@ 0x38
 8005444:	af04      	add	r7, sp, #16
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800544e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10b      	bne.n	800546c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	623b      	str	r3, [r7, #32]
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	e7fd      	b.n	8005468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800546c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	61fb      	str	r3, [r7, #28]
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800548a:	23a8      	movs	r3, #168	@ 0xa8
 800548c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2ba8      	cmp	r3, #168	@ 0xa8
 8005492:	d00b      	beq.n	80054ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	61bb      	str	r3, [r7, #24]
}
 80054a6:	bf00      	nop
 80054a8:	bf00      	nop
 80054aa:	e7fd      	b.n	80054a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01e      	beq.n	80054f2 <xTaskCreateStatic+0xb2>
 80054b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01b      	beq.n	80054f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054cc:	2300      	movs	r3, #0
 80054ce:	9303      	str	r3, [sp, #12]
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	9302      	str	r3, [sp, #8]
 80054d4:	f107 0314 	add.w	r3, r7, #20
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f851 	bl	800558c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054ec:	f000 f8f6 	bl	80056dc <prvAddNewTaskToReadyList>
 80054f0:	e001      	b.n	80054f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054f6:	697b      	ldr	r3, [r7, #20]
	}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3728      	adds	r7, #40	@ 0x28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08c      	sub	sp, #48	@ 0x30
 8005504:	af04      	add	r7, sp, #16
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	4613      	mov	r3, r2
 800550e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4618      	mov	r0, r3
 8005516:	f001 fc5b 	bl	8006dd0 <pvPortMalloc>
 800551a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00e      	beq.n	8005540 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005522:	20a8      	movs	r0, #168	@ 0xa8
 8005524:	f001 fc54 	bl	8006dd0 <pvPortMalloc>
 8005528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	631a      	str	r2, [r3, #48]	@ 0x30
 8005536:	e005      	b.n	8005544 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005538:	6978      	ldr	r0, [r7, #20]
 800553a:	f001 fd17 	bl	8006f6c <vPortFree>
 800553e:	e001      	b.n	8005544 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d017      	beq.n	800557a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	2300      	movs	r3, #0
 8005556:	9303      	str	r3, [sp, #12]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	9302      	str	r3, [sp, #8]
 800555c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f80f 	bl	800558c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800556e:	69f8      	ldr	r0, [r7, #28]
 8005570:	f000 f8b4 	bl	80056dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005574:	2301      	movs	r3, #1
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	e002      	b.n	8005580 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800557a:	f04f 33ff 	mov.w	r3, #4294967295
 800557e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005580:	69bb      	ldr	r3, [r7, #24]
	}
 8005582:	4618      	mov	r0, r3
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	461a      	mov	r2, r3
 80055a4:	21a5      	movs	r1, #165	@ 0xa5
 80055a6:	f001 fdff 	bl	80071a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055b4:	3b01      	subs	r3, #1
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	f023 0307 	bic.w	r3, r3, #7
 80055c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	617b      	str	r3, [r7, #20]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01f      	beq.n	800562c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ec:	2300      	movs	r3, #0
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	e012      	b.n	8005618 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	7819      	ldrb	r1, [r3, #0]
 80055fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	4413      	add	r3, r2
 8005600:	3334      	adds	r3, #52	@ 0x34
 8005602:	460a      	mov	r2, r1
 8005604:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	4413      	add	r3, r2
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d006      	beq.n	8005620 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3301      	adds	r3, #1
 8005616:	61fb      	str	r3, [r7, #28]
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	2b0f      	cmp	r3, #15
 800561c:	d9e9      	bls.n	80055f2 <prvInitialiseNewTask+0x66>
 800561e:	e000      	b.n	8005622 <prvInitialiseNewTask+0x96>
			{
				break;
 8005620:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800562a:	e003      	b.n	8005634 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005636:	2b37      	cmp	r3, #55	@ 0x37
 8005638:	d901      	bls.n	800563e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800563a:	2337      	movs	r3, #55	@ 0x37
 800563c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005642:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005648:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	2200      	movs	r2, #0
 800564e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	3304      	adds	r3, #4
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff f96a 	bl	800492e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	3318      	adds	r3, #24
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff f965 	bl	800492e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005668:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800566a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005672:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005678:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	2200      	movs	r2, #0
 800567e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005684:	2200      	movs	r2, #0
 8005686:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800568a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568c:	3354      	adds	r3, #84	@ 0x54
 800568e:	224c      	movs	r2, #76	@ 0x4c
 8005690:	2100      	movs	r1, #0
 8005692:	4618      	mov	r0, r3
 8005694:	f001 fd88 	bl	80071a8 <memset>
 8005698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569a:	4a0d      	ldr	r2, [pc, #52]	@ (80056d0 <prvInitialiseNewTask+0x144>)
 800569c:	659a      	str	r2, [r3, #88]	@ 0x58
 800569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a0:	4a0c      	ldr	r2, [pc, #48]	@ (80056d4 <prvInitialiseNewTask+0x148>)
 80056a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	4a0c      	ldr	r2, [pc, #48]	@ (80056d8 <prvInitialiseNewTask+0x14c>)
 80056a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	68f9      	ldr	r1, [r7, #12]
 80056ae:	69b8      	ldr	r0, [r7, #24]
 80056b0:	f001 f99e 	bl	80069f0 <pxPortInitialiseStack>
 80056b4:	4602      	mov	r2, r0
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056c6:	bf00      	nop
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20001f30 	.word	0x20001f30
 80056d4:	20001f98 	.word	0x20001f98
 80056d8:	20002000 	.word	0x20002000

080056dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056e4:	f001 fa72 	bl	8006bcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056e8:	4b2d      	ldr	r3, [pc, #180]	@ (80057a0 <prvAddNewTaskToReadyList+0xc4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	4a2c      	ldr	r2, [pc, #176]	@ (80057a0 <prvAddNewTaskToReadyList+0xc4>)
 80056f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056f2:	4b2c      	ldr	r3, [pc, #176]	@ (80057a4 <prvAddNewTaskToReadyList+0xc8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d109      	bne.n	800570e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056fa:	4a2a      	ldr	r2, [pc, #168]	@ (80057a4 <prvAddNewTaskToReadyList+0xc8>)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005700:	4b27      	ldr	r3, [pc, #156]	@ (80057a0 <prvAddNewTaskToReadyList+0xc4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d110      	bne.n	800572a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005708:	f000 fc74 	bl	8005ff4 <prvInitialiseTaskLists>
 800570c:	e00d      	b.n	800572a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800570e:	4b26      	ldr	r3, [pc, #152]	@ (80057a8 <prvAddNewTaskToReadyList+0xcc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005716:	4b23      	ldr	r3, [pc, #140]	@ (80057a4 <prvAddNewTaskToReadyList+0xc8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005720:	429a      	cmp	r2, r3
 8005722:	d802      	bhi.n	800572a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005724:	4a1f      	ldr	r2, [pc, #124]	@ (80057a4 <prvAddNewTaskToReadyList+0xc8>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800572a:	4b20      	ldr	r3, [pc, #128]	@ (80057ac <prvAddNewTaskToReadyList+0xd0>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3301      	adds	r3, #1
 8005730:	4a1e      	ldr	r2, [pc, #120]	@ (80057ac <prvAddNewTaskToReadyList+0xd0>)
 8005732:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005734:	4b1d      	ldr	r3, [pc, #116]	@ (80057ac <prvAddNewTaskToReadyList+0xd0>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005740:	4b1b      	ldr	r3, [pc, #108]	@ (80057b0 <prvAddNewTaskToReadyList+0xd4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d903      	bls.n	8005750 <prvAddNewTaskToReadyList+0x74>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	4a18      	ldr	r2, [pc, #96]	@ (80057b0 <prvAddNewTaskToReadyList+0xd4>)
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4a15      	ldr	r2, [pc, #84]	@ (80057b4 <prvAddNewTaskToReadyList+0xd8>)
 800575e:	441a      	add	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4610      	mov	r0, r2
 8005768:	f7ff f8ed 	bl	8004946 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800576c:	f001 fa5e 	bl	8006c2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005770:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <prvAddNewTaskToReadyList+0xcc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00e      	beq.n	8005796 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005778:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <prvAddNewTaskToReadyList+0xc8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	429a      	cmp	r2, r3
 8005784:	d207      	bcs.n	8005796 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005786:	4b0c      	ldr	r3, [pc, #48]	@ (80057b8 <prvAddNewTaskToReadyList+0xdc>)
 8005788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	200011b0 	.word	0x200011b0
 80057a4:	20000cdc 	.word	0x20000cdc
 80057a8:	200011bc 	.word	0x200011bc
 80057ac:	200011cc 	.word	0x200011cc
 80057b0:	200011b8 	.word	0x200011b8
 80057b4:	20000ce0 	.word	0x20000ce0
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	@ 0x28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10b      	bne.n	80057e8 <vTaskDelayUntil+0x2c>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	617b      	str	r3, [r7, #20]
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <vTaskDelayUntil+0x4a>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	613b      	str	r3, [r7, #16]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8005806:	4b2a      	ldr	r3, [pc, #168]	@ (80058b0 <vTaskDelayUntil+0xf4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <vTaskDelayUntil+0x6a>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	60fb      	str	r3, [r7, #12]
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	e7fd      	b.n	8005822 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8005826:	f000 f8b9 	bl	800599c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800582a:	4b22      	ldr	r3, [pc, #136]	@ (80058b4 <vTaskDelayUntil+0xf8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	4413      	add	r3, r2
 8005838:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6a3a      	ldr	r2, [r7, #32]
 8005840:	429a      	cmp	r2, r3
 8005842:	d20b      	bcs.n	800585c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	429a      	cmp	r2, r3
 800584c:	d211      	bcs.n	8005872 <vTaskDelayUntil+0xb6>
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	429a      	cmp	r2, r3
 8005854:	d90d      	bls.n	8005872 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8005856:	2301      	movs	r3, #1
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
 800585a:	e00a      	b.n	8005872 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	429a      	cmp	r2, r3
 8005864:	d303      	bcc.n	800586e <vTaskDelayUntil+0xb2>
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	429a      	cmp	r2, r3
 800586c:	d901      	bls.n	8005872 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800586e:	2301      	movs	r3, #1
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d006      	beq.n	800588c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fd06 	bl	8006298 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800588c:	f000 f894 	bl	80059b8 <xTaskResumeAll>
 8005890:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d107      	bne.n	80058a8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8005898:	4b07      	ldr	r3, [pc, #28]	@ (80058b8 <vTaskDelayUntil+0xfc>)
 800589a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058a8:	bf00      	nop
 80058aa:	3728      	adds	r7, #40	@ 0x28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	200011d8 	.word	0x200011d8
 80058b4:	200011b4 	.word	0x200011b4
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08a      	sub	sp, #40	@ 0x28
 80058c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058ca:	463a      	mov	r2, r7
 80058cc:	1d39      	adds	r1, r7, #4
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe ffda 	bl	800488c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	9202      	str	r2, [sp, #8]
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	2300      	movs	r3, #0
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	2300      	movs	r3, #0
 80058e8:	460a      	mov	r2, r1
 80058ea:	4924      	ldr	r1, [pc, #144]	@ (800597c <vTaskStartScheduler+0xc0>)
 80058ec:	4824      	ldr	r0, [pc, #144]	@ (8005980 <vTaskStartScheduler+0xc4>)
 80058ee:	f7ff fda7 	bl	8005440 <xTaskCreateStatic>
 80058f2:	4603      	mov	r3, r0
 80058f4:	4a23      	ldr	r2, [pc, #140]	@ (8005984 <vTaskStartScheduler+0xc8>)
 80058f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058f8:	4b22      	ldr	r3, [pc, #136]	@ (8005984 <vTaskStartScheduler+0xc8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005900:	2301      	movs	r3, #1
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e001      	b.n	800590a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d102      	bne.n	8005916 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005910:	f000 fd16 	bl	8006340 <xTimerCreateTimerTask>
 8005914:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d11b      	bne.n	8005954 <vTaskStartScheduler+0x98>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	613b      	str	r3, [r7, #16]
}
 800592e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005930:	4b15      	ldr	r3, [pc, #84]	@ (8005988 <vTaskStartScheduler+0xcc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3354      	adds	r3, #84	@ 0x54
 8005936:	4a15      	ldr	r2, [pc, #84]	@ (800598c <vTaskStartScheduler+0xd0>)
 8005938:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800593a:	4b15      	ldr	r3, [pc, #84]	@ (8005990 <vTaskStartScheduler+0xd4>)
 800593c:	f04f 32ff 	mov.w	r2, #4294967295
 8005940:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005942:	4b14      	ldr	r3, [pc, #80]	@ (8005994 <vTaskStartScheduler+0xd8>)
 8005944:	2201      	movs	r2, #1
 8005946:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005948:	4b13      	ldr	r3, [pc, #76]	@ (8005998 <vTaskStartScheduler+0xdc>)
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800594e:	f001 f8cb 	bl	8006ae8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005952:	e00f      	b.n	8005974 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d10b      	bne.n	8005974 <vTaskStartScheduler+0xb8>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60fb      	str	r3, [r7, #12]
}
 800596e:	bf00      	nop
 8005970:	bf00      	nop
 8005972:	e7fd      	b.n	8005970 <vTaskStartScheduler+0xb4>
}
 8005974:	bf00      	nop
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	080073b4 	.word	0x080073b4
 8005980:	08005fc5 	.word	0x08005fc5
 8005984:	200011d4 	.word	0x200011d4
 8005988:	20000cdc 	.word	0x20000cdc
 800598c:	20000014 	.word	0x20000014
 8005990:	200011d0 	.word	0x200011d0
 8005994:	200011bc 	.word	0x200011bc
 8005998:	200011b4 	.word	0x200011b4

0800599c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80059a0:	4b04      	ldr	r3, [pc, #16]	@ (80059b4 <vTaskSuspendAll+0x18>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3301      	adds	r3, #1
 80059a6:	4a03      	ldr	r2, [pc, #12]	@ (80059b4 <vTaskSuspendAll+0x18>)
 80059a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80059aa:	bf00      	nop
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	200011d8 	.word	0x200011d8

080059b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059c6:	4b42      	ldr	r3, [pc, #264]	@ (8005ad0 <xTaskResumeAll+0x118>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10b      	bne.n	80059e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	603b      	str	r3, [r7, #0]
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	e7fd      	b.n	80059e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059e6:	f001 f8f1 	bl	8006bcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059ea:	4b39      	ldr	r3, [pc, #228]	@ (8005ad0 <xTaskResumeAll+0x118>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	4a37      	ldr	r2, [pc, #220]	@ (8005ad0 <xTaskResumeAll+0x118>)
 80059f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059f4:	4b36      	ldr	r3, [pc, #216]	@ (8005ad0 <xTaskResumeAll+0x118>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d162      	bne.n	8005ac2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059fc:	4b35      	ldr	r3, [pc, #212]	@ (8005ad4 <xTaskResumeAll+0x11c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d05e      	beq.n	8005ac2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a04:	e02f      	b.n	8005a66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a06:	4b34      	ldr	r3, [pc, #208]	@ (8005ad8 <xTaskResumeAll+0x120>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fff2 	bl	80049fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe ffed 	bl	80049fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a26:	4b2d      	ldr	r3, [pc, #180]	@ (8005adc <xTaskResumeAll+0x124>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d903      	bls.n	8005a36 <xTaskResumeAll+0x7e>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	4a2a      	ldr	r2, [pc, #168]	@ (8005adc <xTaskResumeAll+0x124>)
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4a27      	ldr	r2, [pc, #156]	@ (8005ae0 <xTaskResumeAll+0x128>)
 8005a44:	441a      	add	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	f7fe ff7a 	bl	8004946 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a56:	4b23      	ldr	r3, [pc, #140]	@ (8005ae4 <xTaskResumeAll+0x12c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d302      	bcc.n	8005a66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005a60:	4b21      	ldr	r3, [pc, #132]	@ (8005ae8 <xTaskResumeAll+0x130>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a66:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad8 <xTaskResumeAll+0x120>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1cb      	bne.n	8005a06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a74:	f000 fb62 	bl	800613c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a78:	4b1c      	ldr	r3, [pc, #112]	@ (8005aec <xTaskResumeAll+0x134>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d010      	beq.n	8005aa6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a84:	f000 f844 	bl	8005b10 <xTaskIncrementTick>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005a8e:	4b16      	ldr	r3, [pc, #88]	@ (8005ae8 <xTaskResumeAll+0x130>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f1      	bne.n	8005a84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005aa0:	4b12      	ldr	r3, [pc, #72]	@ (8005aec <xTaskResumeAll+0x134>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005aa6:	4b10      	ldr	r3, [pc, #64]	@ (8005ae8 <xTaskResumeAll+0x130>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8005af0 <xTaskResumeAll+0x138>)
 8005ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ac2:	f001 f8b3 	bl	8006c2c <vPortExitCritical>

	return xAlreadyYielded;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	200011d8 	.word	0x200011d8
 8005ad4:	200011b0 	.word	0x200011b0
 8005ad8:	20001170 	.word	0x20001170
 8005adc:	200011b8 	.word	0x200011b8
 8005ae0:	20000ce0 	.word	0x20000ce0
 8005ae4:	20000cdc 	.word	0x20000cdc
 8005ae8:	200011c4 	.word	0x200011c4
 8005aec:	200011c0 	.word	0x200011c0
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005afa:	4b04      	ldr	r3, [pc, #16]	@ (8005b0c <xTaskGetTickCount+0x18>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b00:	687b      	ldr	r3, [r7, #4]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr
 8005b0c:	200011b4 	.word	0x200011b4

08005b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8005c58 <xTaskIncrementTick+0x148>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f040 8090 	bne.w	8005c44 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b24:	4b4d      	ldr	r3, [pc, #308]	@ (8005c5c <xTaskIncrementTick+0x14c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b2c:	4a4b      	ldr	r2, [pc, #300]	@ (8005c5c <xTaskIncrementTick+0x14c>)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d121      	bne.n	8005b7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b38:	4b49      	ldr	r3, [pc, #292]	@ (8005c60 <xTaskIncrementTick+0x150>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	603b      	str	r3, [r7, #0]
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop
 8005b58:	e7fd      	b.n	8005b56 <xTaskIncrementTick+0x46>
 8005b5a:	4b41      	ldr	r3, [pc, #260]	@ (8005c60 <xTaskIncrementTick+0x150>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	4b40      	ldr	r3, [pc, #256]	@ (8005c64 <xTaskIncrementTick+0x154>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a3e      	ldr	r2, [pc, #248]	@ (8005c60 <xTaskIncrementTick+0x150>)
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	4a3e      	ldr	r2, [pc, #248]	@ (8005c64 <xTaskIncrementTick+0x154>)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c68 <xTaskIncrementTick+0x158>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3301      	adds	r3, #1
 8005b74:	4a3c      	ldr	r2, [pc, #240]	@ (8005c68 <xTaskIncrementTick+0x158>)
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	f000 fae0 	bl	800613c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c6c <xTaskIncrementTick+0x15c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d349      	bcc.n	8005c1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b86:	4b36      	ldr	r3, [pc, #216]	@ (8005c60 <xTaskIncrementTick+0x150>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d104      	bne.n	8005b9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b90:	4b36      	ldr	r3, [pc, #216]	@ (8005c6c <xTaskIncrementTick+0x15c>)
 8005b92:	f04f 32ff 	mov.w	r2, #4294967295
 8005b96:	601a      	str	r2, [r3, #0]
					break;
 8005b98:	e03f      	b.n	8005c1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b9a:	4b31      	ldr	r3, [pc, #196]	@ (8005c60 <xTaskIncrementTick+0x150>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d203      	bcs.n	8005bba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bb2:	4a2e      	ldr	r2, [pc, #184]	@ (8005c6c <xTaskIncrementTick+0x15c>)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bb8:	e02f      	b.n	8005c1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe ff1c 	bl	80049fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	3318      	adds	r3, #24
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe ff13 	bl	80049fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bda:	4b25      	ldr	r3, [pc, #148]	@ (8005c70 <xTaskIncrementTick+0x160>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d903      	bls.n	8005bea <xTaskIncrementTick+0xda>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	4a22      	ldr	r2, [pc, #136]	@ (8005c70 <xTaskIncrementTick+0x160>)
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c74 <xTaskIncrementTick+0x164>)
 8005bf8:	441a      	add	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7fe fea0 	bl	8004946 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c78 <xTaskIncrementTick+0x168>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d3b8      	bcc.n	8005b86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c18:	e7b5      	b.n	8005b86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c1a:	4b17      	ldr	r3, [pc, #92]	@ (8005c78 <xTaskIncrementTick+0x168>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c20:	4914      	ldr	r1, [pc, #80]	@ (8005c74 <xTaskIncrementTick+0x164>)
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d901      	bls.n	8005c36 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005c32:	2301      	movs	r3, #1
 8005c34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c36:	4b11      	ldr	r3, [pc, #68]	@ (8005c7c <xTaskIncrementTick+0x16c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	e004      	b.n	8005c4e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c44:	4b0e      	ldr	r3, [pc, #56]	@ (8005c80 <xTaskIncrementTick+0x170>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c80 <xTaskIncrementTick+0x170>)
 8005c4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c4e:	697b      	ldr	r3, [r7, #20]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	200011d8 	.word	0x200011d8
 8005c5c:	200011b4 	.word	0x200011b4
 8005c60:	20001168 	.word	0x20001168
 8005c64:	2000116c 	.word	0x2000116c
 8005c68:	200011c8 	.word	0x200011c8
 8005c6c:	200011d0 	.word	0x200011d0
 8005c70:	200011b8 	.word	0x200011b8
 8005c74:	20000ce0 	.word	0x20000ce0
 8005c78:	20000cdc 	.word	0x20000cdc
 8005c7c:	200011c4 	.word	0x200011c4
 8005c80:	200011c0 	.word	0x200011c0

08005c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005d34 <vTaskSwitchContext+0xb0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c92:	4b29      	ldr	r3, [pc, #164]	@ (8005d38 <vTaskSwitchContext+0xb4>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c98:	e047      	b.n	8005d2a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005c9a:	4b27      	ldr	r3, [pc, #156]	@ (8005d38 <vTaskSwitchContext+0xb4>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca0:	4b26      	ldr	r3, [pc, #152]	@ (8005d3c <vTaskSwitchContext+0xb8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	e011      	b.n	8005ccc <vTaskSwitchContext+0x48>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <vTaskSwitchContext+0x42>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	607b      	str	r3, [r7, #4]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <vTaskSwitchContext+0x3e>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	491c      	ldr	r1, [pc, #112]	@ (8005d40 <vTaskSwitchContext+0xbc>)
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0e3      	beq.n	8005ca8 <vTaskSwitchContext+0x24>
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4a15      	ldr	r2, [pc, #84]	@ (8005d40 <vTaskSwitchContext+0xbc>)
 8005cec:	4413      	add	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	3308      	adds	r3, #8
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d104      	bne.n	8005d10 <vTaskSwitchContext+0x8c>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	605a      	str	r2, [r3, #4]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	4a0b      	ldr	r2, [pc, #44]	@ (8005d44 <vTaskSwitchContext+0xc0>)
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4a08      	ldr	r2, [pc, #32]	@ (8005d3c <vTaskSwitchContext+0xb8>)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d20:	4b08      	ldr	r3, [pc, #32]	@ (8005d44 <vTaskSwitchContext+0xc0>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3354      	adds	r3, #84	@ 0x54
 8005d26:	4a08      	ldr	r2, [pc, #32]	@ (8005d48 <vTaskSwitchContext+0xc4>)
 8005d28:	6013      	str	r3, [r2, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr
 8005d34:	200011d8 	.word	0x200011d8
 8005d38:	200011c4 	.word	0x200011c4
 8005d3c:	200011b8 	.word	0x200011b8
 8005d40:	20000ce0 	.word	0x20000ce0
 8005d44:	20000cdc 	.word	0x20000cdc
 8005d48:	20000014 	.word	0x20000014

08005d4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	60fb      	str	r3, [r7, #12]
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	e7fd      	b.n	8005d70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d74:	4b07      	ldr	r3, [pc, #28]	@ (8005d94 <vTaskPlaceOnEventList+0x48>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3318      	adds	r3, #24
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7fe fe05 	bl	800498c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d82:	2101      	movs	r1, #1
 8005d84:	6838      	ldr	r0, [r7, #0]
 8005d86:	f000 fa87 	bl	8006298 <prvAddCurrentTaskToDelayedList>
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000cdc 	.word	0x20000cdc

08005d98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	617b      	str	r3, [r7, #20]
}
 8005dbc:	bf00      	nop
 8005dbe:	bf00      	nop
 8005dc0:	e7fd      	b.n	8005dbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dec <vTaskPlaceOnEventListRestricted+0x54>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3318      	adds	r3, #24
 8005dc8:	4619      	mov	r1, r3
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7fe fdbb 	bl	8004946 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	68b8      	ldr	r0, [r7, #8]
 8005de0:	f000 fa5a 	bl	8006298 <prvAddCurrentTaskToDelayedList>
	}
 8005de4:	bf00      	nop
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20000cdc 	.word	0x20000cdc

08005df0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10b      	bne.n	8005e1e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60fb      	str	r3, [r7, #12]
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	e7fd      	b.n	8005e1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	3318      	adds	r3, #24
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe fdea 	bl	80049fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea0 <xTaskRemoveFromEventList+0xb0>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d11d      	bne.n	8005e6c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fe fde1 	bl	80049fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3e:	4b19      	ldr	r3, [pc, #100]	@ (8005ea4 <xTaskRemoveFromEventList+0xb4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d903      	bls.n	8005e4e <xTaskRemoveFromEventList+0x5e>
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4a:	4a16      	ldr	r2, [pc, #88]	@ (8005ea4 <xTaskRemoveFromEventList+0xb4>)
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4a13      	ldr	r2, [pc, #76]	@ (8005ea8 <xTaskRemoveFromEventList+0xb8>)
 8005e5c:	441a      	add	r2, r3
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	3304      	adds	r3, #4
 8005e62:	4619      	mov	r1, r3
 8005e64:	4610      	mov	r0, r2
 8005e66:	f7fe fd6e 	bl	8004946 <vListInsertEnd>
 8005e6a:	e005      	b.n	8005e78 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	3318      	adds	r3, #24
 8005e70:	4619      	mov	r1, r3
 8005e72:	480e      	ldr	r0, [pc, #56]	@ (8005eac <xTaskRemoveFromEventList+0xbc>)
 8005e74:	f7fe fd67 	bl	8004946 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb0 <xTaskRemoveFromEventList+0xc0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d905      	bls.n	8005e92 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e86:	2301      	movs	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb4 <xTaskRemoveFromEventList+0xc4>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e001      	b.n	8005e96 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e96:	697b      	ldr	r3, [r7, #20]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	200011d8 	.word	0x200011d8
 8005ea4:	200011b8 	.word	0x200011b8
 8005ea8:	20000ce0 	.word	0x20000ce0
 8005eac:	20001170 	.word	0x20001170
 8005eb0:	20000cdc 	.word	0x20000cdc
 8005eb4:	200011c4 	.word	0x200011c4

08005eb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ec0:	4b06      	ldr	r3, [pc, #24]	@ (8005edc <vTaskInternalSetTimeOutState+0x24>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ec8:	4b05      	ldr	r3, [pc, #20]	@ (8005ee0 <vTaskInternalSetTimeOutState+0x28>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	605a      	str	r2, [r3, #4]
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	200011c8 	.word	0x200011c8
 8005ee0:	200011b4 	.word	0x200011b4

08005ee4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	613b      	str	r3, [r7, #16]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10b      	bne.n	8005f2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	60fb      	str	r3, [r7, #12]
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	e7fd      	b.n	8005f26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005f2a:	f000 fe4f 	bl	8006bcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa4 <xTaskCheckForTimeOut+0xc0>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d102      	bne.n	8005f4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	e023      	b.n	8005f96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4b15      	ldr	r3, [pc, #84]	@ (8005fa8 <xTaskCheckForTimeOut+0xc4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d007      	beq.n	8005f6a <xTaskCheckForTimeOut+0x86>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d302      	bcc.n	8005f6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f64:	2301      	movs	r3, #1
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	e015      	b.n	8005f96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d20b      	bcs.n	8005f8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	1ad2      	subs	r2, r2, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff ff99 	bl	8005eb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	e004      	b.n	8005f96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f92:	2301      	movs	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f96:	f000 fe49 	bl	8006c2c <vPortExitCritical>

	return xReturn;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3720      	adds	r7, #32
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	200011b4 	.word	0x200011b4
 8005fa8:	200011c8 	.word	0x200011c8

08005fac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fb0:	4b03      	ldr	r3, [pc, #12]	@ (8005fc0 <vTaskMissedYield+0x14>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
}
 8005fb6:	bf00      	nop
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	200011c4 	.word	0x200011c4

08005fc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fcc:	f000 f852 	bl	8006074 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fd0:	4b06      	ldr	r3, [pc, #24]	@ (8005fec <prvIdleTask+0x28>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d9f9      	bls.n	8005fcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005fd8:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <prvIdleTask+0x2c>)
 8005fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fe8:	e7f0      	b.n	8005fcc <prvIdleTask+0x8>
 8005fea:	bf00      	nop
 8005fec:	20000ce0 	.word	0x20000ce0
 8005ff0:	e000ed04 	.word	0xe000ed04

08005ff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	607b      	str	r3, [r7, #4]
 8005ffe:	e00c      	b.n	800601a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4a12      	ldr	r2, [pc, #72]	@ (8006054 <prvInitialiseTaskLists+0x60>)
 800600c:	4413      	add	r3, r2
 800600e:	4618      	mov	r0, r3
 8006010:	f7fe fc6e 	bl	80048f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3301      	adds	r3, #1
 8006018:	607b      	str	r3, [r7, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b37      	cmp	r3, #55	@ 0x37
 800601e:	d9ef      	bls.n	8006000 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006020:	480d      	ldr	r0, [pc, #52]	@ (8006058 <prvInitialiseTaskLists+0x64>)
 8006022:	f7fe fc65 	bl	80048f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006026:	480d      	ldr	r0, [pc, #52]	@ (800605c <prvInitialiseTaskLists+0x68>)
 8006028:	f7fe fc62 	bl	80048f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800602c:	480c      	ldr	r0, [pc, #48]	@ (8006060 <prvInitialiseTaskLists+0x6c>)
 800602e:	f7fe fc5f 	bl	80048f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006032:	480c      	ldr	r0, [pc, #48]	@ (8006064 <prvInitialiseTaskLists+0x70>)
 8006034:	f7fe fc5c 	bl	80048f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006038:	480b      	ldr	r0, [pc, #44]	@ (8006068 <prvInitialiseTaskLists+0x74>)
 800603a:	f7fe fc59 	bl	80048f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800603e:	4b0b      	ldr	r3, [pc, #44]	@ (800606c <prvInitialiseTaskLists+0x78>)
 8006040:	4a05      	ldr	r2, [pc, #20]	@ (8006058 <prvInitialiseTaskLists+0x64>)
 8006042:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006044:	4b0a      	ldr	r3, [pc, #40]	@ (8006070 <prvInitialiseTaskLists+0x7c>)
 8006046:	4a05      	ldr	r2, [pc, #20]	@ (800605c <prvInitialiseTaskLists+0x68>)
 8006048:	601a      	str	r2, [r3, #0]
}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000ce0 	.word	0x20000ce0
 8006058:	20001140 	.word	0x20001140
 800605c:	20001154 	.word	0x20001154
 8006060:	20001170 	.word	0x20001170
 8006064:	20001184 	.word	0x20001184
 8006068:	2000119c 	.word	0x2000119c
 800606c:	20001168 	.word	0x20001168
 8006070:	2000116c 	.word	0x2000116c

08006074 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800607a:	e019      	b.n	80060b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800607c:	f000 fda6 	bl	8006bcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006080:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <prvCheckTasksWaitingTermination+0x50>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3304      	adds	r3, #4
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fcb5 	bl	80049fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <prvCheckTasksWaitingTermination+0x54>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3b01      	subs	r3, #1
 8006098:	4a0b      	ldr	r2, [pc, #44]	@ (80060c8 <prvCheckTasksWaitingTermination+0x54>)
 800609a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800609c:	4b0b      	ldr	r3, [pc, #44]	@ (80060cc <prvCheckTasksWaitingTermination+0x58>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	4a0a      	ldr	r2, [pc, #40]	@ (80060cc <prvCheckTasksWaitingTermination+0x58>)
 80060a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060a6:	f000 fdc1 	bl	8006c2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f810 	bl	80060d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060b0:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <prvCheckTasksWaitingTermination+0x58>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e1      	bne.n	800607c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20001184 	.word	0x20001184
 80060c8:	200011b0 	.word	0x200011b0
 80060cc:	20001198 	.word	0x20001198

080060d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3354      	adds	r3, #84	@ 0x54
 80060dc:	4618      	mov	r0, r3
 80060de:	f001 f86b 	bl	80071b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d108      	bne.n	80060fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 ff3b 	bl	8006f6c <vPortFree>
				vPortFree( pxTCB );
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 ff38 	bl	8006f6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060fc:	e019      	b.n	8006132 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006104:	2b01      	cmp	r3, #1
 8006106:	d103      	bne.n	8006110 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 ff2f 	bl	8006f6c <vPortFree>
	}
 800610e:	e010      	b.n	8006132 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006116:	2b02      	cmp	r3, #2
 8006118:	d00b      	beq.n	8006132 <prvDeleteTCB+0x62>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	60fb      	str	r3, [r7, #12]
}
 800612c:	bf00      	nop
 800612e:	bf00      	nop
 8006130:	e7fd      	b.n	800612e <prvDeleteTCB+0x5e>
	}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006142:	4b0c      	ldr	r3, [pc, #48]	@ (8006174 <prvResetNextTaskUnblockTime+0x38>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d104      	bne.n	8006156 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800614c:	4b0a      	ldr	r3, [pc, #40]	@ (8006178 <prvResetNextTaskUnblockTime+0x3c>)
 800614e:	f04f 32ff 	mov.w	r2, #4294967295
 8006152:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006154:	e008      	b.n	8006168 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006156:	4b07      	ldr	r3, [pc, #28]	@ (8006174 <prvResetNextTaskUnblockTime+0x38>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4a04      	ldr	r2, [pc, #16]	@ (8006178 <prvResetNextTaskUnblockTime+0x3c>)
 8006166:	6013      	str	r3, [r2, #0]
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20001168 	.word	0x20001168
 8006178:	200011d0 	.word	0x200011d0

0800617c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006182:	4b0b      	ldr	r3, [pc, #44]	@ (80061b0 <xTaskGetSchedulerState+0x34>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d102      	bne.n	8006190 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800618a:	2301      	movs	r3, #1
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	e008      	b.n	80061a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006190:	4b08      	ldr	r3, [pc, #32]	@ (80061b4 <xTaskGetSchedulerState+0x38>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006198:	2302      	movs	r3, #2
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	e001      	b.n	80061a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061a2:	687b      	ldr	r3, [r7, #4]
	}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bc80      	pop	{r7}
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	200011bc 	.word	0x200011bc
 80061b4:	200011d8 	.word	0x200011d8

080061b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d058      	beq.n	8006280 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80061ce:	4b2f      	ldr	r3, [pc, #188]	@ (800628c <xTaskPriorityDisinherit+0xd4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d00b      	beq.n	80061f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	60fb      	str	r3, [r7, #12]
}
 80061ea:	bf00      	nop
 80061ec:	bf00      	nop
 80061ee:	e7fd      	b.n	80061ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	60bb      	str	r3, [r7, #8]
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006214:	1e5a      	subs	r2, r3, #1
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006222:	429a      	cmp	r2, r3
 8006224:	d02c      	beq.n	8006280 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800622a:	2b00      	cmp	r3, #0
 800622c:	d128      	bne.n	8006280 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	3304      	adds	r3, #4
 8006232:	4618      	mov	r0, r3
 8006234:	f7fe fbe2 	bl	80049fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006250:	4b0f      	ldr	r3, [pc, #60]	@ (8006290 <xTaskPriorityDisinherit+0xd8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d903      	bls.n	8006260 <xTaskPriorityDisinherit+0xa8>
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625c:	4a0c      	ldr	r2, [pc, #48]	@ (8006290 <xTaskPriorityDisinherit+0xd8>)
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4a09      	ldr	r2, [pc, #36]	@ (8006294 <xTaskPriorityDisinherit+0xdc>)
 800626e:	441a      	add	r2, r3
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	3304      	adds	r3, #4
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f7fe fb65 	bl	8004946 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800627c:	2301      	movs	r3, #1
 800627e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006280:	697b      	ldr	r3, [r7, #20]
	}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000cdc 	.word	0x20000cdc
 8006290:	200011b8 	.word	0x200011b8
 8006294:	20000ce0 	.word	0x20000ce0

08006298 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062a2:	4b21      	ldr	r3, [pc, #132]	@ (8006328 <prvAddCurrentTaskToDelayedList+0x90>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062a8:	4b20      	ldr	r3, [pc, #128]	@ (800632c <prvAddCurrentTaskToDelayedList+0x94>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fba4 	bl	80049fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ba:	d10a      	bne.n	80062d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062c2:	4b1a      	ldr	r3, [pc, #104]	@ (800632c <prvAddCurrentTaskToDelayedList+0x94>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4619      	mov	r1, r3
 80062ca:	4819      	ldr	r0, [pc, #100]	@ (8006330 <prvAddCurrentTaskToDelayedList+0x98>)
 80062cc:	f7fe fb3b 	bl	8004946 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062d0:	e026      	b.n	8006320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4413      	add	r3, r2
 80062d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062da:	4b14      	ldr	r3, [pc, #80]	@ (800632c <prvAddCurrentTaskToDelayedList+0x94>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d209      	bcs.n	80062fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ea:	4b12      	ldr	r3, [pc, #72]	@ (8006334 <prvAddCurrentTaskToDelayedList+0x9c>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4b0f      	ldr	r3, [pc, #60]	@ (800632c <prvAddCurrentTaskToDelayedList+0x94>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f7fe fb48 	bl	800498c <vListInsert>
}
 80062fc:	e010      	b.n	8006320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006338 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4b0a      	ldr	r3, [pc, #40]	@ (800632c <prvAddCurrentTaskToDelayedList+0x94>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3304      	adds	r3, #4
 8006308:	4619      	mov	r1, r3
 800630a:	4610      	mov	r0, r2
 800630c:	f7fe fb3e 	bl	800498c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006310:	4b0a      	ldr	r3, [pc, #40]	@ (800633c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	d202      	bcs.n	8006320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800631a:	4a08      	ldr	r2, [pc, #32]	@ (800633c <prvAddCurrentTaskToDelayedList+0xa4>)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	6013      	str	r3, [r2, #0]
}
 8006320:	bf00      	nop
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	200011b4 	.word	0x200011b4
 800632c:	20000cdc 	.word	0x20000cdc
 8006330:	2000119c 	.word	0x2000119c
 8006334:	2000116c 	.word	0x2000116c
 8006338:	20001168 	.word	0x20001168
 800633c:	200011d0 	.word	0x200011d0

08006340 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	@ 0x28
 8006344:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006346:	2300      	movs	r3, #0
 8006348:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800634a:	f000 fb11 	bl	8006970 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800634e:	4b1d      	ldr	r3, [pc, #116]	@ (80063c4 <xTimerCreateTimerTask+0x84>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d021      	beq.n	800639a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800635e:	1d3a      	adds	r2, r7, #4
 8006360:	f107 0108 	add.w	r1, r7, #8
 8006364:	f107 030c 	add.w	r3, r7, #12
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe faa7 	bl	80048bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	9202      	str	r2, [sp, #8]
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	2302      	movs	r3, #2
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	2300      	movs	r3, #0
 800637e:	460a      	mov	r2, r1
 8006380:	4911      	ldr	r1, [pc, #68]	@ (80063c8 <xTimerCreateTimerTask+0x88>)
 8006382:	4812      	ldr	r0, [pc, #72]	@ (80063cc <xTimerCreateTimerTask+0x8c>)
 8006384:	f7ff f85c 	bl	8005440 <xTaskCreateStatic>
 8006388:	4603      	mov	r3, r0
 800638a:	4a11      	ldr	r2, [pc, #68]	@ (80063d0 <xTimerCreateTimerTask+0x90>)
 800638c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800638e:	4b10      	ldr	r3, [pc, #64]	@ (80063d0 <xTimerCreateTimerTask+0x90>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006396:	2301      	movs	r3, #1
 8006398:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10b      	bne.n	80063b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	613b      	str	r3, [r7, #16]
}
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
 80063b6:	e7fd      	b.n	80063b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80063b8:	697b      	ldr	r3, [r7, #20]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	2000120c 	.word	0x2000120c
 80063c8:	080073bc 	.word	0x080073bc
 80063cc:	0800650d 	.word	0x0800650d
 80063d0:	20001210 	.word	0x20001210

080063d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08a      	sub	sp, #40	@ 0x28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10b      	bne.n	8006404 <xTimerGenericCommand+0x30>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	623b      	str	r3, [r7, #32]
}
 80063fe:	bf00      	nop
 8006400:	bf00      	nop
 8006402:	e7fd      	b.n	8006400 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006404:	4b19      	ldr	r3, [pc, #100]	@ (800646c <xTimerGenericCommand+0x98>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d02a      	beq.n	8006462 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b05      	cmp	r3, #5
 800641c:	dc18      	bgt.n	8006450 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800641e:	f7ff fead 	bl	800617c <xTaskGetSchedulerState>
 8006422:	4603      	mov	r3, r0
 8006424:	2b02      	cmp	r3, #2
 8006426:	d109      	bne.n	800643c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006428:	4b10      	ldr	r3, [pc, #64]	@ (800646c <xTimerGenericCommand+0x98>)
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	f107 0110 	add.w	r1, r7, #16
 8006430:	2300      	movs	r3, #0
 8006432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006434:	f7fe fc16 	bl	8004c64 <xQueueGenericSend>
 8006438:	6278      	str	r0, [r7, #36]	@ 0x24
 800643a:	e012      	b.n	8006462 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800643c:	4b0b      	ldr	r3, [pc, #44]	@ (800646c <xTimerGenericCommand+0x98>)
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	f107 0110 	add.w	r1, r7, #16
 8006444:	2300      	movs	r3, #0
 8006446:	2200      	movs	r2, #0
 8006448:	f7fe fc0c 	bl	8004c64 <xQueueGenericSend>
 800644c:	6278      	str	r0, [r7, #36]	@ 0x24
 800644e:	e008      	b.n	8006462 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006450:	4b06      	ldr	r3, [pc, #24]	@ (800646c <xTimerGenericCommand+0x98>)
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	f107 0110 	add.w	r1, r7, #16
 8006458:	2300      	movs	r3, #0
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	f7fe fd04 	bl	8004e68 <xQueueGenericSendFromISR>
 8006460:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006464:	4618      	mov	r0, r3
 8006466:	3728      	adds	r7, #40	@ 0x28
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	2000120c 	.word	0x2000120c

08006470 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af02      	add	r7, sp, #8
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800647a:	4b23      	ldr	r3, [pc, #140]	@ (8006508 <prvProcessExpiredTimer+0x98>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	3304      	adds	r3, #4
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe fab7 	bl	80049fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d023      	beq.n	80064e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	699a      	ldr	r2, [r3, #24]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	18d1      	adds	r1, r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	6978      	ldr	r0, [r7, #20]
 80064aa:	f000 f8d3 	bl	8006654 <prvInsertTimerInActiveList>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d020      	beq.n	80064f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064b4:	2300      	movs	r3, #0
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	2300      	movs	r3, #0
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	2100      	movs	r1, #0
 80064be:	6978      	ldr	r0, [r7, #20]
 80064c0:	f7ff ff88 	bl	80063d4 <xTimerGenericCommand>
 80064c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d114      	bne.n	80064f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	60fb      	str	r3, [r7, #12]
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	6978      	ldr	r0, [r7, #20]
 80064fc:	4798      	blx	r3
}
 80064fe:	bf00      	nop
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20001204 	.word	0x20001204

0800650c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006514:	f107 0308 	add.w	r3, r7, #8
 8006518:	4618      	mov	r0, r3
 800651a:	f000 f859 	bl	80065d0 <prvGetNextExpireTime>
 800651e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4619      	mov	r1, r3
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f805 	bl	8006534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800652a:	f000 f8d5 	bl	80066d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800652e:	bf00      	nop
 8006530:	e7f0      	b.n	8006514 <prvTimerTask+0x8>
	...

08006534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800653e:	f7ff fa2d 	bl	800599c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006542:	f107 0308 	add.w	r3, r7, #8
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f864 	bl	8006614 <prvSampleTimeNow>
 800654c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d130      	bne.n	80065b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <prvProcessTimerOrBlockTask+0x3c>
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	429a      	cmp	r2, r3
 8006560:	d806      	bhi.n	8006570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006562:	f7ff fa29 	bl	80059b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff ff81 	bl	8006470 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800656e:	e024      	b.n	80065ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d008      	beq.n	8006588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006576:	4b13      	ldr	r3, [pc, #76]	@ (80065c4 <prvProcessTimerOrBlockTask+0x90>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <prvProcessTimerOrBlockTask+0x50>
 8006580:	2301      	movs	r3, #1
 8006582:	e000      	b.n	8006586 <prvProcessTimerOrBlockTask+0x52>
 8006584:	2300      	movs	r3, #0
 8006586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006588:	4b0f      	ldr	r3, [pc, #60]	@ (80065c8 <prvProcessTimerOrBlockTask+0x94>)
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	4619      	mov	r1, r3
 8006596:	f7fe ff1f 	bl	80053d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800659a:	f7ff fa0d 	bl	80059b8 <xTaskResumeAll>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80065a4:	4b09      	ldr	r3, [pc, #36]	@ (80065cc <prvProcessTimerOrBlockTask+0x98>)
 80065a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	f3bf 8f6f 	isb	sy
}
 80065b4:	e001      	b.n	80065ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065b6:	f7ff f9ff 	bl	80059b8 <xTaskResumeAll>
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20001208 	.word	0x20001208
 80065c8:	2000120c 	.word	0x2000120c
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <prvGetNextExpireTime+0x40>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <prvGetNextExpireTime+0x16>
 80065e2:	2201      	movs	r2, #1
 80065e4:	e000      	b.n	80065e8 <prvGetNextExpireTime+0x18>
 80065e6:	2200      	movs	r2, #0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065f4:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <prvGetNextExpireTime+0x40>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	e001      	b.n	8006604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006604:	68fb      	ldr	r3, [r7, #12]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr
 8006610:	20001204 	.word	0x20001204

08006614 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800661c:	f7ff fa6a 	bl	8005af4 <xTaskGetTickCount>
 8006620:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006622:	4b0b      	ldr	r3, [pc, #44]	@ (8006650 <prvSampleTimeNow+0x3c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	429a      	cmp	r2, r3
 800662a:	d205      	bcs.n	8006638 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800662c:	f000 f93a 	bl	80068a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	e002      	b.n	800663e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800663e:	4a04      	ldr	r2, [pc, #16]	@ (8006650 <prvSampleTimeNow+0x3c>)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006644:	68fb      	ldr	r3, [r7, #12]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20001214 	.word	0x20001214

08006654 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	429a      	cmp	r2, r3
 8006678:	d812      	bhi.n	80066a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	429a      	cmp	r2, r3
 8006686:	d302      	bcc.n	800668e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006688:	2301      	movs	r3, #1
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e01b      	b.n	80066c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800668e:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <prvInsertTimerInActiveList+0x7c>)
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f7fe f977 	bl	800498c <vListInsert>
 800669e:	e012      	b.n	80066c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d206      	bcs.n	80066b6 <prvInsertTimerInActiveList+0x62>
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d302      	bcc.n	80066b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e007      	b.n	80066c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066b6:	4b07      	ldr	r3, [pc, #28]	@ (80066d4 <prvInsertTimerInActiveList+0x80>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f7fe f963 	bl	800498c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066c6:	697b      	ldr	r3, [r7, #20]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20001208 	.word	0x20001208
 80066d4:	20001204 	.word	0x20001204

080066d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08e      	sub	sp, #56	@ 0x38
 80066dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066de:	e0ce      	b.n	800687e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	da19      	bge.n	800671a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80066e6:	1d3b      	adds	r3, r7, #4
 80066e8:	3304      	adds	r3, #4
 80066ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80066ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10b      	bne.n	800670a <prvProcessReceivedCommands+0x32>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	61fb      	str	r3, [r7, #28]
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	e7fd      	b.n	8006706 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800670a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006710:	6850      	ldr	r0, [r2, #4]
 8006712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006714:	6892      	ldr	r2, [r2, #8]
 8006716:	4611      	mov	r1, r2
 8006718:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f2c0 80ae 	blt.w	800687e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800672e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006730:	3304      	adds	r3, #4
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe f962 	bl	80049fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006738:	463b      	mov	r3, r7
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff ff6a 	bl	8006614 <prvSampleTimeNow>
 8006740:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b09      	cmp	r3, #9
 8006746:	f200 8097 	bhi.w	8006878 <prvProcessReceivedCommands+0x1a0>
 800674a:	a201      	add	r2, pc, #4	@ (adr r2, 8006750 <prvProcessReceivedCommands+0x78>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	08006779 	.word	0x08006779
 8006754:	08006779 	.word	0x08006779
 8006758:	08006779 	.word	0x08006779
 800675c:	080067ef 	.word	0x080067ef
 8006760:	08006803 	.word	0x08006803
 8006764:	0800684f 	.word	0x0800684f
 8006768:	08006779 	.word	0x08006779
 800676c:	08006779 	.word	0x08006779
 8006770:	080067ef 	.word	0x080067ef
 8006774:	08006803 	.word	0x08006803
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	b2da      	uxtb	r2, r3
 8006784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006786:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	18d1      	adds	r1, r2, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006798:	f7ff ff5c 	bl	8006654 <prvInsertTimerInActiveList>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d06c      	beq.n	800687c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d061      	beq.n	800687c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	441a      	add	r2, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	2300      	movs	r3, #0
 80067c6:	2100      	movs	r1, #0
 80067c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067ca:	f7ff fe03 	bl	80063d4 <xTimerGenericCommand>
 80067ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d152      	bne.n	800687c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	61bb      	str	r3, [r7, #24]
}
 80067e8:	bf00      	nop
 80067ea:	bf00      	nop
 80067ec:	e7fd      	b.n	80067ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067f4:	f023 0301 	bic.w	r3, r3, #1
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006800:	e03d      	b.n	800687e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006804:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	b2da      	uxtb	r2, r3
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006818:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10b      	bne.n	800683a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	617b      	str	r3, [r7, #20]
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	e7fd      	b.n	8006836 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800683a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	18d1      	adds	r1, r2, r3
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006848:	f7ff ff04 	bl	8006654 <prvInsertTimerInActiveList>
					break;
 800684c:	e017      	b.n	800687e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d103      	bne.n	8006864 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800685c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800685e:	f000 fb85 	bl	8006f6c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006862:	e00c      	b.n	800687e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	b2da      	uxtb	r2, r3
 8006870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006872:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006876:	e002      	b.n	800687e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006878:	bf00      	nop
 800687a:	e000      	b.n	800687e <prvProcessReceivedCommands+0x1a6>
					break;
 800687c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800687e:	4b08      	ldr	r3, [pc, #32]	@ (80068a0 <prvProcessReceivedCommands+0x1c8>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	1d39      	adds	r1, r7, #4
 8006884:	2200      	movs	r2, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe fb8c 	bl	8004fa4 <xQueueReceive>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	f47f af26 	bne.w	80066e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	3730      	adds	r7, #48	@ 0x30
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	2000120c 	.word	0x2000120c

080068a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068aa:	e049      	b.n	8006940 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006968 <prvSwitchTimerLists+0xc4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006968 <prvSwitchTimerLists+0xc4>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fe f899 	bl	80049fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d02f      	beq.n	8006940 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d90e      	bls.n	8006910 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006968 <prvSwitchTimerLists+0xc4>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3304      	adds	r3, #4
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f7fe f83f 	bl	800498c <vListInsert>
 800690e:	e017      	b.n	8006940 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006910:	2300      	movs	r3, #0
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	2300      	movs	r3, #0
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	2100      	movs	r1, #0
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff fd5a 	bl	80063d4 <xTimerGenericCommand>
 8006920:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10b      	bne.n	8006940 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	603b      	str	r3, [r7, #0]
}
 800693a:	bf00      	nop
 800693c:	bf00      	nop
 800693e:	e7fd      	b.n	800693c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006940:	4b09      	ldr	r3, [pc, #36]	@ (8006968 <prvSwitchTimerLists+0xc4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1b0      	bne.n	80068ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800694a:	4b07      	ldr	r3, [pc, #28]	@ (8006968 <prvSwitchTimerLists+0xc4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006950:	4b06      	ldr	r3, [pc, #24]	@ (800696c <prvSwitchTimerLists+0xc8>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a04      	ldr	r2, [pc, #16]	@ (8006968 <prvSwitchTimerLists+0xc4>)
 8006956:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006958:	4a04      	ldr	r2, [pc, #16]	@ (800696c <prvSwitchTimerLists+0xc8>)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	6013      	str	r3, [r2, #0]
}
 800695e:	bf00      	nop
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20001204 	.word	0x20001204
 800696c:	20001208 	.word	0x20001208

08006970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006976:	f000 f929 	bl	8006bcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800697a:	4b15      	ldr	r3, [pc, #84]	@ (80069d0 <prvCheckForValidListAndQueue+0x60>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d120      	bne.n	80069c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006982:	4814      	ldr	r0, [pc, #80]	@ (80069d4 <prvCheckForValidListAndQueue+0x64>)
 8006984:	f7fd ffb4 	bl	80048f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006988:	4813      	ldr	r0, [pc, #76]	@ (80069d8 <prvCheckForValidListAndQueue+0x68>)
 800698a:	f7fd ffb1 	bl	80048f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800698e:	4b13      	ldr	r3, [pc, #76]	@ (80069dc <prvCheckForValidListAndQueue+0x6c>)
 8006990:	4a10      	ldr	r2, [pc, #64]	@ (80069d4 <prvCheckForValidListAndQueue+0x64>)
 8006992:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006994:	4b12      	ldr	r3, [pc, #72]	@ (80069e0 <prvCheckForValidListAndQueue+0x70>)
 8006996:	4a10      	ldr	r2, [pc, #64]	@ (80069d8 <prvCheckForValidListAndQueue+0x68>)
 8006998:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800699a:	2300      	movs	r3, #0
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	4b11      	ldr	r3, [pc, #68]	@ (80069e4 <prvCheckForValidListAndQueue+0x74>)
 80069a0:	4a11      	ldr	r2, [pc, #68]	@ (80069e8 <prvCheckForValidListAndQueue+0x78>)
 80069a2:	2110      	movs	r1, #16
 80069a4:	200a      	movs	r0, #10
 80069a6:	f7fe f8bd 	bl	8004b24 <xQueueGenericCreateStatic>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4a08      	ldr	r2, [pc, #32]	@ (80069d0 <prvCheckForValidListAndQueue+0x60>)
 80069ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069b0:	4b07      	ldr	r3, [pc, #28]	@ (80069d0 <prvCheckForValidListAndQueue+0x60>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069b8:	4b05      	ldr	r3, [pc, #20]	@ (80069d0 <prvCheckForValidListAndQueue+0x60>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	490b      	ldr	r1, [pc, #44]	@ (80069ec <prvCheckForValidListAndQueue+0x7c>)
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe fce2 	bl	8005388 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069c4:	f000 f932 	bl	8006c2c <vPortExitCritical>
}
 80069c8:	bf00      	nop
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	2000120c 	.word	0x2000120c
 80069d4:	200011dc 	.word	0x200011dc
 80069d8:	200011f0 	.word	0x200011f0
 80069dc:	20001204 	.word	0x20001204
 80069e0:	20001208 	.word	0x20001208
 80069e4:	200012b8 	.word	0x200012b8
 80069e8:	20001218 	.word	0x20001218
 80069ec:	080073c4 	.word	0x080073c4

080069f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3b04      	subs	r3, #4
 8006a00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3b04      	subs	r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f023 0201 	bic.w	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3b04      	subs	r3, #4
 8006a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a20:	4a08      	ldr	r2, [pc, #32]	@ (8006a44 <pxPortInitialiseStack+0x54>)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3b14      	subs	r3, #20
 8006a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3b20      	subs	r3, #32
 8006a36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a38:	68fb      	ldr	r3, [r7, #12]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr
 8006a44:	08006a49 	.word	0x08006a49

08006a48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a52:	4b12      	ldr	r3, [pc, #72]	@ (8006a9c <prvTaskExitError+0x54>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d00b      	beq.n	8006a74 <prvTaskExitError+0x2c>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	60fb      	str	r3, [r7, #12]
}
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	e7fd      	b.n	8006a70 <prvTaskExitError+0x28>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	60bb      	str	r3, [r7, #8]
}
 8006a86:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a88:	bf00      	nop
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0fc      	beq.n	8006a8a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a90:	bf00      	nop
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr
 8006a9c:	20000010 	.word	0x20000010

08006aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006aa0:	4b07      	ldr	r3, [pc, #28]	@ (8006ac0 <pxCurrentTCBConst2>)
 8006aa2:	6819      	ldr	r1, [r3, #0]
 8006aa4:	6808      	ldr	r0, [r1, #0]
 8006aa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006aaa:	f380 8809 	msr	PSP, r0
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f04f 0000 	mov.w	r0, #0
 8006ab6:	f380 8811 	msr	BASEPRI, r0
 8006aba:	f04e 0e0d 	orr.w	lr, lr, #13
 8006abe:	4770      	bx	lr

08006ac0 <pxCurrentTCBConst2>:
 8006ac0:	20000cdc 	.word	0x20000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop

08006ac8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006ac8:	4806      	ldr	r0, [pc, #24]	@ (8006ae4 <prvPortStartFirstTask+0x1c>)
 8006aca:	6800      	ldr	r0, [r0, #0]
 8006acc:	6800      	ldr	r0, [r0, #0]
 8006ace:	f380 8808 	msr	MSP, r0
 8006ad2:	b662      	cpsie	i
 8006ad4:	b661      	cpsie	f
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	df00      	svc	0
 8006ae0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ae2:	bf00      	nop
 8006ae4:	e000ed08 	.word	0xe000ed08

08006ae8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006aee:	4b32      	ldr	r3, [pc, #200]	@ (8006bb8 <xPortStartScheduler+0xd0>)
 8006af0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	22ff      	movs	r2, #255	@ 0xff
 8006afe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b08:	78fb      	ldrb	r3, [r7, #3]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	4b2a      	ldr	r3, [pc, #168]	@ (8006bbc <xPortStartScheduler+0xd4>)
 8006b14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b16:	4b2a      	ldr	r3, [pc, #168]	@ (8006bc0 <xPortStartScheduler+0xd8>)
 8006b18:	2207      	movs	r2, #7
 8006b1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b1c:	e009      	b.n	8006b32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006b1e:	4b28      	ldr	r3, [pc, #160]	@ (8006bc0 <xPortStartScheduler+0xd8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	4a26      	ldr	r2, [pc, #152]	@ (8006bc0 <xPortStartScheduler+0xd8>)
 8006b26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3a:	2b80      	cmp	r3, #128	@ 0x80
 8006b3c:	d0ef      	beq.n	8006b1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b3e:	4b20      	ldr	r3, [pc, #128]	@ (8006bc0 <xPortStartScheduler+0xd8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f1c3 0307 	rsb	r3, r3, #7
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d00b      	beq.n	8006b62 <xPortStartScheduler+0x7a>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	60bb      	str	r3, [r7, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	e7fd      	b.n	8006b5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b62:	4b17      	ldr	r3, [pc, #92]	@ (8006bc0 <xPortStartScheduler+0xd8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	4a15      	ldr	r2, [pc, #84]	@ (8006bc0 <xPortStartScheduler+0xd8>)
 8006b6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b6c:	4b14      	ldr	r3, [pc, #80]	@ (8006bc0 <xPortStartScheduler+0xd8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b74:	4a12      	ldr	r2, [pc, #72]	@ (8006bc0 <xPortStartScheduler+0xd8>)
 8006b76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b80:	4b10      	ldr	r3, [pc, #64]	@ (8006bc4 <xPortStartScheduler+0xdc>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a0f      	ldr	r2, [pc, #60]	@ (8006bc4 <xPortStartScheduler+0xdc>)
 8006b86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc4 <xPortStartScheduler+0xdc>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a0c      	ldr	r2, [pc, #48]	@ (8006bc4 <xPortStartScheduler+0xdc>)
 8006b92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b98:	f000 f8b8 	bl	8006d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc8 <xPortStartScheduler+0xe0>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ba2:	f7ff ff91 	bl	8006ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ba6:	f7ff f86d 	bl	8005c84 <vTaskSwitchContext>
	prvTaskExitError();
 8006baa:	f7ff ff4d 	bl	8006a48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	e000e400 	.word	0xe000e400
 8006bbc:	20001308 	.word	0x20001308
 8006bc0:	2000130c 	.word	0x2000130c
 8006bc4:	e000ed20 	.word	0xe000ed20
 8006bc8:	20000010 	.word	0x20000010

08006bcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	607b      	str	r3, [r7, #4]
}
 8006be4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006be6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c24 <vPortEnterCritical+0x58>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3301      	adds	r3, #1
 8006bec:	4a0d      	ldr	r2, [pc, #52]	@ (8006c24 <vPortEnterCritical+0x58>)
 8006bee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c24 <vPortEnterCritical+0x58>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d110      	bne.n	8006c1a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <vPortEnterCritical+0x5c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00b      	beq.n	8006c1a <vPortEnterCritical+0x4e>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	603b      	str	r3, [r7, #0]
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop
 8006c18:	e7fd      	b.n	8006c16 <vPortEnterCritical+0x4a>
	}
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr
 8006c24:	20000010 	.word	0x20000010
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c32:	4b12      	ldr	r3, [pc, #72]	@ (8006c7c <vPortExitCritical+0x50>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <vPortExitCritical+0x26>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	607b      	str	r3, [r7, #4]
}
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
 8006c50:	e7fd      	b.n	8006c4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c52:	4b0a      	ldr	r3, [pc, #40]	@ (8006c7c <vPortExitCritical+0x50>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	4a08      	ldr	r2, [pc, #32]	@ (8006c7c <vPortExitCritical+0x50>)
 8006c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c5c:	4b07      	ldr	r3, [pc, #28]	@ (8006c7c <vPortExitCritical+0x50>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d105      	bne.n	8006c70 <vPortExitCritical+0x44>
 8006c64:	2300      	movs	r3, #0
 8006c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f383 8811 	msr	BASEPRI, r3
}
 8006c6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	20000010 	.word	0x20000010

08006c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c80:	f3ef 8009 	mrs	r0, PSP
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc0 <pxCurrentTCBConst>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c90:	6010      	str	r0, [r2, #0]
 8006c92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006c96:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c9a:	f380 8811 	msr	BASEPRI, r0
 8006c9e:	f7fe fff1 	bl	8005c84 <vTaskSwitchContext>
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f380 8811 	msr	BASEPRI, r0
 8006caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006cae:	6819      	ldr	r1, [r3, #0]
 8006cb0:	6808      	ldr	r0, [r1, #0]
 8006cb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006cb6:	f380 8809 	msr	PSP, r0
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	4770      	bx	lr

08006cc0 <pxCurrentTCBConst>:
 8006cc0:	20000cdc 	.word	0x20000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop

08006cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	607b      	str	r3, [r7, #4]
}
 8006ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ce2:	f7fe ff15 	bl	8005b10 <xTaskIncrementTick>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cec:	4b06      	ldr	r3, [pc, #24]	@ (8006d08 <xPortSysTickHandler+0x40>)
 8006cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	f383 8811 	msr	BASEPRI, r3
}
 8006cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	e000ed04 	.word	0xe000ed04

08006d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d10:	4b0a      	ldr	r3, [pc, #40]	@ (8006d3c <vPortSetupTimerInterrupt+0x30>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d16:	4b0a      	ldr	r3, [pc, #40]	@ (8006d40 <vPortSetupTimerInterrupt+0x34>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d1c:	4b09      	ldr	r3, [pc, #36]	@ (8006d44 <vPortSetupTimerInterrupt+0x38>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a09      	ldr	r2, [pc, #36]	@ (8006d48 <vPortSetupTimerInterrupt+0x3c>)
 8006d22:	fba2 2303 	umull	r2, r3, r2, r3
 8006d26:	099b      	lsrs	r3, r3, #6
 8006d28:	4a08      	ldr	r2, [pc, #32]	@ (8006d4c <vPortSetupTimerInterrupt+0x40>)
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d2e:	4b03      	ldr	r3, [pc, #12]	@ (8006d3c <vPortSetupTimerInterrupt+0x30>)
 8006d30:	2207      	movs	r2, #7
 8006d32:	601a      	str	r2, [r3, #0]
}
 8006d34:	bf00      	nop
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr
 8006d3c:	e000e010 	.word	0xe000e010
 8006d40:	e000e018 	.word	0xe000e018
 8006d44:	20000004 	.word	0x20000004
 8006d48:	10624dd3 	.word	0x10624dd3
 8006d4c:	e000e014 	.word	0xe000e014

08006d50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d56:	f3ef 8305 	mrs	r3, IPSR
 8006d5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b0f      	cmp	r3, #15
 8006d60:	d915      	bls.n	8006d8e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d62:	4a17      	ldr	r2, [pc, #92]	@ (8006dc0 <vPortValidateInterruptPriority+0x70>)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d6c:	4b15      	ldr	r3, [pc, #84]	@ (8006dc4 <vPortValidateInterruptPriority+0x74>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	7afa      	ldrb	r2, [r7, #11]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d20b      	bcs.n	8006d8e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	607b      	str	r3, [r7, #4]
}
 8006d88:	bf00      	nop
 8006d8a:	bf00      	nop
 8006d8c:	e7fd      	b.n	8006d8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc8 <vPortValidateInterruptPriority+0x78>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d96:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <vPortValidateInterruptPriority+0x7c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d90b      	bls.n	8006db6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	603b      	str	r3, [r7, #0]
}
 8006db0:	bf00      	nop
 8006db2:	bf00      	nop
 8006db4:	e7fd      	b.n	8006db2 <vPortValidateInterruptPriority+0x62>
	}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bc80      	pop	{r7}
 8006dbe:	4770      	bx	lr
 8006dc0:	e000e3f0 	.word	0xe000e3f0
 8006dc4:	20001308 	.word	0x20001308
 8006dc8:	e000ed0c 	.word	0xe000ed0c
 8006dcc:	2000130c 	.word	0x2000130c

08006dd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	@ 0x28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ddc:	f7fe fdde 	bl	800599c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006de0:	4b5c      	ldr	r3, [pc, #368]	@ (8006f54 <pvPortMalloc+0x184>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006de8:	f000 f924 	bl	8007034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006dec:	4b5a      	ldr	r3, [pc, #360]	@ (8006f58 <pvPortMalloc+0x188>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4013      	ands	r3, r2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f040 8095 	bne.w	8006f24 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01e      	beq.n	8006e3e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e00:	2208      	movs	r2, #8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4413      	add	r3, r2
 8006e06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d015      	beq.n	8006e3e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f023 0307 	bic.w	r3, r3, #7
 8006e18:	3308      	adds	r3, #8
 8006e1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f003 0307 	and.w	r3, r3, #7
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <pvPortMalloc+0x6e>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	617b      	str	r3, [r7, #20]
}
 8006e38:	bf00      	nop
 8006e3a:	bf00      	nop
 8006e3c:	e7fd      	b.n	8006e3a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d06f      	beq.n	8006f24 <pvPortMalloc+0x154>
 8006e44:	4b45      	ldr	r3, [pc, #276]	@ (8006f5c <pvPortMalloc+0x18c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d86a      	bhi.n	8006f24 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e4e:	4b44      	ldr	r3, [pc, #272]	@ (8006f60 <pvPortMalloc+0x190>)
 8006e50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e52:	4b43      	ldr	r3, [pc, #268]	@ (8006f60 <pvPortMalloc+0x190>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e58:	e004      	b.n	8006e64 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d903      	bls.n	8006e76 <pvPortMalloc+0xa6>
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f1      	bne.n	8006e5a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e76:	4b37      	ldr	r3, [pc, #220]	@ (8006f54 <pvPortMalloc+0x184>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d051      	beq.n	8006f24 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2208      	movs	r2, #8
 8006e86:	4413      	add	r3, r2
 8006e88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	1ad2      	subs	r2, r2, r3
 8006e9a:	2308      	movs	r3, #8
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d920      	bls.n	8006ee4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <pvPortMalloc+0xfc>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	613b      	str	r3, [r7, #16]
}
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	e7fd      	b.n	8006ec8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	1ad2      	subs	r2, r2, r3
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ede:	69b8      	ldr	r0, [r7, #24]
 8006ee0:	f000 f90a 	bl	80070f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f5c <pvPortMalloc+0x18c>)
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	4a1b      	ldr	r2, [pc, #108]	@ (8006f5c <pvPortMalloc+0x18c>)
 8006ef0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f5c <pvPortMalloc+0x18c>)
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8006f64 <pvPortMalloc+0x194>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d203      	bcs.n	8006f06 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006efe:	4b17      	ldr	r3, [pc, #92]	@ (8006f5c <pvPortMalloc+0x18c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a18      	ldr	r2, [pc, #96]	@ (8006f64 <pvPortMalloc+0x194>)
 8006f04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	4b13      	ldr	r3, [pc, #76]	@ (8006f58 <pvPortMalloc+0x188>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f1a:	4b13      	ldr	r3, [pc, #76]	@ (8006f68 <pvPortMalloc+0x198>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	4a11      	ldr	r2, [pc, #68]	@ (8006f68 <pvPortMalloc+0x198>)
 8006f22:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f24:	f7fe fd48 	bl	80059b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00b      	beq.n	8006f4a <pvPortMalloc+0x17a>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	60fb      	str	r3, [r7, #12]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <pvPortMalloc+0x176>
	return pvReturn;
 8006f4a:	69fb      	ldr	r3, [r7, #28]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3728      	adds	r7, #40	@ 0x28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20001f18 	.word	0x20001f18
 8006f58:	20001f2c 	.word	0x20001f2c
 8006f5c:	20001f1c 	.word	0x20001f1c
 8006f60:	20001f10 	.word	0x20001f10
 8006f64:	20001f20 	.word	0x20001f20
 8006f68:	20001f24 	.word	0x20001f24

08006f6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d04f      	beq.n	800701e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f7e:	2308      	movs	r3, #8
 8006f80:	425b      	negs	r3, r3
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4413      	add	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	4b25      	ldr	r3, [pc, #148]	@ (8007028 <vPortFree+0xbc>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <vPortFree+0x46>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	60fb      	str	r3, [r7, #12]
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	e7fd      	b.n	8006fae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00b      	beq.n	8006fd2 <vPortFree+0x66>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	60bb      	str	r3, [r7, #8]
}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	e7fd      	b.n	8006fce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	4b14      	ldr	r3, [pc, #80]	@ (8007028 <vPortFree+0xbc>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01e      	beq.n	800701e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d11a      	bne.n	800701e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	4b0e      	ldr	r3, [pc, #56]	@ (8007028 <vPortFree+0xbc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	43db      	mvns	r3, r3
 8006ff2:	401a      	ands	r2, r3
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ff8:	f7fe fcd0 	bl	800599c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <vPortFree+0xc0>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4413      	add	r3, r2
 8007006:	4a09      	ldr	r2, [pc, #36]	@ (800702c <vPortFree+0xc0>)
 8007008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800700a:	6938      	ldr	r0, [r7, #16]
 800700c:	f000 f874 	bl	80070f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007010:	4b07      	ldr	r3, [pc, #28]	@ (8007030 <vPortFree+0xc4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3301      	adds	r3, #1
 8007016:	4a06      	ldr	r2, [pc, #24]	@ (8007030 <vPortFree+0xc4>)
 8007018:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800701a:	f7fe fccd 	bl	80059b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800701e:	bf00      	nop
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20001f2c 	.word	0x20001f2c
 800702c:	20001f1c 	.word	0x20001f1c
 8007030:	20001f28 	.word	0x20001f28

08007034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800703a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800703e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007040:	4b27      	ldr	r3, [pc, #156]	@ (80070e0 <prvHeapInit+0xac>)
 8007042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00c      	beq.n	8007068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3307      	adds	r3, #7
 8007052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0307 	bic.w	r3, r3, #7
 800705a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	4a1f      	ldr	r2, [pc, #124]	@ (80070e0 <prvHeapInit+0xac>)
 8007064:	4413      	add	r3, r2
 8007066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800706c:	4a1d      	ldr	r2, [pc, #116]	@ (80070e4 <prvHeapInit+0xb0>)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007072:	4b1c      	ldr	r3, [pc, #112]	@ (80070e4 <prvHeapInit+0xb0>)
 8007074:	2200      	movs	r2, #0
 8007076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	4413      	add	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007080:	2208      	movs	r2, #8
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0307 	bic.w	r3, r3, #7
 800708e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4a15      	ldr	r2, [pc, #84]	@ (80070e8 <prvHeapInit+0xb4>)
 8007094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007096:	4b14      	ldr	r3, [pc, #80]	@ (80070e8 <prvHeapInit+0xb4>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2200      	movs	r2, #0
 800709c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800709e:	4b12      	ldr	r3, [pc, #72]	@ (80070e8 <prvHeapInit+0xb4>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	1ad2      	subs	r2, r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070b4:	4b0c      	ldr	r3, [pc, #48]	@ (80070e8 <prvHeapInit+0xb4>)
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	4a0a      	ldr	r2, [pc, #40]	@ (80070ec <prvHeapInit+0xb8>)
 80070c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	4a09      	ldr	r2, [pc, #36]	@ (80070f0 <prvHeapInit+0xbc>)
 80070ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070cc:	4b09      	ldr	r3, [pc, #36]	@ (80070f4 <prvHeapInit+0xc0>)
 80070ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80070d2:	601a      	str	r2, [r3, #0]
}
 80070d4:	bf00      	nop
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	bc80      	pop	{r7}
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20001310 	.word	0x20001310
 80070e4:	20001f10 	.word	0x20001f10
 80070e8:	20001f18 	.word	0x20001f18
 80070ec:	20001f20 	.word	0x20001f20
 80070f0:	20001f1c 	.word	0x20001f1c
 80070f4:	20001f2c 	.word	0x20001f2c

080070f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007100:	4b27      	ldr	r3, [pc, #156]	@ (80071a0 <prvInsertBlockIntoFreeList+0xa8>)
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e002      	b.n	800710c <prvInsertBlockIntoFreeList+0x14>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	429a      	cmp	r2, r3
 8007114:	d8f7      	bhi.n	8007106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4413      	add	r3, r2
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	429a      	cmp	r2, r3
 8007126:	d108      	bne.n	800713a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	441a      	add	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	441a      	add	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d118      	bne.n	8007180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4b14      	ldr	r3, [pc, #80]	@ (80071a4 <prvInsertBlockIntoFreeList+0xac>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d00d      	beq.n	8007176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	441a      	add	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e008      	b.n	8007188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007176:	4b0b      	ldr	r3, [pc, #44]	@ (80071a4 <prvInsertBlockIntoFreeList+0xac>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e003      	b.n	8007188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	429a      	cmp	r2, r3
 800718e:	d002      	beq.n	8007196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	bc80      	pop	{r7}
 800719e:	4770      	bx	lr
 80071a0:	20001f10 	.word	0x20001f10
 80071a4:	20001f18 	.word	0x20001f18

080071a8 <memset>:
 80071a8:	4603      	mov	r3, r0
 80071aa:	4402      	add	r2, r0
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d100      	bne.n	80071b2 <memset+0xa>
 80071b0:	4770      	bx	lr
 80071b2:	f803 1b01 	strb.w	r1, [r3], #1
 80071b6:	e7f9      	b.n	80071ac <memset+0x4>

080071b8 <_reclaim_reent>:
 80071b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007270 <_reclaim_reent+0xb8>)
 80071ba:	b570      	push	{r4, r5, r6, lr}
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4604      	mov	r4, r0
 80071c0:	4283      	cmp	r3, r0
 80071c2:	d053      	beq.n	800726c <_reclaim_reent+0xb4>
 80071c4:	69c3      	ldr	r3, [r0, #28]
 80071c6:	b31b      	cbz	r3, 8007210 <_reclaim_reent+0x58>
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	b163      	cbz	r3, 80071e6 <_reclaim_reent+0x2e>
 80071cc:	2500      	movs	r5, #0
 80071ce:	69e3      	ldr	r3, [r4, #28]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	5959      	ldr	r1, [r3, r5]
 80071d4:	b9b1      	cbnz	r1, 8007204 <_reclaim_reent+0x4c>
 80071d6:	3504      	adds	r5, #4
 80071d8:	2d80      	cmp	r5, #128	@ 0x80
 80071da:	d1f8      	bne.n	80071ce <_reclaim_reent+0x16>
 80071dc:	69e3      	ldr	r3, [r4, #28]
 80071de:	4620      	mov	r0, r4
 80071e0:	68d9      	ldr	r1, [r3, #12]
 80071e2:	f000 f87b 	bl	80072dc <_free_r>
 80071e6:	69e3      	ldr	r3, [r4, #28]
 80071e8:	6819      	ldr	r1, [r3, #0]
 80071ea:	b111      	cbz	r1, 80071f2 <_reclaim_reent+0x3a>
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 f875 	bl	80072dc <_free_r>
 80071f2:	69e3      	ldr	r3, [r4, #28]
 80071f4:	689d      	ldr	r5, [r3, #8]
 80071f6:	b15d      	cbz	r5, 8007210 <_reclaim_reent+0x58>
 80071f8:	4629      	mov	r1, r5
 80071fa:	4620      	mov	r0, r4
 80071fc:	682d      	ldr	r5, [r5, #0]
 80071fe:	f000 f86d 	bl	80072dc <_free_r>
 8007202:	e7f8      	b.n	80071f6 <_reclaim_reent+0x3e>
 8007204:	680e      	ldr	r6, [r1, #0]
 8007206:	4620      	mov	r0, r4
 8007208:	f000 f868 	bl	80072dc <_free_r>
 800720c:	4631      	mov	r1, r6
 800720e:	e7e1      	b.n	80071d4 <_reclaim_reent+0x1c>
 8007210:	6961      	ldr	r1, [r4, #20]
 8007212:	b111      	cbz	r1, 800721a <_reclaim_reent+0x62>
 8007214:	4620      	mov	r0, r4
 8007216:	f000 f861 	bl	80072dc <_free_r>
 800721a:	69e1      	ldr	r1, [r4, #28]
 800721c:	b111      	cbz	r1, 8007224 <_reclaim_reent+0x6c>
 800721e:	4620      	mov	r0, r4
 8007220:	f000 f85c 	bl	80072dc <_free_r>
 8007224:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007226:	b111      	cbz	r1, 800722e <_reclaim_reent+0x76>
 8007228:	4620      	mov	r0, r4
 800722a:	f000 f857 	bl	80072dc <_free_r>
 800722e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007230:	b111      	cbz	r1, 8007238 <_reclaim_reent+0x80>
 8007232:	4620      	mov	r0, r4
 8007234:	f000 f852 	bl	80072dc <_free_r>
 8007238:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800723a:	b111      	cbz	r1, 8007242 <_reclaim_reent+0x8a>
 800723c:	4620      	mov	r0, r4
 800723e:	f000 f84d 	bl	80072dc <_free_r>
 8007242:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007244:	b111      	cbz	r1, 800724c <_reclaim_reent+0x94>
 8007246:	4620      	mov	r0, r4
 8007248:	f000 f848 	bl	80072dc <_free_r>
 800724c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800724e:	b111      	cbz	r1, 8007256 <_reclaim_reent+0x9e>
 8007250:	4620      	mov	r0, r4
 8007252:	f000 f843 	bl	80072dc <_free_r>
 8007256:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007258:	b111      	cbz	r1, 8007260 <_reclaim_reent+0xa8>
 800725a:	4620      	mov	r0, r4
 800725c:	f000 f83e 	bl	80072dc <_free_r>
 8007260:	6a23      	ldr	r3, [r4, #32]
 8007262:	b11b      	cbz	r3, 800726c <_reclaim_reent+0xb4>
 8007264:	4620      	mov	r0, r4
 8007266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800726a:	4718      	bx	r3
 800726c:	bd70      	pop	{r4, r5, r6, pc}
 800726e:	bf00      	nop
 8007270:	20000014 	.word	0x20000014

08007274 <__libc_init_array>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	2600      	movs	r6, #0
 8007278:	4d0c      	ldr	r5, [pc, #48]	@ (80072ac <__libc_init_array+0x38>)
 800727a:	4c0d      	ldr	r4, [pc, #52]	@ (80072b0 <__libc_init_array+0x3c>)
 800727c:	1b64      	subs	r4, r4, r5
 800727e:	10a4      	asrs	r4, r4, #2
 8007280:	42a6      	cmp	r6, r4
 8007282:	d109      	bne.n	8007298 <__libc_init_array+0x24>
 8007284:	f000 f87e 	bl	8007384 <_init>
 8007288:	2600      	movs	r6, #0
 800728a:	4d0a      	ldr	r5, [pc, #40]	@ (80072b4 <__libc_init_array+0x40>)
 800728c:	4c0a      	ldr	r4, [pc, #40]	@ (80072b8 <__libc_init_array+0x44>)
 800728e:	1b64      	subs	r4, r4, r5
 8007290:	10a4      	asrs	r4, r4, #2
 8007292:	42a6      	cmp	r6, r4
 8007294:	d105      	bne.n	80072a2 <__libc_init_array+0x2e>
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	f855 3b04 	ldr.w	r3, [r5], #4
 800729c:	4798      	blx	r3
 800729e:	3601      	adds	r6, #1
 80072a0:	e7ee      	b.n	8007280 <__libc_init_array+0xc>
 80072a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a6:	4798      	blx	r3
 80072a8:	3601      	adds	r6, #1
 80072aa:	e7f2      	b.n	8007292 <__libc_init_array+0x1e>
 80072ac:	08007450 	.word	0x08007450
 80072b0:	08007450 	.word	0x08007450
 80072b4:	08007450 	.word	0x08007450
 80072b8:	08007454 	.word	0x08007454

080072bc <__retarget_lock_acquire_recursive>:
 80072bc:	4770      	bx	lr

080072be <__retarget_lock_release_recursive>:
 80072be:	4770      	bx	lr

080072c0 <memcpy>:
 80072c0:	440a      	add	r2, r1
 80072c2:	4291      	cmp	r1, r2
 80072c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072c8:	d100      	bne.n	80072cc <memcpy+0xc>
 80072ca:	4770      	bx	lr
 80072cc:	b510      	push	{r4, lr}
 80072ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072d2:	4291      	cmp	r1, r2
 80072d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072d8:	d1f9      	bne.n	80072ce <memcpy+0xe>
 80072da:	bd10      	pop	{r4, pc}

080072dc <_free_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4605      	mov	r5, r0
 80072e0:	2900      	cmp	r1, #0
 80072e2:	d040      	beq.n	8007366 <_free_r+0x8a>
 80072e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e8:	1f0c      	subs	r4, r1, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	bfb8      	it	lt
 80072ee:	18e4      	addlt	r4, r4, r3
 80072f0:	f000 f83c 	bl	800736c <__malloc_lock>
 80072f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007368 <_free_r+0x8c>)
 80072f6:	6813      	ldr	r3, [r2, #0]
 80072f8:	b933      	cbnz	r3, 8007308 <_free_r+0x2c>
 80072fa:	6063      	str	r3, [r4, #4]
 80072fc:	6014      	str	r4, [r2, #0]
 80072fe:	4628      	mov	r0, r5
 8007300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007304:	f000 b838 	b.w	8007378 <__malloc_unlock>
 8007308:	42a3      	cmp	r3, r4
 800730a:	d908      	bls.n	800731e <_free_r+0x42>
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	1821      	adds	r1, r4, r0
 8007310:	428b      	cmp	r3, r1
 8007312:	bf01      	itttt	eq
 8007314:	6819      	ldreq	r1, [r3, #0]
 8007316:	685b      	ldreq	r3, [r3, #4]
 8007318:	1809      	addeq	r1, r1, r0
 800731a:	6021      	streq	r1, [r4, #0]
 800731c:	e7ed      	b.n	80072fa <_free_r+0x1e>
 800731e:	461a      	mov	r2, r3
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	b10b      	cbz	r3, 8007328 <_free_r+0x4c>
 8007324:	42a3      	cmp	r3, r4
 8007326:	d9fa      	bls.n	800731e <_free_r+0x42>
 8007328:	6811      	ldr	r1, [r2, #0]
 800732a:	1850      	adds	r0, r2, r1
 800732c:	42a0      	cmp	r0, r4
 800732e:	d10b      	bne.n	8007348 <_free_r+0x6c>
 8007330:	6820      	ldr	r0, [r4, #0]
 8007332:	4401      	add	r1, r0
 8007334:	1850      	adds	r0, r2, r1
 8007336:	4283      	cmp	r3, r0
 8007338:	6011      	str	r1, [r2, #0]
 800733a:	d1e0      	bne.n	80072fe <_free_r+0x22>
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4408      	add	r0, r1
 8007342:	6010      	str	r0, [r2, #0]
 8007344:	6053      	str	r3, [r2, #4]
 8007346:	e7da      	b.n	80072fe <_free_r+0x22>
 8007348:	d902      	bls.n	8007350 <_free_r+0x74>
 800734a:	230c      	movs	r3, #12
 800734c:	602b      	str	r3, [r5, #0]
 800734e:	e7d6      	b.n	80072fe <_free_r+0x22>
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	1821      	adds	r1, r4, r0
 8007354:	428b      	cmp	r3, r1
 8007356:	bf01      	itttt	eq
 8007358:	6819      	ldreq	r1, [r3, #0]
 800735a:	685b      	ldreq	r3, [r3, #4]
 800735c:	1809      	addeq	r1, r1, r0
 800735e:	6021      	streq	r1, [r4, #0]
 8007360:	6063      	str	r3, [r4, #4]
 8007362:	6054      	str	r4, [r2, #4]
 8007364:	e7cb      	b.n	80072fe <_free_r+0x22>
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	2000206c 	.word	0x2000206c

0800736c <__malloc_lock>:
 800736c:	4801      	ldr	r0, [pc, #4]	@ (8007374 <__malloc_lock+0x8>)
 800736e:	f7ff bfa5 	b.w	80072bc <__retarget_lock_acquire_recursive>
 8007372:	bf00      	nop
 8007374:	20002068 	.word	0x20002068

08007378 <__malloc_unlock>:
 8007378:	4801      	ldr	r0, [pc, #4]	@ (8007380 <__malloc_unlock+0x8>)
 800737a:	f7ff bfa0 	b.w	80072be <__retarget_lock_release_recursive>
 800737e:	bf00      	nop
 8007380:	20002068 	.word	0x20002068

08007384 <_init>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	bf00      	nop
 8007388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738a:	bc08      	pop	{r3}
 800738c:	469e      	mov	lr, r3
 800738e:	4770      	bx	lr

08007390 <_fini>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	bf00      	nop
 8007394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007396:	bc08      	pop	{r3}
 8007398:	469e      	mov	lr, r3
 800739a:	4770      	bx	lr
