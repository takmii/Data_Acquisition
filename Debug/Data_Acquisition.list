
Data_Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066bc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080067cc  080067cc  000077cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800689c  0800689c  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800689c  0800689c  00008060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800689c  0800689c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800689c  0800689c  0000789c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068a0  080068a0  000078a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080068a4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd0  20000060  08006904  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d30  08006904  00008d30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017741  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f0c  00000000  00000000  0001f7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  000236d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffd  00000000  00000000  00024bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7dc  00000000  00000000  00025bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019220  00000000  00000000  00041399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a99c  00000000  00000000  0005a5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4f55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a50  00000000  00000000  000f4f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000fa9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080067b4 	.word	0x080067b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080067b4 	.word	0x080067b4

08000150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b18      	ldr	r3, [pc, #96]	@ (80001c4 <MX_ADC1_Init+0x74>)
 8000162:	4a19      	ldr	r2, [pc, #100]	@ (80001c8 <MX_ADC1_Init+0x78>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000166:	4b17      	ldr	r3, [pc, #92]	@ (80001c4 <MX_ADC1_Init+0x74>)
 8000168:	2200      	movs	r2, #0
 800016a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016c:	4b15      	ldr	r3, [pc, #84]	@ (80001c4 <MX_ADC1_Init+0x74>)
 800016e:	2200      	movs	r2, #0
 8000170:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000172:	4b14      	ldr	r3, [pc, #80]	@ (80001c4 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000178:	4b12      	ldr	r3, [pc, #72]	@ (80001c4 <MX_ADC1_Init+0x74>)
 800017a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000180:	4b10      	ldr	r3, [pc, #64]	@ (80001c4 <MX_ADC1_Init+0x74>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000186:	4b0f      	ldr	r3, [pc, #60]	@ (80001c4 <MX_ADC1_Init+0x74>)
 8000188:	2201      	movs	r2, #1
 800018a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018c:	480d      	ldr	r0, [pc, #52]	@ (80001c4 <MX_ADC1_Init+0x74>)
 800018e:	f000 ff91 	bl	80010b4 <HAL_ADC_Init>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000198:	f000 fd72 	bl	8000c80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800019c:	2301      	movs	r3, #1
 800019e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80001a4:	2302      	movs	r3, #2
 80001a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	4619      	mov	r1, r3
 80001ac:	4805      	ldr	r0, [pc, #20]	@ (80001c4 <MX_ADC1_Init+0x74>)
 80001ae:	f001 fa19 	bl	80015e4 <HAL_ADC_ConfigChannel>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b8:	f000 fd62 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001bc:	bf00      	nop
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	40012400 	.word	0x40012400

080001cc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001dc:	4b18      	ldr	r3, [pc, #96]	@ (8000240 <MX_ADC2_Init+0x74>)
 80001de:	4a19      	ldr	r2, [pc, #100]	@ (8000244 <MX_ADC2_Init+0x78>)
 80001e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001e2:	4b17      	ldr	r3, [pc, #92]	@ (8000240 <MX_ADC2_Init+0x74>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80001e8:	4b15      	ldr	r3, [pc, #84]	@ (8000240 <MX_ADC2_Init+0x74>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001ee:	4b14      	ldr	r3, [pc, #80]	@ (8000240 <MX_ADC2_Init+0x74>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f4:	4b12      	ldr	r3, [pc, #72]	@ (8000240 <MX_ADC2_Init+0x74>)
 80001f6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80001fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fc:	4b10      	ldr	r3, [pc, #64]	@ (8000240 <MX_ADC2_Init+0x74>)
 80001fe:	2200      	movs	r2, #0
 8000200:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000202:	4b0f      	ldr	r3, [pc, #60]	@ (8000240 <MX_ADC2_Init+0x74>)
 8000204:	2201      	movs	r2, #1
 8000206:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000208:	480d      	ldr	r0, [pc, #52]	@ (8000240 <MX_ADC2_Init+0x74>)
 800020a:	f000 ff53 	bl	80010b4 <HAL_ADC_Init>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000214:	f000 fd34 	bl	8000c80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000218:	2300      	movs	r3, #0
 800021a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800021c:	2301      	movs	r3, #1
 800021e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000220:	2302      	movs	r3, #2
 8000222:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4805      	ldr	r0, [pc, #20]	@ (8000240 <MX_ADC2_Init+0x74>)
 800022a:	f001 f9db 	bl	80015e4 <HAL_ADC_ConfigChannel>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000234:	f000 fd24 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000238:	bf00      	nop
 800023a:	3710      	adds	r7, #16
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	200000ac 	.word	0x200000ac
 8000244:	40012800 	.word	0x40012800

08000248 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b08a      	sub	sp, #40	@ 0x28
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a28      	ldr	r2, [pc, #160]	@ (8000304 <HAL_ADC_MspInit+0xbc>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d122      	bne.n	80002ae <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000268:	4b27      	ldr	r3, [pc, #156]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a26      	ldr	r2, [pc, #152]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 800026e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b24      	ldr	r3, [pc, #144]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800027c:	617b      	str	r3, [r7, #20]
 800027e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000280:	4b21      	ldr	r3, [pc, #132]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a20      	ldr	r2, [pc, #128]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b1e      	ldr	r3, [pc, #120]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0304 	and.w	r3, r3, #4
 8000294:	613b      	str	r3, [r7, #16]
 8000296:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000298:	230e      	movs	r3, #14
 800029a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800029c:	2303      	movs	r3, #3
 800029e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	4619      	mov	r1, r3
 80002a6:	4819      	ldr	r0, [pc, #100]	@ (800030c <HAL_ADC_MspInit+0xc4>)
 80002a8:	f001 fe40 	bl	8001f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80002ac:	e026      	b.n	80002fc <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a17      	ldr	r2, [pc, #92]	@ (8000310 <HAL_ADC_MspInit+0xc8>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d121      	bne.n	80002fc <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80002b8:	4b13      	ldr	r3, [pc, #76]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a12      	ldr	r2, [pc, #72]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 80002be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b10      	ldr	r3, [pc, #64]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 80002d6:	f043 0304 	orr.w	r3, r3, #4
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000308 <HAL_ADC_MspInit+0xc0>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0304 	and.w	r3, r3, #4
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80002e8:	2371      	movs	r3, #113	@ 0x71
 80002ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ec:	2303      	movs	r3, #3
 80002ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f0:	f107 0318 	add.w	r3, r7, #24
 80002f4:	4619      	mov	r1, r3
 80002f6:	4805      	ldr	r0, [pc, #20]	@ (800030c <HAL_ADC_MspInit+0xc4>)
 80002f8:	f001 fe18 	bl	8001f2c <HAL_GPIO_Init>
}
 80002fc:	bf00      	nop
 80002fe:	3728      	adds	r7, #40	@ 0x28
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40012400 	.word	0x40012400
 8000308:	40021000 	.word	0x40021000
 800030c:	40010800 	.word	0x40010800
 8000310:	40012800 	.word	0x40012800

08000314 <setADCChannel1>:


ADC_ChannelConfTypeDef sConfig1 = {0};
ADC_ChannelConfTypeDef sConfig2 = {0};

HAL_StatusTypeDef setADCChannel1(unsigned char channel){
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	switch(channel) {
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b11      	cmp	r3, #17
 8000322:	d86f      	bhi.n	8000404 <setADCChannel1+0xf0>
 8000324:	a201      	add	r2, pc, #4	@ (adr r2, 800032c <setADCChannel1+0x18>)
 8000326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032a:	bf00      	nop
 800032c:	08000375 	.word	0x08000375
 8000330:	0800037d 	.word	0x0800037d
 8000334:	08000385 	.word	0x08000385
 8000338:	0800038d 	.word	0x0800038d
 800033c:	08000395 	.word	0x08000395
 8000340:	0800039d 	.word	0x0800039d
 8000344:	080003a5 	.word	0x080003a5
 8000348:	080003ad 	.word	0x080003ad
 800034c:	080003b5 	.word	0x080003b5
 8000350:	080003bd 	.word	0x080003bd
 8000354:	080003c5 	.word	0x080003c5
 8000358:	080003cd 	.word	0x080003cd
 800035c:	080003d5 	.word	0x080003d5
 8000360:	080003dd 	.word	0x080003dd
 8000364:	080003e5 	.word	0x080003e5
 8000368:	080003ed 	.word	0x080003ed
 800036c:	080003f5 	.word	0x080003f5
 8000370:	080003fd 	.word	0x080003fd
	       	case 0:
	            sConfig1.Channel = ADC_CHANNEL_0;
 8000374:	4b2c      	ldr	r3, [pc, #176]	@ (8000428 <setADCChannel1+0x114>)
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
	            break;
 800037a:	e045      	b.n	8000408 <setADCChannel1+0xf4>
	        case 1:
	            sConfig1.Channel = ADC_CHANNEL_1;
 800037c:	4b2a      	ldr	r3, [pc, #168]	@ (8000428 <setADCChannel1+0x114>)
 800037e:	2201      	movs	r2, #1
 8000380:	601a      	str	r2, [r3, #0]
	            break;
 8000382:	e041      	b.n	8000408 <setADCChannel1+0xf4>
	        case 2:
	            sConfig1.Channel = ADC_CHANNEL_2;
 8000384:	4b28      	ldr	r3, [pc, #160]	@ (8000428 <setADCChannel1+0x114>)
 8000386:	2202      	movs	r2, #2
 8000388:	601a      	str	r2, [r3, #0]
	            break;
 800038a:	e03d      	b.n	8000408 <setADCChannel1+0xf4>
	        case 3:
	            sConfig1.Channel = ADC_CHANNEL_3;
 800038c:	4b26      	ldr	r3, [pc, #152]	@ (8000428 <setADCChannel1+0x114>)
 800038e:	2203      	movs	r2, #3
 8000390:	601a      	str	r2, [r3, #0]
	            break;
 8000392:	e039      	b.n	8000408 <setADCChannel1+0xf4>
	        case 4:
	            sConfig1.Channel = ADC_CHANNEL_4;
 8000394:	4b24      	ldr	r3, [pc, #144]	@ (8000428 <setADCChannel1+0x114>)
 8000396:	2204      	movs	r2, #4
 8000398:	601a      	str	r2, [r3, #0]
	            break;
 800039a:	e035      	b.n	8000408 <setADCChannel1+0xf4>
	        case 5:
	            sConfig1.Channel = ADC_CHANNEL_5;
 800039c:	4b22      	ldr	r3, [pc, #136]	@ (8000428 <setADCChannel1+0x114>)
 800039e:	2205      	movs	r2, #5
 80003a0:	601a      	str	r2, [r3, #0]
	            break;
 80003a2:	e031      	b.n	8000408 <setADCChannel1+0xf4>
	        case 6:
	            sConfig1.Channel = ADC_CHANNEL_6;
 80003a4:	4b20      	ldr	r3, [pc, #128]	@ (8000428 <setADCChannel1+0x114>)
 80003a6:	2206      	movs	r2, #6
 80003a8:	601a      	str	r2, [r3, #0]
	            break;
 80003aa:	e02d      	b.n	8000408 <setADCChannel1+0xf4>
	        case 7:
	            sConfig1.Channel = ADC_CHANNEL_7;
 80003ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000428 <setADCChannel1+0x114>)
 80003ae:	2207      	movs	r2, #7
 80003b0:	601a      	str	r2, [r3, #0]
	            break;
 80003b2:	e029      	b.n	8000408 <setADCChannel1+0xf4>
	        case 8:
	            sConfig1.Channel = ADC_CHANNEL_8;
 80003b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000428 <setADCChannel1+0x114>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	601a      	str	r2, [r3, #0]
	            break;
 80003ba:	e025      	b.n	8000408 <setADCChannel1+0xf4>
	        case 9:
	            sConfig1.Channel = ADC_CHANNEL_9;
 80003bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000428 <setADCChannel1+0x114>)
 80003be:	2209      	movs	r2, #9
 80003c0:	601a      	str	r2, [r3, #0]
	            break;
 80003c2:	e021      	b.n	8000408 <setADCChannel1+0xf4>
	        case 10:
	            sConfig1.Channel = ADC_CHANNEL_10;
 80003c4:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <setADCChannel1+0x114>)
 80003c6:	220a      	movs	r2, #10
 80003c8:	601a      	str	r2, [r3, #0]
	            break;
 80003ca:	e01d      	b.n	8000408 <setADCChannel1+0xf4>
	        case 11:
	            sConfig1.Channel = ADC_CHANNEL_11;
 80003cc:	4b16      	ldr	r3, [pc, #88]	@ (8000428 <setADCChannel1+0x114>)
 80003ce:	220b      	movs	r2, #11
 80003d0:	601a      	str	r2, [r3, #0]
	            break;
 80003d2:	e019      	b.n	8000408 <setADCChannel1+0xf4>
	        case 12:
	            sConfig1.Channel = ADC_CHANNEL_12;
 80003d4:	4b14      	ldr	r3, [pc, #80]	@ (8000428 <setADCChannel1+0x114>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	601a      	str	r2, [r3, #0]
	            break;
 80003da:	e015      	b.n	8000408 <setADCChannel1+0xf4>
	        case 13:
	            sConfig1.Channel = ADC_CHANNEL_13;
 80003dc:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <setADCChannel1+0x114>)
 80003de:	220d      	movs	r2, #13
 80003e0:	601a      	str	r2, [r3, #0]
	            break;
 80003e2:	e011      	b.n	8000408 <setADCChannel1+0xf4>
	        case 14:
	            sConfig1.Channel = ADC_CHANNEL_14;
 80003e4:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <setADCChannel1+0x114>)
 80003e6:	220e      	movs	r2, #14
 80003e8:	601a      	str	r2, [r3, #0]
	            break;
 80003ea:	e00d      	b.n	8000408 <setADCChannel1+0xf4>
	        case 15:
	            sConfig1.Channel = ADC_CHANNEL_15;
 80003ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <setADCChannel1+0x114>)
 80003ee:	220f      	movs	r2, #15
 80003f0:	601a      	str	r2, [r3, #0]
	            break;
 80003f2:	e009      	b.n	8000408 <setADCChannel1+0xf4>
	        case 16:
	            sConfig1.Channel = ADC_CHANNEL_16;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <setADCChannel1+0x114>)
 80003f6:	2210      	movs	r2, #16
 80003f8:	601a      	str	r2, [r3, #0]
	            break;
 80003fa:	e005      	b.n	8000408 <setADCChannel1+0xf4>
	        case 17:
	            sConfig1.Channel = ADC_CHANNEL_17;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000428 <setADCChannel1+0x114>)
 80003fe:	2211      	movs	r2, #17
 8000400:	601a      	str	r2, [r3, #0]
	            break;
 8000402:	e001      	b.n	8000408 <setADCChannel1+0xf4>
	        default:
	            return HAL_ERROR; // Canal inválido
 8000404:	2301      	movs	r3, #1
 8000406:	e00a      	b.n	800041e <setADCChannel1+0x10a>
	    }

	    sConfig1.Rank = ADC_REGULAR_RANK_1;
 8000408:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <setADCChannel1+0x114>)
 800040a:	2201      	movs	r2, #1
 800040c:	605a      	str	r2, [r3, #4]
	    sConfig1.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800040e:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <setADCChannel1+0x114>)
 8000410:	2205      	movs	r2, #5
 8000412:	609a      	str	r2, [r3, #8]

	    return HAL_ADC_ConfigChannel(&hadc1, &sConfig1);
 8000414:	4904      	ldr	r1, [pc, #16]	@ (8000428 <setADCChannel1+0x114>)
 8000416:	4805      	ldr	r0, [pc, #20]	@ (800042c <setADCChannel1+0x118>)
 8000418:	f001 f8e4 	bl	80015e4 <HAL_ADC_ConfigChannel>
 800041c:	4603      	mov	r3, r0

}
 800041e:	4618      	mov	r0, r3
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200000dc 	.word	0x200000dc
 800042c:	2000007c 	.word	0x2000007c

08000430 <readADCValue1>:
	    sConfig2.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
	    return HAL_ADC_ConfigChannel(&hadc2, &sConfig2);

}

uint16_t readADCValue1(unsigned char channelNumber) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
    if (setADCChannel1(channelNumber) != HAL_OK) {
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff69 	bl	8000314 <setADCChannel1>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d002      	beq.n	800044e <readADCValue1+0x1e>
        return 0xFFFF;  // erro
 8000448:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800044c:	e012      	b.n	8000474 <readADCValue1+0x44>
    }
    HAL_ADC_Start(&hadc1);
 800044e:	480b      	ldr	r0, [pc, #44]	@ (800047c <readADCValue1+0x4c>)
 8000450:	f000 ff08 	bl	8001264 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 8000454:	f04f 31ff 	mov.w	r1, #4294967295
 8000458:	4808      	ldr	r0, [pc, #32]	@ (800047c <readADCValue1+0x4c>)
 800045a:	f000 ffb1 	bl	80013c0 <HAL_ADC_PollForConversion>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d002      	beq.n	800046a <readADCValue1+0x3a>
        return 0xFFFF;  // erro
 8000464:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000468:	e004      	b.n	8000474 <readADCValue1+0x44>
    }
    return (uint16_t) HAL_ADC_GetValue(&hadc1);
 800046a:	4804      	ldr	r0, [pc, #16]	@ (800047c <readADCValue1+0x4c>)
 800046c:	f001 f8ae 	bl	80015cc <HAL_ADC_GetValue>
 8000470:	4603      	mov	r3, r0
 8000472:	b29b      	uxth	r3, r3
}
 8000474:	4618      	mov	r0, r3
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000007c 	.word	0x2000007c

08000480 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000484:	4b17      	ldr	r3, [pc, #92]	@ (80004e4 <MX_CAN_Init+0x64>)
 8000486:	4a18      	ldr	r2, [pc, #96]	@ (80004e8 <MX_CAN_Init+0x68>)
 8000488:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800048a:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <MX_CAN_Init+0x64>)
 800048c:	2204      	movs	r2, #4
 800048e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <MX_CAN_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000496:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <MX_CAN_Init+0x64>)
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <MX_CAN_Init+0x64>)
 800049e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80004a2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <MX_CAN_Init+0x64>)
 80004a6:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80004aa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004ac:	4b0d      	ldr	r3, [pc, #52]	@ (80004e4 <MX_CAN_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004b2:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <MX_CAN_Init+0x64>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004b8:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <MX_CAN_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004be:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <MX_CAN_Init+0x64>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004c4:	4b07      	ldr	r3, [pc, #28]	@ (80004e4 <MX_CAN_Init+0x64>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <MX_CAN_Init+0x64>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004d0:	4804      	ldr	r0, [pc, #16]	@ (80004e4 <MX_CAN_Init+0x64>)
 80004d2:	f001 fa1a 	bl	800190a <HAL_CAN_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80004dc:	f000 fbd0 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000e8 	.word	0x200000e8
 80004e8:	40006400 	.word	0x40006400

080004ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a1c      	ldr	r2, [pc, #112]	@ (8000578 <HAL_CAN_MspInit+0x8c>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d131      	bne.n	8000570 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800050c:	4b1b      	ldr	r3, [pc, #108]	@ (800057c <HAL_CAN_MspInit+0x90>)
 800050e:	69db      	ldr	r3, [r3, #28]
 8000510:	4a1a      	ldr	r2, [pc, #104]	@ (800057c <HAL_CAN_MspInit+0x90>)
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000516:	61d3      	str	r3, [r2, #28]
 8000518:	4b18      	ldr	r3, [pc, #96]	@ (800057c <HAL_CAN_MspInit+0x90>)
 800051a:	69db      	ldr	r3, [r3, #28]
 800051c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b15      	ldr	r3, [pc, #84]	@ (800057c <HAL_CAN_MspInit+0x90>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a14      	ldr	r2, [pc, #80]	@ (800057c <HAL_CAN_MspInit+0x90>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b12      	ldr	r3, [pc, #72]	@ (800057c <HAL_CAN_MspInit+0x90>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800053c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000540:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	4619      	mov	r1, r3
 8000550:	480b      	ldr	r0, [pc, #44]	@ (8000580 <HAL_CAN_MspInit+0x94>)
 8000552:	f001 fceb 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055c:	2302      	movs	r3, #2
 800055e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000560:	2303      	movs	r3, #3
 8000562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <HAL_CAN_MspInit+0x94>)
 800056c:	f001 fcde 	bl	8001f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40006400 	.word	0x40006400
 800057c:	40021000 	.word	0x40021000
 8000580:	40010800 	.word	0x40010800

08000584 <sendCANString>:


const unsigned char DEBUG_ID = 0x7B;
const unsigned char DEBUG_DLC = 8;

HAL_StatusTypeDef sendCANString(const char* message){
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	@ 0x38
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	unsigned long txMailbox;
	unsigned char txData[8];
	
	HAL_StatusTypeDef status = HAL_OK;
 800058c:	2300      	movs	r3, #0
 800058e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	
	txHeader.StdId = DEBUG_ID;
 8000592:	237b      	movs	r3, #123	@ 0x7b
 8000594:	61bb      	str	r3, [r7, #24]
    txHeader.ExtId = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
    txHeader.IDE = CAN_ID_STD;
 800059a:	2300      	movs	r3, #0
 800059c:	623b      	str	r3, [r7, #32]
    txHeader.RTR = CAN_RTR_DATA;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = DEBUG_DLC;
 80005a2:	2308      	movs	r3, #8
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.TransmitGlobalTime = DISABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	
	unsigned char len = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while (1) {
        if (message[len] == '\0') {
 80005b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d109      	bne.n	80005d4 <sendCANString+0x50>
            len++; // inclui o caractere nulo
 80005c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80005c4:	3301      	adds	r3, #1
 80005c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 80005ca:	bf00      	nop
        }
        len++;
    }
	
	for (unsigned char i = 0; i < len; i += 8) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80005d2:	e060      	b.n	8000696 <sendCANString+0x112>
        len++;
 80005d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80005d8:	3301      	adds	r3, #1
 80005da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if (message[len] == '\0') {
 80005de:	e7e8      	b.n	80005b2 <sendCANString+0x2e>
        txHeader.DLC = (len - i > 8) ? 8 : (len - i);
 80005e0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80005e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	2b08      	cmp	r3, #8
 80005ec:	bfa8      	it	ge
 80005ee:	2308      	movge	r3, #8
 80005f0:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (unsigned char j = 0; j < 8; j++) {
 80005f2:	2300      	movs	r3, #0
 80005f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80005f8:	e00b      	b.n	8000612 <sendCANString+0x8e>
            txData[j] = 0;
 80005fa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80005fe:	3338      	adds	r3, #56	@ 0x38
 8000600:	443b      	add	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	f803 2c2c 	strb.w	r2, [r3, #-44]
        for (unsigned char j = 0; j < 8; j++) {
 8000608:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800060c:	3301      	adds	r3, #1
 800060e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000612:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000616:	2b07      	cmp	r3, #7
 8000618:	d9ef      	bls.n	80005fa <sendCANString+0x76>
        }
        for (unsigned char j = 0; j < txHeader.DLC; j++) {
 800061a:	2300      	movs	r3, #0
 800061c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000620:	e013      	b.n	800064a <sendCANString+0xc6>
            txData[j] = message[i + j];
 8000622:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000626:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800062a:	4413      	add	r3, r2
 800062c:	461a      	mov	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	441a      	add	r2, r3
 8000632:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	3338      	adds	r3, #56	@ 0x38
 800063a:	443b      	add	r3, r7
 800063c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        for (unsigned char j = 0; j < txHeader.DLC; j++) {
 8000640:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000644:	3301      	adds	r3, #1
 8000646:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800064a:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800064e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000650:	429a      	cmp	r2, r3
 8000652:	d3e6      	bcc.n	8000622 <sendCANString+0x9e>
        }
        status = HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	f107 020c 	add.w	r2, r7, #12
 800065c:	f107 0118 	add.w	r1, r7, #24
 8000660:	4812      	ldr	r0, [pc, #72]	@ (80006ac <sendCANString+0x128>)
 8000662:	f001 fa91 	bl	8001b88 <HAL_CAN_AddTxMessage>
 8000666:	4603      	mov	r3, r0
 8000668:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (status != HAL_OK) {
 800066c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <sendCANString+0xf6>
            return status;
 8000674:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000678:	e014      	b.n	80006a4 <sendCANString+0x120>
        }
        while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox));
 800067a:	bf00      	nop
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	4619      	mov	r1, r3
 8000680:	480a      	ldr	r0, [pc, #40]	@ (80006ac <sendCANString+0x128>)
 8000682:	f001 fb50 	bl	8001d26 <HAL_CAN_IsTxMessagePending>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f7      	bne.n	800067c <sendCANString+0xf8>
	for (unsigned char i = 0; i < len; i += 8) {
 800068c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000690:	3308      	adds	r3, #8
 8000692:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000696:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800069a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800069e:	429a      	cmp	r2, r3
 80006a0:	d39e      	bcc.n	80005e0 <sendCANString+0x5c>
    }
	return HAL_OK;
 80006a2:	2300      	movs	r3, #0

}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3738      	adds	r7, #56	@ 0x38
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000e8 	.word	0x200000e8

080006b0 <sendCANData>:


HAL_StatusTypeDef sendCANData(unsigned char message[8], unsigned char CAN_ID, unsigned char CAN_DLC){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
 80006bc:	4613      	mov	r3, r2
 80006be:	70bb      	strb	r3, [r7, #2]
	CAN_TxHeaderTypeDef txHeader;
	unsigned long txMailbox;

	HAL_StatusTypeDef status = HAL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	txHeader.StdId = CAN_ID;
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	60fb      	str	r3, [r7, #12]
    txHeader.ExtId = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
    txHeader.IDE = CAN_ID_STD;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
    txHeader.RTR = CAN_RTR_DATA;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
    txHeader.DLC = 8;
 80006d6:	2308      	movs	r3, #8
 80006d8:	61fb      	str	r3, [r7, #28]
    txHeader.TransmitGlobalTime = DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 3020 	strb.w	r3, [r7, #32]

    status = HAL_CAN_AddTxMessage(&hcan, &txHeader, message, &txMailbox);
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	f107 010c 	add.w	r1, r7, #12
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	480d      	ldr	r0, [pc, #52]	@ (8000720 <sendCANData+0x70>)
 80006ec:	f001 fa4c 	bl	8001b88 <HAL_CAN_AddTxMessage>
 80006f0:	4603      	mov	r3, r0
 80006f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 80006f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d002      	beq.n	8000704 <sendCANData+0x54>
        return status;
 80006fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000702:	e009      	b.n	8000718 <sendCANData+0x68>
    }
    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox));
 8000704:	bf00      	nop
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	4619      	mov	r1, r3
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <sendCANData+0x70>)
 800070c:	f001 fb0b 	bl	8001d26 <HAL_CAN_IsTxMessagePending>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1f7      	bne.n	8000706 <sendCANData+0x56>
	return HAL_OK;
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	3728      	adds	r7, #40	@ 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000e8 	.word	0x200000e8

08000724 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	hal_message=setupSensors();
 8000728:	f000 fab0 	bl	8000c8c <setupSensors>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <MX_FREERTOS_Init+0x88>)
 8000732:	701a      	strb	r2, [r3, #0]

	Message_Debug_Time = HAL_GetTick();
 8000734:	f000 fcb4 	bl	80010a0 <HAL_GetTick>
 8000738:	4603      	mov	r3, r0
 800073a:	4a1d      	ldr	r2, [pc, #116]	@ (80007b0 <MX_FREERTOS_Init+0x8c>)
 800073c:	6013      	str	r3, [r2, #0]

	DATA_01.time = HAL_GetTick();
 800073e:	f000 fcaf 	bl	80010a0 <HAL_GetTick>
 8000742:	4603      	mov	r3, r0
 8000744:	4a1b      	ldr	r2, [pc, #108]	@ (80007b4 <MX_FREERTOS_Init+0x90>)
 8000746:	6013      	str	r3, [r2, #0]
	DATA_02.time = HAL_GetTick();
 8000748:	f000 fcaa 	bl	80010a0 <HAL_GetTick>
 800074c:	4603      	mov	r3, r0
 800074e:	4a1a      	ldr	r2, [pc, #104]	@ (80007b8 <MX_FREERTOS_Init+0x94>)
 8000750:	6013      	str	r3, [r2, #0]
	DATA_03.time = HAL_GetTick();
 8000752:	f000 fca5 	bl	80010a0 <HAL_GetTick>
 8000756:	4603      	mov	r3, r0
 8000758:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <MX_FREERTOS_Init+0x98>)
 800075a:	6013      	str	r3, [r2, #0]
	DATA_04.time = HAL_GetTick();
 800075c:	f000 fca0 	bl	80010a0 <HAL_GetTick>
 8000760:	4603      	mov	r3, r0
 8000762:	4a17      	ldr	r2, [pc, #92]	@ (80007c0 <MX_FREERTOS_Init+0x9c>)
 8000764:	6013      	str	r3, [r2, #0]
	DATA_05.time = HAL_GetTick();
 8000766:	f000 fc9b 	bl	80010a0 <HAL_GetTick>
 800076a:	4603      	mov	r3, r0
 800076c:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <MX_FREERTOS_Init+0xa0>)
 800076e:	6013      	str	r3, [r2, #0]
	DATA_06.time = HAL_GetTick();
 8000770:	f000 fc96 	bl	80010a0 <HAL_GetTick>
 8000774:	4603      	mov	r3, r0
 8000776:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <MX_FREERTOS_Init+0xa4>)
 8000778:	6013      	str	r3, [r2, #0]
	DATA_07.time = HAL_GetTick();
 800077a:	f000 fc91 	bl	80010a0 <HAL_GetTick>
 800077e:	4603      	mov	r3, r0
 8000780:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <MX_FREERTOS_Init+0xa8>)
 8000782:	6013      	str	r3, [r2, #0]
	DATA_08.time = HAL_GetTick();
 8000784:	f000 fc8c 	bl	80010a0 <HAL_GetTick>
 8000788:	4603      	mov	r3, r0
 800078a:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <MX_FREERTOS_Init+0xac>)
 800078c:	6013      	str	r3, [r2, #0]
	DATA_09.time = HAL_GetTick();
 800078e:	f000 fc87 	bl	80010a0 <HAL_GetTick>
 8000792:	4603      	mov	r3, r0
 8000794:	4a0f      	ldr	r2, [pc, #60]	@ (80007d4 <MX_FREERTOS_Init+0xb0>)
 8000796:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensor_Task */
  sensor_TaskHandle = osThreadNew(sensorTask, NULL, &sensor_Task_attributes);
 8000798:	4a0f      	ldr	r2, [pc, #60]	@ (80007d8 <MX_FREERTOS_Init+0xb4>)
 800079a:	2100      	movs	r1, #0
 800079c:	480f      	ldr	r0, [pc, #60]	@ (80007dc <MX_FREERTOS_Init+0xb8>)
 800079e:	f002 fdd7 	bl	8003350 <osThreadNew>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <MX_FREERTOS_Init+0xbc>)
 80007a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000110 	.word	0x20000110
 80007b0:	2000011c 	.word	0x2000011c
 80007b4:	20000120 	.word	0x20000120
 80007b8:	20000130 	.word	0x20000130
 80007bc:	20000140 	.word	0x20000140
 80007c0:	20000150 	.word	0x20000150
 80007c4:	20000160 	.word	0x20000160
 80007c8:	20000170 	.word	0x20000170
 80007cc:	20000180 	.word	0x20000180
 80007d0:	20000190 	.word	0x20000190
 80007d4:	200001a0 	.word	0x200001a0
 80007d8:	08006800 	.word	0x08006800
 80007dc:	080007e5 	.word	0x080007e5
 80007e0:	20000114 	.word	0x20000114

080007e4 <sensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensorTask */
void sensorTask(void *argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	@ 0x30
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorTask */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80007ec:	f003 ff76 	bl	80046dc <xTaskGetTickCount>
 80007f0:	4603      	mov	r3, r0
 80007f2:	623b      	str	r3, [r7, #32]
	uint16_t adc_value;
	char value[20];
  /* Infinite loop */
  for(;;)
  {
	RTOS_Time = HAL_GetTick();
 80007f4:	f000 fc54 	bl	80010a0 <HAL_GetTick>
 80007f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uint16_t v_ref = readADCValue1(VREF_PIN);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff fe18 	bl	8000430 <readADCValue1>
 8000800:	4603      	mov	r3, r0
 8000802:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t data;
	if (RTOS_Time - Message_Debug_Time >= MESSAGE_DEBUG_REFRESH_RATE) {
 8000804:	4b95      	ldr	r3, [pc, #596]	@ (8000a5c <sensorTask+0x278>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	4a94      	ldr	r2, [pc, #592]	@ (8000a60 <sensorTask+0x27c>)
 800080e:	8812      	ldrh	r2, [r2, #0]
 8000810:	4293      	cmp	r3, r2
 8000812:	d30e      	bcc.n	8000832 <sensorTask+0x4e>
		Message_Debug_Time = RTOS_Time;
 8000814:	4a91      	ldr	r2, [pc, #580]	@ (8000a5c <sensorTask+0x278>)
 8000816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000818:	6013      	str	r3, [r2, #0]
		adc_value=readADCValue1(0);
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff fe08 	bl	8000430 <readADCValue1>
 8000820:	4603      	mov	r3, r0
 8000822:	853b      	strh	r3, [r7, #40]	@ 0x28
		//hal_message = sendCANString("Teste: ");
		sprintf(value, "%u", adc_value);
 8000824:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	498e      	ldr	r1, [pc, #568]	@ (8000a64 <sensorTask+0x280>)
 800082c:	4618      	mov	r0, r3
 800082e:	f005 fab3 	bl	8005d98 <siprintf>
		//hal_message = sendCANString(value);
		}

	if (RTOS_Time - DATA_01.time >= DATA_01.refresh_rate) {
 8000832:	4b8d      	ldr	r3, [pc, #564]	@ (8000a68 <sensorTask+0x284>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	4a8b      	ldr	r2, [pc, #556]	@ (8000a68 <sensorTask+0x284>)
 800083c:	7912      	ldrb	r2, [r2, #4]
 800083e:	4293      	cmp	r3, r2
 8000840:	f0c0 8095 	bcc.w	800096e <sensorTask+0x18a>
	    DATA_01.time = RTOS_Time;
 8000844:	4a88      	ldr	r2, [pc, #544]	@ (8000a68 <sensorTask+0x284>)
 8000846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000848:	6013      	str	r3, [r2, #0]

	    data = readADCValue1(VBAT_PIN);  // Tensao da Bateria
 800084a:	2004      	movs	r0, #4
 800084c:	f7ff fdf0 	bl	8000430 <readADCValue1>
 8000850:	4603      	mov	r3, r0
 8000852:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_01.data[0] = data&0xFF;
 8000854:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b83      	ldr	r3, [pc, #524]	@ (8000a68 <sensorTask+0x284>)
 800085a:	71da      	strb	r2, [r3, #7]
	    DATA_01.data[1] = (data>>8)&0xF;
 800085c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800085e:	0a1b      	lsrs	r3, r3, #8
 8000860:	b29b      	uxth	r3, r3
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 030f 	and.w	r3, r3, #15
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b7f      	ldr	r3, [pc, #508]	@ (8000a68 <sensorTask+0x284>)
 800086c:	721a      	strb	r2, [r3, #8]
	    data = readADCValue1(TEMP_PIN);  // Sensor de Temperatura Interno
 800086e:	2006      	movs	r0, #6
 8000870:	f7ff fdde 	bl	8000430 <readADCValue1>
 8000874:	4603      	mov	r3, r0
 8000876:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    DATA_01.data[1]+=(data&0xF)<<4;
 8000878:	4b7b      	ldr	r3, [pc, #492]	@ (8000a68 <sensorTask+0x284>)
 800087a:	7a1a      	ldrb	r2, [r3, #8]
 800087c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800087e:	b2db      	uxtb	r3, r3
 8000880:	011b      	lsls	r3, r3, #4
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4413      	add	r3, r2
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b77      	ldr	r3, [pc, #476]	@ (8000a68 <sensorTask+0x284>)
 800088a:	721a      	strb	r2, [r3, #8]
	    DATA_01.data[2] = (data>>4)&0xFF;
 800088c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800088e:	091b      	lsrs	r3, r3, #4
 8000890:	b29b      	uxth	r3, r3
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b74      	ldr	r3, [pc, #464]	@ (8000a68 <sensorTask+0x284>)
 8000896:	725a      	strb	r2, [r3, #9]
	    DATA_01.data[3] = v_ref&0xFF;    // Tensao Referencia
 8000898:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b72      	ldr	r3, [pc, #456]	@ (8000a68 <sensorTask+0x284>)
 800089e:	729a      	strb	r2, [r3, #10]
	    DATA_01.data[4] = (v_ref>>8)&0xF;
 80008a0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f003 030f 	and.w	r3, r3, #15
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b6e      	ldr	r3, [pc, #440]	@ (8000a68 <sensorTask+0x284>)
 80008b0:	72da      	strb	r2, [r3, #11]
	    data = readADCValue1(VREF_PIN);  // Sensor de Marcha
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fdbc 	bl	8000430 <readADCValue1>
 80008b8:	4603      	mov	r3, r0
 80008ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    if (data>3682){
 80008bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008be:	f640 6262 	movw	r2, #3682	@ 0xe62
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d906      	bls.n	80008d4 <sensorTask+0xf0>
	    	DATA_01.data[4] += (7<<4);
 80008c6:	4b68      	ldr	r3, [pc, #416]	@ (8000a68 <sensorTask+0x284>)
 80008c8:	7adb      	ldrb	r3, [r3, #11]
 80008ca:	3370      	adds	r3, #112	@ 0x70
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b66      	ldr	r3, [pc, #408]	@ (8000a68 <sensorTask+0x284>)
 80008d0:	72da      	strb	r2, [r3, #11]
 80008d2:	e03f      	b.n	8000954 <sensorTask+0x170>
	    	}
	    else if (data>2995){
 80008d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008d6:	f640 32b3 	movw	r2, #2995	@ 0xbb3
 80008da:	4293      	cmp	r3, r2
 80008dc:	d906      	bls.n	80008ec <sensorTask+0x108>
	    	DATA_01.data[4] += (1<<4);
 80008de:	4b62      	ldr	r3, [pc, #392]	@ (8000a68 <sensorTask+0x284>)
 80008e0:	7adb      	ldrb	r3, [r3, #11]
 80008e2:	3310      	adds	r3, #16
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b60      	ldr	r3, [pc, #384]	@ (8000a68 <sensorTask+0x284>)
 80008e8:	72da      	strb	r2, [r3, #11]
 80008ea:	e033      	b.n	8000954 <sensorTask+0x170>
	    }
	    else if (data>2432){
 80008ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008ee:	f5b3 6f18 	cmp.w	r3, #2432	@ 0x980
 80008f2:	d906      	bls.n	8000902 <sensorTask+0x11e>
	    	DATA_01.data[4] += (2<<4);
 80008f4:	4b5c      	ldr	r3, [pc, #368]	@ (8000a68 <sensorTask+0x284>)
 80008f6:	7adb      	ldrb	r3, [r3, #11]
 80008f8:	3320      	adds	r3, #32
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a68 <sensorTask+0x284>)
 80008fe:	72da      	strb	r2, [r3, #11]
 8000900:	e028      	b.n	8000954 <sensorTask+0x170>
	    }
	    else if (data>1852){
 8000902:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000904:	f240 723c 	movw	r2, #1852	@ 0x73c
 8000908:	4293      	cmp	r3, r2
 800090a:	d906      	bls.n	800091a <sensorTask+0x136>
	    	DATA_01.data[4] += (3<<4);
 800090c:	4b56      	ldr	r3, [pc, #344]	@ (8000a68 <sensorTask+0x284>)
 800090e:	7adb      	ldrb	r3, [r3, #11]
 8000910:	3330      	adds	r3, #48	@ 0x30
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b54      	ldr	r3, [pc, #336]	@ (8000a68 <sensorTask+0x284>)
 8000916:	72da      	strb	r2, [r3, #11]
 8000918:	e01c      	b.n	8000954 <sensorTask+0x170>
	    }
	    else if (data>1249){
 800091a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800091c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000920:	4293      	cmp	r3, r2
 8000922:	d906      	bls.n	8000932 <sensorTask+0x14e>
	    	DATA_01.data[4] += (4<<4);
 8000924:	4b50      	ldr	r3, [pc, #320]	@ (8000a68 <sensorTask+0x284>)
 8000926:	7adb      	ldrb	r3, [r3, #11]
 8000928:	3340      	adds	r3, #64	@ 0x40
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b4e      	ldr	r3, [pc, #312]	@ (8000a68 <sensorTask+0x284>)
 800092e:	72da      	strb	r2, [r3, #11]
 8000930:	e010      	b.n	8000954 <sensorTask+0x170>
	    }
	    else if (data>672){
 8000932:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000934:	f5b3 7f28 	cmp.w	r3, #672	@ 0x2a0
 8000938:	d906      	bls.n	8000948 <sensorTask+0x164>
	    	DATA_01.data[4] += (5<<4);
 800093a:	4b4b      	ldr	r3, [pc, #300]	@ (8000a68 <sensorTask+0x284>)
 800093c:	7adb      	ldrb	r3, [r3, #11]
 800093e:	3350      	adds	r3, #80	@ 0x50
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b49      	ldr	r3, [pc, #292]	@ (8000a68 <sensorTask+0x284>)
 8000944:	72da      	strb	r2, [r3, #11]
 8000946:	e005      	b.n	8000954 <sensorTask+0x170>
	    }
	    else {
	    	DATA_01.data[4] += (6<<4);
 8000948:	4b47      	ldr	r3, [pc, #284]	@ (8000a68 <sensorTask+0x284>)
 800094a:	7adb      	ldrb	r3, [r3, #11]
 800094c:	3360      	adds	r3, #96	@ 0x60
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b45      	ldr	r3, [pc, #276]	@ (8000a68 <sensorTask+0x284>)
 8000952:	72da      	strb	r2, [r3, #11]
	    }
	    hal_message = sendCANData(DATA_01.data,DATA_01.id,DATA_01.dlc);
 8000954:	4b44      	ldr	r3, [pc, #272]	@ (8000a68 <sensorTask+0x284>)
 8000956:	795b      	ldrb	r3, [r3, #5]
 8000958:	4619      	mov	r1, r3
 800095a:	4b43      	ldr	r3, [pc, #268]	@ (8000a68 <sensorTask+0x284>)
 800095c:	799b      	ldrb	r3, [r3, #6]
 800095e:	461a      	mov	r2, r3
 8000960:	4842      	ldr	r0, [pc, #264]	@ (8000a6c <sensorTask+0x288>)
 8000962:	f7ff fea5 	bl	80006b0 <sendCANData>
 8000966:	4603      	mov	r3, r0
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b41      	ldr	r3, [pc, #260]	@ (8000a70 <sensorTask+0x28c>)
 800096c:	701a      	strb	r2, [r3, #0]
	}

	if (RTOS_Time - DATA_02.time >= DATA_02.refresh_rate) {
 800096e:	4b41      	ldr	r3, [pc, #260]	@ (8000a74 <sensorTask+0x290>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4a3f      	ldr	r2, [pc, #252]	@ (8000a74 <sensorTask+0x290>)
 8000978:	7912      	ldrb	r2, [r2, #4]
 800097a:	4293      	cmp	r3, r2
 800097c:	d31a      	bcc.n	80009b4 <sensorTask+0x1d0>
	    DATA_02.time = RTOS_Time;
 800097e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a74 <sensorTask+0x290>)
 8000980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000982:	6013      	str	r3, [r2, #0]





	    DATA_02.data[0] = 240;
 8000984:	4b3b      	ldr	r3, [pc, #236]	@ (8000a74 <sensorTask+0x290>)
 8000986:	22f0      	movs	r2, #240	@ 0xf0
 8000988:	71da      	strb	r2, [r3, #7]
	    DATA_02.data[1] = 174;
 800098a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a74 <sensorTask+0x290>)
 800098c:	22ae      	movs	r2, #174	@ 0xae
 800098e:	721a      	strb	r2, [r3, #8]
	    DATA_02.data[2] = 213;
 8000990:	4b38      	ldr	r3, [pc, #224]	@ (8000a74 <sensorTask+0x290>)
 8000992:	22d5      	movs	r2, #213	@ 0xd5
 8000994:	725a      	strb	r2, [r3, #9]
	    DATA_02.data[3] = 19;
 8000996:	4b37      	ldr	r3, [pc, #220]	@ (8000a74 <sensorTask+0x290>)
 8000998:	2213      	movs	r2, #19
 800099a:	729a      	strb	r2, [r3, #10]
	    DATA_02.data[4] = 32;
 800099c:	4b35      	ldr	r3, [pc, #212]	@ (8000a74 <sensorTask+0x290>)
 800099e:	2220      	movs	r2, #32
 80009a0:	72da      	strb	r2, [r3, #11]
	    DATA_02.data[5] = 124;
 80009a2:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <sensorTask+0x290>)
 80009a4:	227c      	movs	r2, #124	@ 0x7c
 80009a6:	731a      	strb	r2, [r3, #12]
	    DATA_02.data[6] = 158;
 80009a8:	4b32      	ldr	r3, [pc, #200]	@ (8000a74 <sensorTask+0x290>)
 80009aa:	229e      	movs	r2, #158	@ 0x9e
 80009ac:	735a      	strb	r2, [r3, #13]
	    DATA_02.data[7] = 67;
 80009ae:	4b31      	ldr	r3, [pc, #196]	@ (8000a74 <sensorTask+0x290>)
 80009b0:	2243      	movs	r2, #67	@ 0x43
 80009b2:	739a      	strb	r2, [r3, #14]

	    //hal_message = sendCANData(DATA_02.data,DATA_02.id,DATA_02.dlc);
	}

	if (RTOS_Time - DATA_03.time >= DATA_03.refresh_rate) {
 80009b4:	4b30      	ldr	r3, [pc, #192]	@ (8000a78 <sensorTask+0x294>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	4a2e      	ldr	r2, [pc, #184]	@ (8000a78 <sensorTask+0x294>)
 80009be:	7912      	ldrb	r2, [r2, #4]
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d302      	bcc.n	80009ca <sensorTask+0x1e6>
	    DATA_03.time = RTOS_Time;
 80009c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000a78 <sensorTask+0x294>)
 80009c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c8:	6013      	str	r3, [r2, #0]
	}

	if (RTOS_Time - DATA_04.time >= DATA_04.refresh_rate) {
 80009ca:	4b2c      	ldr	r3, [pc, #176]	@ (8000a7c <sensorTask+0x298>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a7c <sensorTask+0x298>)
 80009d4:	7912      	ldrb	r2, [r2, #4]
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d302      	bcc.n	80009e0 <sensorTask+0x1fc>
	    DATA_04.time = RTOS_Time;
 80009da:	4a28      	ldr	r2, [pc, #160]	@ (8000a7c <sensorTask+0x298>)
 80009dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009de:	6013      	str	r3, [r2, #0]
	}

	if (RTOS_Time - DATA_05.time >= DATA_05.refresh_rate) {
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <sensorTask+0x29c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	4a25      	ldr	r2, [pc, #148]	@ (8000a80 <sensorTask+0x29c>)
 80009ea:	7912      	ldrb	r2, [r2, #4]
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d302      	bcc.n	80009f6 <sensorTask+0x212>
	    DATA_05.time = RTOS_Time;
 80009f0:	4a23      	ldr	r2, [pc, #140]	@ (8000a80 <sensorTask+0x29c>)
 80009f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009f4:	6013      	str	r3, [r2, #0]
	}

	if (RTOS_Time - DATA_06.time >= DATA_06.refresh_rate) {
 80009f6:	4b23      	ldr	r3, [pc, #140]	@ (8000a84 <sensorTask+0x2a0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	4a21      	ldr	r2, [pc, #132]	@ (8000a84 <sensorTask+0x2a0>)
 8000a00:	7912      	ldrb	r2, [r2, #4]
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d302      	bcc.n	8000a0c <sensorTask+0x228>
	    DATA_06.time = RTOS_Time;
 8000a06:	4a1f      	ldr	r2, [pc, #124]	@ (8000a84 <sensorTask+0x2a0>)
 8000a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a0a:	6013      	str	r3, [r2, #0]
	}

	if (RTOS_Time - DATA_07.time >= DATA_07.refresh_rate) {
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <sensorTask+0x2a4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	4a1c      	ldr	r2, [pc, #112]	@ (8000a88 <sensorTask+0x2a4>)
 8000a16:	7912      	ldrb	r2, [r2, #4]
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d302      	bcc.n	8000a22 <sensorTask+0x23e>
	    DATA_07.time = RTOS_Time;
 8000a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a88 <sensorTask+0x2a4>)
 8000a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a20:	6013      	str	r3, [r2, #0]
	}

	if (RTOS_Time - DATA_08.time >= DATA_08.refresh_rate) {
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <sensorTask+0x2a8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	4a18      	ldr	r2, [pc, #96]	@ (8000a8c <sensorTask+0x2a8>)
 8000a2c:	7912      	ldrb	r2, [r2, #4]
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d302      	bcc.n	8000a38 <sensorTask+0x254>
	    DATA_08.time = RTOS_Time;
 8000a32:	4a16      	ldr	r2, [pc, #88]	@ (8000a8c <sensorTask+0x2a8>)
 8000a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a36:	6013      	str	r3, [r2, #0]
	}

	if (RTOS_Time - DATA_09.time >= DATA_09.refresh_rate) {
 8000a38:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <sensorTask+0x2ac>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	4a13      	ldr	r2, [pc, #76]	@ (8000a90 <sensorTask+0x2ac>)
 8000a42:	7912      	ldrb	r2, [r2, #4]
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d302      	bcc.n	8000a4e <sensorTask+0x26a>
	    DATA_09.time = RTOS_Time;
 8000a48:	4a11      	ldr	r2, [pc, #68]	@ (8000a90 <sensorTask+0x2ac>)
 8000a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a4c:	6013      	str	r3, [r2, #0]
	}

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	2164      	movs	r1, #100	@ 0x64
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 fca5 	bl	80043a4 <vTaskDelayUntil>
  {
 8000a5a:	e6cb      	b.n	80007f4 <sensorTask+0x10>
 8000a5c:	2000011c 	.word	0x2000011c
 8000a60:	08006824 	.word	0x08006824
 8000a64:	080067d8 	.word	0x080067d8
 8000a68:	20000120 	.word	0x20000120
 8000a6c:	20000127 	.word	0x20000127
 8000a70:	20000110 	.word	0x20000110
 8000a74:	20000130 	.word	0x20000130
 8000a78:	20000140 	.word	0x20000140
 8000a7c:	20000150 	.word	0x20000150
 8000a80:	20000160 	.word	0x20000160
 8000a84:	20000170 	.word	0x20000170
 8000a88:	20000180 	.word	0x20000180
 8000a8c:	20000190 	.word	0x20000190
 8000a90:	200001a0 	.word	0x200001a0

08000a94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa8:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <MX_GPIO_Init+0xb8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a27      	ldr	r2, [pc, #156]	@ (8000b4c <MX_GPIO_Init+0xb8>)
 8000aae:	f043 0320 	orr.w	r3, r3, #32
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <MX_GPIO_Init+0xb8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0320 	and.w	r3, r3, #32
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <MX_GPIO_Init+0xb8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <MX_GPIO_Init+0xb8>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_GPIO_Init+0xb8>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_GPIO_Init+0xb8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b4c <MX_GPIO_Init+0xb8>)
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_GPIO_Init+0xb8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 8000af6:	4816      	ldr	r0, [pc, #88]	@ (8000b50 <MX_GPIO_Init+0xbc>)
 8000af8:	f001 fb9c 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 8000b02:	4814      	ldr	r0, [pc, #80]	@ (8000b54 <MX_GPIO_Init+0xc0>)
 8000b04:	f001 fb96 	bl	8002234 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000b08:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <MX_GPIO_Init+0xbc>)
 8000b22:	f001 fa03 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000b26:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8000b2a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_GPIO_Init+0xc0>)
 8000b40:	f001 f9f4 	bl	8001f2c <HAL_GPIO_Init>

}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010800 	.word	0x40010800
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 fa78 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f820 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f7ff ff96 	bl	8000a94 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b68:	f7ff faf2 	bl	8000150 <MX_ADC1_Init>
  MX_CAN_Init();
 8000b6c:	f7ff fc88 	bl	8000480 <MX_CAN_Init>
  MX_ADC2_Init();
 8000b70:	f7ff fb2c 	bl	80001cc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000b74:	4808      	ldr	r0, [pc, #32]	@ (8000b98 <main+0x40>)
 8000b76:	f000 ffc3 	bl	8001b00 <HAL_CAN_Start>
  can_msg = sendCANString("CAN Started");
 8000b7a:	4808      	ldr	r0, [pc, #32]	@ (8000b9c <main+0x44>)
 8000b7c:	f7ff fd02 	bl	8000584 <sendCANString>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <main+0x48>)
 8000b86:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b88:	f002 fb9a 	bl	80032c0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b8c:	f7ff fdca 	bl	8000724 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b90:	f002 fbb8 	bl	8003304 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <main+0x3c>
 8000b98:	200000e8 	.word	0x200000e8
 8000b9c:	080067dc 	.word	0x080067dc
 8000ba0:	20000118 	.word	0x20000118

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	@ 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bae:	2228      	movs	r2, #40	@ 0x28
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f005 f912 	bl	8005ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be2:	2301      	movs	r3, #1
 8000be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bf0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fb32 	bl	8002264 <HAL_RCC_OscConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c06:	f000 f83b 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c1a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2102      	movs	r1, #2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fd9e 	bl	8002768 <HAL_RCC_ClockConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c32:	f000 f825 	bl	8000c80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c36:	2302      	movs	r3, #2
 8000c38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c3e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 ff4e 	bl	8002ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c4e:	f000 f817 	bl	8000c80 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3750      	adds	r7, #80	@ 0x50
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c6e:	f000 fa05 	bl	800107c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40000800 	.word	0x40000800

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <setupSensors>:
Sensor DATA_07;
Sensor DATA_08;
Sensor DATA_09;


HAL_StatusTypeDef setupSensors(){
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	DATA_01.refresh_rate = 5*Time_Mult;
 8000c90:	2305      	movs	r3, #5
 8000c92:	461a      	mov	r2, r3
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b46      	ldr	r3, [pc, #280]	@ (8000db4 <setupSensors+0x128>)
 8000c9c:	711a      	strb	r2, [r3, #4]
	DATA_01.id = 0x02;
 8000c9e:	4b45      	ldr	r3, [pc, #276]	@ (8000db4 <setupSensors+0x128>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	715a      	strb	r2, [r3, #5]
	DATA_01.dlc = 5;
 8000ca4:	4b43      	ldr	r3, [pc, #268]	@ (8000db4 <setupSensors+0x128>)
 8000ca6:	2205      	movs	r2, #5
 8000ca8:	719a      	strb	r2, [r3, #6]

	DATA_02.refresh_rate = 5*Time_Mult;
 8000caa:	2305      	movs	r3, #5
 8000cac:	461a      	mov	r2, r3
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b40      	ldr	r3, [pc, #256]	@ (8000db8 <setupSensors+0x12c>)
 8000cb6:	711a      	strb	r2, [r3, #4]
	DATA_02.id = 0x03;
 8000cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8000db8 <setupSensors+0x12c>)
 8000cba:	2203      	movs	r2, #3
 8000cbc:	715a      	strb	r2, [r3, #5]
	DATA_02.dlc = 8;
 8000cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8000db8 <setupSensors+0x12c>)
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	719a      	strb	r2, [r3, #6]

	DATA_03.refresh_rate = 5*Time_Mult;
 8000cc4:	2305      	movs	r3, #5
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	0092      	lsls	r2, r2, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b3b      	ldr	r3, [pc, #236]	@ (8000dbc <setupSensors+0x130>)
 8000cd0:	711a      	strb	r2, [r3, #4]
	DATA_03.id = 0x04;
 8000cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8000dbc <setupSensors+0x130>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	715a      	strb	r2, [r3, #5]
	DATA_03.dlc = 8;
 8000cd8:	4b38      	ldr	r3, [pc, #224]	@ (8000dbc <setupSensors+0x130>)
 8000cda:	2208      	movs	r2, #8
 8000cdc:	719a      	strb	r2, [r3, #6]

	DATA_04.refresh_rate = 50*Time_Mult;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	0091      	lsls	r1, r2, #2
 8000cea:	461a      	mov	r2, r3
 8000cec:	460b      	mov	r3, r1
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	4b32      	ldr	r3, [pc, #200]	@ (8000dc0 <setupSensors+0x134>)
 8000cf6:	711a      	strb	r2, [r3, #4]
	DATA_04.id = 0x05;
 8000cf8:	4b31      	ldr	r3, [pc, #196]	@ (8000dc0 <setupSensors+0x134>)
 8000cfa:	2205      	movs	r2, #5
 8000cfc:	715a      	strb	r2, [r3, #5]
	DATA_04.dlc = 8;
 8000cfe:	4b30      	ldr	r3, [pc, #192]	@ (8000dc0 <setupSensors+0x134>)
 8000d00:	2208      	movs	r2, #8
 8000d02:	719a      	strb	r2, [r3, #6]

	DATA_05.refresh_rate = 50*Time_Mult;
 8000d04:	2305      	movs	r3, #5
 8000d06:	461a      	mov	r2, r3
 8000d08:	0092      	lsls	r2, r2, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	0091      	lsls	r1, r2, #2
 8000d10:	461a      	mov	r2, r3
 8000d12:	460b      	mov	r3, r1
 8000d14:	4413      	add	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc4 <setupSensors+0x138>)
 8000d1c:	711a      	strb	r2, [r3, #4]
	DATA_05.id = 0x06;
 8000d1e:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <setupSensors+0x138>)
 8000d20:	2206      	movs	r2, #6
 8000d22:	715a      	strb	r2, [r3, #5]
	DATA_05.dlc = 6;
 8000d24:	4b27      	ldr	r3, [pc, #156]	@ (8000dc4 <setupSensors+0x138>)
 8000d26:	2206      	movs	r2, #6
 8000d28:	719a      	strb	r2, [r3, #6]

	DATA_06.refresh_rate = 5*Time_Mult;
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b24      	ldr	r3, [pc, #144]	@ (8000dc8 <setupSensors+0x13c>)
 8000d36:	711a      	strb	r2, [r3, #4]
	DATA_06.id = 0x07;
 8000d38:	4b23      	ldr	r3, [pc, #140]	@ (8000dc8 <setupSensors+0x13c>)
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	715a      	strb	r2, [r3, #5]
	DATA_06.dlc = 3;
 8000d3e:	4b22      	ldr	r3, [pc, #136]	@ (8000dc8 <setupSensors+0x13c>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	719a      	strb	r2, [r3, #6]

	DATA_07.refresh_rate = 50*Time_Mult;
 8000d44:	2305      	movs	r3, #5
 8000d46:	461a      	mov	r2, r3
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	0091      	lsls	r1, r2, #2
 8000d50:	461a      	mov	r2, r3
 8000d52:	460b      	mov	r3, r1
 8000d54:	4413      	add	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <setupSensors+0x140>)
 8000d5c:	711a      	strb	r2, [r3, #4]
	DATA_07.id = 0x08;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <setupSensors+0x140>)
 8000d60:	2208      	movs	r2, #8
 8000d62:	715a      	strb	r2, [r3, #5]
	DATA_07.dlc = 6;
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <setupSensors+0x140>)
 8000d66:	2206      	movs	r2, #6
 8000d68:	719a      	strb	r2, [r3, #6]

	DATA_08.refresh_rate = 50*Time_Mult;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	0092      	lsls	r2, r2, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	0091      	lsls	r1, r2, #2
 8000d76:	461a      	mov	r2, r3
 8000d78:	460b      	mov	r3, r1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <setupSensors+0x144>)
 8000d82:	711a      	strb	r2, [r3, #4]
	DATA_08.id = 0x09;
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <setupSensors+0x144>)
 8000d86:	2209      	movs	r2, #9
 8000d88:	715a      	strb	r2, [r3, #5]
	DATA_08.dlc = 6;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <setupSensors+0x144>)
 8000d8c:	2206      	movs	r2, #6
 8000d8e:	719a      	strb	r2, [r3, #6]

	DATA_09.refresh_rate = 5*Time_Mult;
 8000d90:	2305      	movs	r3, #5
 8000d92:	461a      	mov	r2, r3
 8000d94:	0092      	lsls	r2, r2, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <setupSensors+0x148>)
 8000d9c:	711a      	strb	r2, [r3, #4]
	DATA_09.id = 0x0A;
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <setupSensors+0x148>)
 8000da0:	220a      	movs	r2, #10
 8000da2:	715a      	strb	r2, [r3, #5]
	DATA_09.dlc = 6;
 8000da4:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <setupSensors+0x148>)
 8000da6:	2206      	movs	r2, #6
 8000da8:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	20000120 	.word	0x20000120
 8000db8:	20000130 	.word	0x20000130
 8000dbc:	20000140 	.word	0x20000140
 8000dc0:	20000150 	.word	0x20000150
 8000dc4:	20000160 	.word	0x20000160
 8000dc8:	20000170 	.word	0x20000170
 8000dcc:	20000180 	.word	0x20000180
 8000dd0:	20000190 	.word	0x20000190
 8000dd4:	200001a0 	.word	0x200001a0

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <HAL_MspInit+0x68>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	4a17      	ldr	r2, [pc, #92]	@ (8000e40 <HAL_MspInit+0x68>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6193      	str	r3, [r2, #24]
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <HAL_MspInit+0x68>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_MspInit+0x68>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a11      	ldr	r2, [pc, #68]	@ (8000e40 <HAL_MspInit+0x68>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <HAL_MspInit+0x68>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	210f      	movs	r1, #15
 8000e12:	f06f 0001 	mvn.w	r0, #1
 8000e16:	f001 f85e 	bl	8001ed6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_MspInit+0x6c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_MspInit+0x6c>)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010000 	.word	0x40010000

08000e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	@ 0x38
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e5e:	4b34      	ldr	r3, [pc, #208]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a33      	ldr	r2, [pc, #204]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b31      	ldr	r3, [pc, #196]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e76:	f107 0210 	add.w	r2, r7, #16
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fde1 	bl	8002a48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e86:	6a3b      	ldr	r3, [r7, #32]
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d103      	bne.n	8000e98 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e90:	f001 fdb2 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 8000e94:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e96:	e004      	b.n	8000ea2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e98:	f001 fdae 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea4:	4a23      	ldr	r2, [pc, #140]	@ (8000f34 <HAL_InitTick+0xec>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	0c9b      	lsrs	r3, r3, #18
 8000eac:	3b01      	subs	r3, #1
 8000eae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <HAL_InitTick+0xf0>)
 8000eb2:	4a22      	ldr	r2, [pc, #136]	@ (8000f3c <HAL_InitTick+0xf4>)
 8000eb4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <HAL_InitTick+0xf0>)
 8000eb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ebc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8000f38 <HAL_InitTick+0xf0>)
 8000ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f38 <HAL_InitTick+0xf0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <HAL_InitTick+0xf0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_InitTick+0xf0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000ed6:	4818      	ldr	r0, [pc, #96]	@ (8000f38 <HAL_InitTick+0xf0>)
 8000ed8:	f001 ff70 	bl	8002dbc <HAL_TIM_Base_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ee2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11b      	bne.n	8000f22 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000eea:	4813      	ldr	r0, [pc, #76]	@ (8000f38 <HAL_InitTick+0xf0>)
 8000eec:	f001 ffbe 	bl	8002e6c <HAL_TIM_Base_Start_IT>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ef6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d111      	bne.n	8000f22 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000efe:	201e      	movs	r0, #30
 8000f00:	f001 f805 	bl	8001f0e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	d808      	bhi.n	8000f1c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	201e      	movs	r0, #30
 8000f10:	f000 ffe1 	bl	8001ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f14:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <HAL_InitTick+0xf8>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e002      	b.n	8000f22 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f22:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3738      	adds	r7, #56	@ 0x38
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	431bde83 	.word	0x431bde83
 8000f38:	200001b0 	.word	0x200001b0
 8000f3c:	40000800 	.word	0x40000800
 8000f40:	20000004 	.word	0x20000004

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <NMI_Handler+0x4>

08000f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <TIM4_IRQHandler+0x10>)
 8000f7e:	f001 ffc7 	bl	8002f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001b0 	.word	0x200001b0

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	@ (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f004 ff74 	bl	8005ea8 <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20005000 	.word	0x20005000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	200001f8 	.word	0x200001f8
 8000ff4:	20001d30 	.word	0x20001d30

08000ff8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f7ff fff8 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480b      	ldr	r0, [pc, #44]	@ (8001038 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800100a:	490c      	ldr	r1, [pc, #48]	@ (800103c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800100c:	4a0c      	ldr	r2, [pc, #48]	@ (8001040 <LoopFillZerobss+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a09      	ldr	r2, [pc, #36]	@ (8001044 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001020:	4c09      	ldr	r4, [pc, #36]	@ (8001048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f004 ff41 	bl	8005eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001032:	f7ff fd91 	bl	8000b58 <main>
  bx lr
 8001036:	4770      	bx	lr
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001040:	080068a4 	.word	0x080068a4
  ldr r2, =_sbss
 8001044:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001048:	20001d30 	.word	0x20001d30

0800104c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_2_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_Init+0x28>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	@ (8001078 <HAL_Init+0x28>)
 800105a:	f043 0310 	orr.w	r3, r3, #16
 800105e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 ff2d 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	200f      	movs	r0, #15
 8001068:	f7ff feee 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff feb4 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40022000 	.word	0x40022000

0800107c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <HAL_IncTick+0x1c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <HAL_IncTick+0x20>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a03      	ldr	r2, [pc, #12]	@ (800109c <HAL_IncTick+0x20>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	20000008 	.word	0x20000008
 800109c:	200001fc 	.word	0x200001fc

080010a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b02      	ldr	r3, [pc, #8]	@ (80010b0 <HAL_GetTick+0x10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	200001fc 	.word	0x200001fc

080010b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e0be      	b.n	8001254 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d109      	bne.n	80010f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff f8a8 	bl	8000248 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 fbc5 	bl	8001888 <ADC_ConversionStop_Disable>
 80010fe:	4603      	mov	r3, r0
 8001100:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 8099 	bne.w	8001242 <HAL_ADC_Init+0x18e>
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 8095 	bne.w	8001242 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001120:	f023 0302 	bic.w	r3, r3, #2
 8001124:	f043 0202 	orr.w	r2, r3, #2
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001134:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7b1b      	ldrb	r3, [r3, #12]
 800113a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800113c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	4313      	orrs	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800114c:	d003      	beq.n	8001156 <HAL_ADC_Init+0xa2>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d102      	bne.n	800115c <HAL_ADC_Init+0xa8>
 8001156:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800115a:	e000      	b.n	800115e <HAL_ADC_Init+0xaa>
 800115c:	2300      	movs	r3, #0
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7d1b      	ldrb	r3, [r3, #20]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d119      	bne.n	80011a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7b1b      	ldrb	r3, [r3, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d109      	bne.n	8001188 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	3b01      	subs	r3, #1
 800117a:	035a      	lsls	r2, r3, #13
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	e00b      	b.n	80011a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118c:	f043 0220 	orr.w	r2, r3, #32
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001198:	f043 0201 	orr.w	r2, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	4b28      	ldr	r3, [pc, #160]	@ (800125c <HAL_ADC_Init+0x1a8>)
 80011bc:	4013      	ands	r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	68b9      	ldr	r1, [r7, #8]
 80011c4:	430b      	orrs	r3, r1
 80011c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011d0:	d003      	beq.n	80011da <HAL_ADC_Init+0x126>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d104      	bne.n	80011e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	3b01      	subs	r3, #1
 80011e0:	051b      	lsls	r3, r3, #20
 80011e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_ADC_Init+0x1ac>)
 8001200:	4013      	ands	r3, r2
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	429a      	cmp	r2, r3
 8001206:	d10b      	bne.n	8001220 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001212:	f023 0303 	bic.w	r3, r3, #3
 8001216:	f043 0201 	orr.w	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800121e:	e018      	b.n	8001252 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001224:	f023 0312 	bic.w	r3, r3, #18
 8001228:	f043 0210 	orr.w	r2, r3, #16
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001234:	f043 0201 	orr.w	r2, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001240:	e007      	b.n	8001252 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001246:	f043 0210 	orr.w	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001252:	7dfb      	ldrb	r3, [r7, #23]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	ffe1f7fd 	.word	0xffe1f7fd
 8001260:	ff1f0efe 	.word	0xff1f0efe

08001264 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HAL_ADC_Start+0x1a>
 800127a:	2302      	movs	r3, #2
 800127c:	e098      	b.n	80013b0 <HAL_ADC_Start+0x14c>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 faa4 	bl	80017d4 <ADC_Enable>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f040 8087 	bne.w	80013a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800129c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a41      	ldr	r2, [pc, #260]	@ (80013b8 <HAL_ADC_Start+0x154>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d105      	bne.n	80012c2 <HAL_ADC_Start+0x5e>
 80012b6:	4b41      	ldr	r3, [pc, #260]	@ (80013bc <HAL_ADC_Start+0x158>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d115      	bne.n	80012ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d026      	beq.n	800132a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ec:	e01d      	b.n	800132a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a2f      	ldr	r2, [pc, #188]	@ (80013bc <HAL_ADC_Start+0x158>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d004      	beq.n	800130e <HAL_ADC_Start+0xaa>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a2b      	ldr	r2, [pc, #172]	@ (80013b8 <HAL_ADC_Start+0x154>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10d      	bne.n	800132a <HAL_ADC_Start+0xc6>
 800130e:	4b2b      	ldr	r3, [pc, #172]	@ (80013bc <HAL_ADC_Start+0x158>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001322:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133a:	f023 0206 	bic.w	r2, r3, #6
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001342:	e002      	b.n	800134a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f06f 0202 	mvn.w	r2, #2
 800135a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001366:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800136a:	d113      	bne.n	8001394 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001370:	4a11      	ldr	r2, [pc, #68]	@ (80013b8 <HAL_ADC_Start+0x154>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d105      	bne.n	8001382 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_ADC_Start+0x158>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800137e:	2b00      	cmp	r3, #0
 8001380:	d108      	bne.n	8001394 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	e00c      	b.n	80013ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	e003      	b.n	80013ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40012800 	.word	0x40012800
 80013bc:	40012400 	.word	0x40012400

080013c0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80013d6:	f7ff fe63 	bl	80010a0 <HAL_GetTick>
 80013da:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ee:	f043 0220 	orr.w	r2, r3, #32
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0d3      	b.n	80015aa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d131      	bne.n	8001474 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001416:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800141a:	2b00      	cmp	r3, #0
 800141c:	d12a      	bne.n	8001474 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800141e:	e021      	b.n	8001464 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001426:	d01d      	beq.n	8001464 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <HAL_ADC_PollForConversion+0x7e>
 800142e:	f7ff fe37 	bl	80010a0 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d212      	bcs.n	8001464 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10b      	bne.n	8001464 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001450:	f043 0204 	orr.w	r2, r3, #4
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e0a2      	b.n	80015aa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0d6      	beq.n	8001420 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001472:	e070      	b.n	8001556 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001474:	4b4f      	ldr	r3, [pc, #316]	@ (80015b4 <HAL_ADC_PollForConversion+0x1f4>)
 8001476:	681c      	ldr	r4, [r3, #0]
 8001478:	2002      	movs	r0, #2
 800147a:	f001 fbe9 	bl	8002c50 <HAL_RCCEx_GetPeriphCLKFreq>
 800147e:	4603      	mov	r3, r0
 8001480:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6919      	ldr	r1, [r3, #16]
 800148a:	4b4b      	ldr	r3, [pc, #300]	@ (80015b8 <HAL_ADC_PollForConversion+0x1f8>)
 800148c:	400b      	ands	r3, r1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_ADC_PollForConversion+0x104>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68d9      	ldr	r1, [r3, #12]
 8001498:	4b48      	ldr	r3, [pc, #288]	@ (80015bc <HAL_ADC_PollForConversion+0x1fc>)
 800149a:	400b      	ands	r3, r1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d111      	bne.n	80014c4 <HAL_ADC_PollForConversion+0x104>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6919      	ldr	r1, [r3, #16]
 80014a6:	4b46      	ldr	r3, [pc, #280]	@ (80015c0 <HAL_ADC_PollForConversion+0x200>)
 80014a8:	400b      	ands	r3, r1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d108      	bne.n	80014c0 <HAL_ADC_PollForConversion+0x100>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68d9      	ldr	r1, [r3, #12]
 80014b4:	4b43      	ldr	r3, [pc, #268]	@ (80015c4 <HAL_ADC_PollForConversion+0x204>)
 80014b6:	400b      	ands	r3, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_ADC_PollForConversion+0x100>
 80014bc:	2314      	movs	r3, #20
 80014be:	e020      	b.n	8001502 <HAL_ADC_PollForConversion+0x142>
 80014c0:	2329      	movs	r3, #41	@ 0x29
 80014c2:	e01e      	b.n	8001502 <HAL_ADC_PollForConversion+0x142>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6919      	ldr	r1, [r3, #16]
 80014ca:	4b3d      	ldr	r3, [pc, #244]	@ (80015c0 <HAL_ADC_PollForConversion+0x200>)
 80014cc:	400b      	ands	r3, r1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d106      	bne.n	80014e0 <HAL_ADC_PollForConversion+0x120>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68d9      	ldr	r1, [r3, #12]
 80014d8:	4b3a      	ldr	r3, [pc, #232]	@ (80015c4 <HAL_ADC_PollForConversion+0x204>)
 80014da:	400b      	ands	r3, r1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00d      	beq.n	80014fc <HAL_ADC_PollForConversion+0x13c>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6919      	ldr	r1, [r3, #16]
 80014e6:	4b38      	ldr	r3, [pc, #224]	@ (80015c8 <HAL_ADC_PollForConversion+0x208>)
 80014e8:	400b      	ands	r3, r1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d108      	bne.n	8001500 <HAL_ADC_PollForConversion+0x140>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68d9      	ldr	r1, [r3, #12]
 80014f4:	4b34      	ldr	r3, [pc, #208]	@ (80015c8 <HAL_ADC_PollForConversion+0x208>)
 80014f6:	400b      	ands	r3, r1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_ADC_PollForConversion+0x140>
 80014fc:	2354      	movs	r3, #84	@ 0x54
 80014fe:	e000      	b.n	8001502 <HAL_ADC_PollForConversion+0x142>
 8001500:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001508:	e021      	b.n	800154e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d01a      	beq.n	8001548 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <HAL_ADC_PollForConversion+0x168>
 8001518:	f7ff fdc2 	bl	80010a0 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d20f      	bcs.n	8001548 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	429a      	cmp	r2, r3
 800152e:	d90b      	bls.n	8001548 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001534:	f043 0204 	orr.w	r2, r3, #4
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e030      	b.n	80015aa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3301      	adds	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	429a      	cmp	r2, r3
 8001554:	d8d9      	bhi.n	800150a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f06f 0212 	mvn.w	r2, #18
 800155e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001576:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800157a:	d115      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d105      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000000 	.word	0x20000000
 80015b8:	24924924 	.word	0x24924924
 80015bc:	00924924 	.word	0x00924924
 80015c0:	12492492 	.word	0x12492492
 80015c4:	00492492 	.word	0x00492492
 80015c8:	00249249 	.word	0x00249249

080015cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x20>
 8001600:	2302      	movs	r3, #2
 8001602:	e0dc      	b.n	80017be <HAL_ADC_ConfigChannel+0x1da>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b06      	cmp	r3, #6
 8001612:	d81c      	bhi.n	800164e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	3b05      	subs	r3, #5
 8001626:	221f      	movs	r2, #31
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	4019      	ands	r1, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3b05      	subs	r3, #5
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	635a      	str	r2, [r3, #52]	@ 0x34
 800164c:	e03c      	b.n	80016c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d81c      	bhi.n	8001690 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	3b23      	subs	r3, #35	@ 0x23
 8001668:	221f      	movs	r2, #31
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	4019      	ands	r1, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	3b23      	subs	r3, #35	@ 0x23
 8001682:	fa00 f203 	lsl.w	r2, r0, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	631a      	str	r2, [r3, #48]	@ 0x30
 800168e:	e01b      	b.n	80016c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3b41      	subs	r3, #65	@ 0x41
 80016a2:	221f      	movs	r2, #31
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4019      	ands	r1, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	3b41      	subs	r3, #65	@ 0x41
 80016bc:	fa00 f203 	lsl.w	r2, r0, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	d91c      	bls.n	800170a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68d9      	ldr	r1, [r3, #12]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	3b1e      	subs	r3, #30
 80016e2:	2207      	movs	r2, #7
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4019      	ands	r1, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	6898      	ldr	r0, [r3, #8]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	3b1e      	subs	r3, #30
 80016fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	e019      	b.n	800173e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6919      	ldr	r1, [r3, #16]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	2207      	movs	r2, #7
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	4019      	ands	r1, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6898      	ldr	r0, [r3, #8]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	fa00 f203 	lsl.w	r2, r0, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b10      	cmp	r3, #16
 8001744:	d003      	beq.n	800174e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800174a:	2b11      	cmp	r3, #17
 800174c:	d132      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1d      	ldr	r2, [pc, #116]	@ (80017c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d125      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d126      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001774:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b10      	cmp	r3, #16
 800177c:	d11a      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <HAL_ADC_ConfigChannel+0x1e8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	0c9a      	lsrs	r2, r3, #18
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001794:	e002      	b.n	800179c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3b01      	subs	r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f9      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x1b2>
 80017a2:	e007      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	f043 0220 	orr.w	r2, r3, #32
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	40012400 	.word	0x40012400
 80017cc:	20000000 	.word	0x20000000
 80017d0:	431bde83 	.word	0x431bde83

080017d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d040      	beq.n	8001874 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001802:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <ADC_Enable+0xac>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1f      	ldr	r2, [pc, #124]	@ (8001884 <ADC_Enable+0xb0>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	0c9b      	lsrs	r3, r3, #18
 800180e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001810:	e002      	b.n	8001818 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	3b01      	subs	r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f9      	bne.n	8001812 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800181e:	f7ff fc3f 	bl	80010a0 <HAL_GetTick>
 8001822:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001824:	e01f      	b.n	8001866 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001826:	f7ff fc3b 	bl	80010a0 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d918      	bls.n	8001866 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b01      	cmp	r3, #1
 8001840:	d011      	beq.n	8001866 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001846:	f043 0210 	orr.w	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e007      	b.n	8001876 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b01      	cmp	r3, #1
 8001872:	d1d8      	bne.n	8001826 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000000 	.word	0x20000000
 8001884:	431bde83 	.word	0x431bde83

08001888 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d12e      	bne.n	8001900 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0201 	bic.w	r2, r2, #1
 80018b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018b2:	f7ff fbf5 	bl	80010a0 <HAL_GetTick>
 80018b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018b8:	e01b      	b.n	80018f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018ba:	f7ff fbf1 	bl	80010a0 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d914      	bls.n	80018f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d10d      	bne.n	80018f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018da:	f043 0210 	orr.w	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e007      	b.n	8001902 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d0dc      	beq.n	80018ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0ed      	b.n	8001af8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7fe fddf 	bl	80004ec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 0201 	orr.w	r2, r2, #1
 800193c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800193e:	f7ff fbaf 	bl	80010a0 <HAL_GetTick>
 8001942:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001944:	e012      	b.n	800196c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001946:	f7ff fbab 	bl	80010a0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b0a      	cmp	r3, #10
 8001952:	d90b      	bls.n	800196c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2205      	movs	r2, #5
 8001964:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0c5      	b.n	8001af8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0e5      	beq.n	8001946 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0202 	bic.w	r2, r2, #2
 8001988:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800198a:	f7ff fb89 	bl	80010a0 <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001990:	e012      	b.n	80019b8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001992:	f7ff fb85 	bl	80010a0 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b0a      	cmp	r3, #10
 800199e:	d90b      	bls.n	80019b8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2205      	movs	r2, #5
 80019b0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e09f      	b.n	8001af8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e5      	bne.n	8001992 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7e1b      	ldrb	r3, [r3, #24]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d108      	bne.n	80019e0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e007      	b.n	80019f0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7e5b      	ldrb	r3, [r3, #25]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d108      	bne.n	8001a0a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	e007      	b.n	8001a1a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7e9b      	ldrb	r3, [r3, #26]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d108      	bne.n	8001a34 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0220 	orr.w	r2, r2, #32
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e007      	b.n	8001a44 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0220 	bic.w	r2, r2, #32
 8001a42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7edb      	ldrb	r3, [r3, #27]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d108      	bne.n	8001a5e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0210 	bic.w	r2, r2, #16
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e007      	b.n	8001a6e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0210 	orr.w	r2, r2, #16
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7f1b      	ldrb	r3, [r3, #28]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0208 	orr.w	r2, r2, #8
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e007      	b.n	8001a98 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0208 	bic.w	r2, r2, #8
 8001a96:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7f5b      	ldrb	r3, [r3, #29]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d108      	bne.n	8001ab2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0204 	orr.w	r2, r2, #4
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e007      	b.n	8001ac2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0204 	bic.w	r2, r2, #4
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	ea42 0103 	orr.w	r1, r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	1e5a      	subs	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d12e      	bne.n	8001b72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff fab8 	bl	80010a0 <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b32:	e012      	b.n	8001b5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b34:	f7ff fab4 	bl	80010a0 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b0a      	cmp	r3, #10
 8001b40:	d90b      	bls.n	8001b5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2205      	movs	r2, #5
 8001b52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e012      	b.n	8001b80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1e5      	bne.n	8001b34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e006      	b.n	8001b80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
  }
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	@ 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d003      	beq.n	8001bb4 <HAL_CAN_AddTxMessage+0x2c>
 8001bac:	7ffb      	ldrb	r3, [r7, #31]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	f040 80ad 	bne.w	8001d0e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10a      	bne.n	8001bd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8095 	beq.w	8001cfe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	0e1b      	lsrs	r3, r3, #24
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bde:	2201      	movs	r2, #1
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10d      	bne.n	8001c0c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bfa:	68f9      	ldr	r1, [r7, #12]
 8001bfc:	6809      	ldr	r1, [r1, #0]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3318      	adds	r3, #24
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	440b      	add	r3, r1
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e00f      	b.n	8001c2c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c16:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c1c:	68f9      	ldr	r1, [r7, #12]
 8001c1e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c20:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3318      	adds	r3, #24
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	440b      	add	r3, r1
 8001c2a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6819      	ldr	r1, [r3, #0]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3318      	adds	r3, #24
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	7d1b      	ldrb	r3, [r3, #20]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d111      	bne.n	8001c6c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3318      	adds	r3, #24
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	4413      	add	r3, r2
 8001c54:	3304      	adds	r3, #4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	6811      	ldr	r1, [r2, #0]
 8001c5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3318      	adds	r3, #24
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	440b      	add	r3, r1
 8001c68:	3304      	adds	r3, #4
 8001c6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3307      	adds	r3, #7
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	061a      	lsls	r2, r3, #24
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3306      	adds	r3, #6
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	041b      	lsls	r3, r3, #16
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3305      	adds	r3, #5
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	4313      	orrs	r3, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	3204      	adds	r2, #4
 8001c8c:	7812      	ldrb	r2, [r2, #0]
 8001c8e:	4610      	mov	r0, r2
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	6811      	ldr	r1, [r2, #0]
 8001c94:	ea43 0200 	orr.w	r2, r3, r0
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001ca2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3303      	adds	r3, #3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	061a      	lsls	r2, r3, #24
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3302      	adds	r3, #2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	041b      	lsls	r3, r3, #16
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	6811      	ldr	r1, [r2, #0]
 8001cca:	ea43 0200 	orr.w	r2, r3, r0
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001cd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3318      	adds	r3, #24
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	4413      	add	r3, r2
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	6811      	ldr	r1, [r2, #0]
 8001cec:	f043 0201 	orr.w	r2, r3, #1
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3318      	adds	r3, #24
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	440b      	add	r3, r1
 8001cf8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e00e      	b.n	8001d1c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e006      	b.n	8001d1c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3724      	adds	r7, #36	@ 0x24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d3a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d3c:	7afb      	ldrb	r3, [r7, #11]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d002      	beq.n	8001d48 <HAL_CAN_IsTxMessagePending+0x22>
 8001d42:	7afb      	ldrb	r3, [r7, #11]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d10b      	bne.n	8001d60 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	069b      	lsls	r3, r3, #26
 8001d52:	401a      	ands	r2, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	069b      	lsls	r3, r3, #26
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001d60:	68fb      	ldr	r3, [r7, #12]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4906      	ldr	r1, [pc, #24]	@ (8001e04 <__NVIC_EnableIRQ+0x34>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	e000e100 	.word	0xe000e100

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	@ (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	@ (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	@ 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff4f 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff64 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ffb2 	bl	8001e5c <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff81 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff57 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b08b      	sub	sp, #44	@ 0x2c
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f3e:	e169      	b.n	8002214 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f40:	2201      	movs	r2, #1
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	f040 8158 	bne.w	800220e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a9a      	ldr	r2, [pc, #616]	@ (80021cc <HAL_GPIO_Init+0x2a0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d05e      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f68:	4a98      	ldr	r2, [pc, #608]	@ (80021cc <HAL_GPIO_Init+0x2a0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d875      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f6e:	4a98      	ldr	r2, [pc, #608]	@ (80021d0 <HAL_GPIO_Init+0x2a4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d058      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f74:	4a96      	ldr	r2, [pc, #600]	@ (80021d0 <HAL_GPIO_Init+0x2a4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d86f      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f7a:	4a96      	ldr	r2, [pc, #600]	@ (80021d4 <HAL_GPIO_Init+0x2a8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d052      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f80:	4a94      	ldr	r2, [pc, #592]	@ (80021d4 <HAL_GPIO_Init+0x2a8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d869      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f86:	4a94      	ldr	r2, [pc, #592]	@ (80021d8 <HAL_GPIO_Init+0x2ac>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d04c      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f8c:	4a92      	ldr	r2, [pc, #584]	@ (80021d8 <HAL_GPIO_Init+0x2ac>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d863      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f92:	4a92      	ldr	r2, [pc, #584]	@ (80021dc <HAL_GPIO_Init+0x2b0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d046      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f98:	4a90      	ldr	r2, [pc, #576]	@ (80021dc <HAL_GPIO_Init+0x2b0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d85d      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f9e:	2b12      	cmp	r3, #18
 8001fa0:	d82a      	bhi.n	8001ff8 <HAL_GPIO_Init+0xcc>
 8001fa2:	2b12      	cmp	r3, #18
 8001fa4:	d859      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fac <HAL_GPIO_Init+0x80>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08002027 	.word	0x08002027
 8001fb0:	08002001 	.word	0x08002001
 8001fb4:	08002013 	.word	0x08002013
 8001fb8:	08002055 	.word	0x08002055
 8001fbc:	0800205b 	.word	0x0800205b
 8001fc0:	0800205b 	.word	0x0800205b
 8001fc4:	0800205b 	.word	0x0800205b
 8001fc8:	0800205b 	.word	0x0800205b
 8001fcc:	0800205b 	.word	0x0800205b
 8001fd0:	0800205b 	.word	0x0800205b
 8001fd4:	0800205b 	.word	0x0800205b
 8001fd8:	0800205b 	.word	0x0800205b
 8001fdc:	0800205b 	.word	0x0800205b
 8001fe0:	0800205b 	.word	0x0800205b
 8001fe4:	0800205b 	.word	0x0800205b
 8001fe8:	0800205b 	.word	0x0800205b
 8001fec:	0800205b 	.word	0x0800205b
 8001ff0:	08002009 	.word	0x08002009
 8001ff4:	0800201d 	.word	0x0800201d
 8001ff8:	4a79      	ldr	r2, [pc, #484]	@ (80021e0 <HAL_GPIO_Init+0x2b4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ffe:	e02c      	b.n	800205a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	623b      	str	r3, [r7, #32]
          break;
 8002006:	e029      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	3304      	adds	r3, #4
 800200e:	623b      	str	r3, [r7, #32]
          break;
 8002010:	e024      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	3308      	adds	r3, #8
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e01f      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	330c      	adds	r3, #12
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e01a      	b.n	800205c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800202e:	2304      	movs	r3, #4
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e013      	b.n	800205c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800203c:	2308      	movs	r3, #8
 800203e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	611a      	str	r2, [r3, #16]
          break;
 8002046:	e009      	b.n	800205c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002048:	2308      	movs	r3, #8
 800204a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	615a      	str	r2, [r3, #20]
          break;
 8002052:	e003      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
          break;
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x130>
          break;
 800205a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2bff      	cmp	r3, #255	@ 0xff
 8002060:	d801      	bhi.n	8002066 <HAL_GPIO_Init+0x13a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	e001      	b.n	800206a <HAL_GPIO_Init+0x13e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3304      	adds	r3, #4
 800206a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2bff      	cmp	r3, #255	@ 0xff
 8002070:	d802      	bhi.n	8002078 <HAL_GPIO_Init+0x14c>
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	e002      	b.n	800207e <HAL_GPIO_Init+0x152>
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	3b08      	subs	r3, #8
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	210f      	movs	r1, #15
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	401a      	ands	r2, r3
 8002090:	6a39      	ldr	r1, [r7, #32]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	431a      	orrs	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 80b1 	beq.w	800220e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020ac:	4b4d      	ldr	r3, [pc, #308]	@ (80021e4 <HAL_GPIO_Init+0x2b8>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a4c      	ldr	r2, [pc, #304]	@ (80021e4 <HAL_GPIO_Init+0x2b8>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b4a      	ldr	r3, [pc, #296]	@ (80021e4 <HAL_GPIO_Init+0x2b8>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020c4:	4a48      	ldr	r2, [pc, #288]	@ (80021e8 <HAL_GPIO_Init+0x2bc>)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a40      	ldr	r2, [pc, #256]	@ (80021ec <HAL_GPIO_Init+0x2c0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <HAL_GPIO_Init+0x1ec>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3f      	ldr	r2, [pc, #252]	@ (80021f0 <HAL_GPIO_Init+0x2c4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00d      	beq.n	8002114 <HAL_GPIO_Init+0x1e8>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3e      	ldr	r2, [pc, #248]	@ (80021f4 <HAL_GPIO_Init+0x2c8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <HAL_GPIO_Init+0x1e4>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a3d      	ldr	r2, [pc, #244]	@ (80021f8 <HAL_GPIO_Init+0x2cc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <HAL_GPIO_Init+0x1e0>
 8002108:	2303      	movs	r3, #3
 800210a:	e006      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 800210c:	2304      	movs	r3, #4
 800210e:	e004      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 8002110:	2302      	movs	r3, #2
 8002112:	e002      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 8002118:	2300      	movs	r3, #0
 800211a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4093      	lsls	r3, r2
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800212a:	492f      	ldr	r1, [pc, #188]	@ (80021e8 <HAL_GPIO_Init+0x2bc>)
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002144:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	492c      	ldr	r1, [pc, #176]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002152:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	4928      	ldr	r1, [pc, #160]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 800215c:	4013      	ands	r3, r2
 800215e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800216c:	4b23      	ldr	r3, [pc, #140]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	4922      	ldr	r1, [pc, #136]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800217a:	4b20      	ldr	r3, [pc, #128]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	491e      	ldr	r1, [pc, #120]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 8002184:	4013      	ands	r3, r2
 8002186:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	4918      	ldr	r1, [pc, #96]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021a2:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4914      	ldr	r1, [pc, #80]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d021      	beq.n	8002200 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021bc:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	490e      	ldr	r1, [pc, #56]	@ (80021fc <HAL_GPIO_Init+0x2d0>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
 80021c8:	e021      	b.n	800220e <HAL_GPIO_Init+0x2e2>
 80021ca:	bf00      	nop
 80021cc:	10320000 	.word	0x10320000
 80021d0:	10310000 	.word	0x10310000
 80021d4:	10220000 	.word	0x10220000
 80021d8:	10210000 	.word	0x10210000
 80021dc:	10120000 	.word	0x10120000
 80021e0:	10110000 	.word	0x10110000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40010800 	.word	0x40010800
 80021f0:	40010c00 	.word	0x40010c00
 80021f4:	40011000 	.word	0x40011000
 80021f8:	40011400 	.word	0x40011400
 80021fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_GPIO_Init+0x304>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	43db      	mvns	r3, r3
 8002208:	4909      	ldr	r1, [pc, #36]	@ (8002230 <HAL_GPIO_Init+0x304>)
 800220a:	4013      	ands	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	3301      	adds	r3, #1
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	f47f ae8e 	bne.w	8001f40 <HAL_GPIO_Init+0x14>
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	372c      	adds	r7, #44	@ 0x2c
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	40010400 	.word	0x40010400

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002250:	e003      	b.n	800225a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	611a      	str	r2, [r3, #16]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e272      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8087 	beq.w	8002392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002284:	4b92      	ldr	r3, [pc, #584]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b04      	cmp	r3, #4
 800228e:	d00c      	beq.n	80022aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002290:	4b8f      	ldr	r3, [pc, #572]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d112      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5e>
 800229c:	4b8c      	ldr	r3, [pc, #560]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a8:	d10b      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022aa:	4b89      	ldr	r3, [pc, #548]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d06c      	beq.n	8002390 <HAL_RCC_OscConfig+0x12c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d168      	bne.n	8002390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e24c      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x76>
 80022cc:	4b80      	ldr	r3, [pc, #512]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a7f      	ldr	r2, [pc, #508]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e02e      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x98>
 80022e2:	4b7b      	ldr	r3, [pc, #492]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7a      	ldr	r2, [pc, #488]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b78      	ldr	r3, [pc, #480]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a77      	ldr	r2, [pc, #476]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0xbc>
 8002306:	4b72      	ldr	r3, [pc, #456]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a71      	ldr	r2, [pc, #452]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b6f      	ldr	r3, [pc, #444]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6e      	ldr	r2, [pc, #440]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 8002320:	4b6b      	ldr	r3, [pc, #428]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6a      	ldr	r2, [pc, #424]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b68      	ldr	r3, [pc, #416]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a67      	ldr	r2, [pc, #412]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe feae 	bl	80010a0 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe feaa 	bl	80010a0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e200      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b5d      	ldr	r3, [pc, #372]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xe4>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe fe9a 	bl	80010a0 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fe96 	bl	80010a0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	@ 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1ec      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	4b53      	ldr	r3, [pc, #332]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x10c>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d063      	beq.n	8002466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800239e:	4b4c      	ldr	r3, [pc, #304]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023aa:	4b49      	ldr	r3, [pc, #292]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d11c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x18c>
 80023b6:	4b46      	ldr	r3, [pc, #280]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d116      	bne.n	80023f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	4b43      	ldr	r3, [pc, #268]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_RCC_OscConfig+0x176>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1c0      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b3d      	ldr	r3, [pc, #244]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4939      	ldr	r1, [pc, #228]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	e03a      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f8:	4b36      	ldr	r3, [pc, #216]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7fe fe4f 	bl	80010a0 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7fe fe4b 	bl	80010a0 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e1a1      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	4b2d      	ldr	r3, [pc, #180]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4927      	ldr	r1, [pc, #156]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243a:	4b26      	ldr	r3, [pc, #152]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe fe2e 	bl	80010a0 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002448:	f7fe fe2a 	bl	80010a0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e180      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d03a      	beq.n	80024e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d019      	beq.n	80024ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247a:	4b17      	ldr	r3, [pc, #92]	@ (80024d8 <HAL_RCC_OscConfig+0x274>)
 800247c:	2201      	movs	r2, #1
 800247e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002480:	f7fe fe0e 	bl	80010a0 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002488:	f7fe fe0a 	bl	80010a0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e160      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f000 fafe 	bl	8002aa8 <RCC_Delay>
 80024ac:	e01c      	b.n	80024e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_RCC_OscConfig+0x274>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7fe fdf4 	bl	80010a0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ba:	e00f      	b.n	80024dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024bc:	f7fe fdf0 	bl	80010a0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d908      	bls.n	80024dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e146      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	42420000 	.word	0x42420000
 80024d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b92      	ldr	r3, [pc, #584]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e9      	bne.n	80024bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a6 	beq.w	8002642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10d      	bne.n	8002522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	4b88      	ldr	r3, [pc, #544]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a87      	ldr	r2, [pc, #540]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]
 8002512:	4b85      	ldr	r3, [pc, #532]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b82      	ldr	r3, [pc, #520]	@ (800272c <HAL_RCC_OscConfig+0x4c8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d118      	bne.n	8002560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252e:	4b7f      	ldr	r3, [pc, #508]	@ (800272c <HAL_RCC_OscConfig+0x4c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7e      	ldr	r2, [pc, #504]	@ (800272c <HAL_RCC_OscConfig+0x4c8>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253a:	f7fe fdb1 	bl	80010a0 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7fe fdad 	bl	80010a0 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b64      	cmp	r3, #100	@ 0x64
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e103      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	4b75      	ldr	r3, [pc, #468]	@ (800272c <HAL_RCC_OscConfig+0x4c8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x312>
 8002568:	4b6f      	ldr	r3, [pc, #444]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a6e      	ldr	r2, [pc, #440]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	e02d      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x334>
 800257e:	4b6a      	ldr	r3, [pc, #424]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a69      	ldr	r2, [pc, #420]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	4b67      	ldr	r3, [pc, #412]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a66      	ldr	r2, [pc, #408]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	e01c      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d10c      	bne.n	80025ba <HAL_RCC_OscConfig+0x356>
 80025a0:	4b61      	ldr	r3, [pc, #388]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a60      	ldr	r2, [pc, #384]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	e00b      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 80025ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a5a      	ldr	r2, [pc, #360]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6213      	str	r3, [r2, #32]
 80025c6:	4b58      	ldr	r3, [pc, #352]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a57      	ldr	r2, [pc, #348]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d015      	beq.n	8002606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd61 	bl	80010a0 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe fd5d 	bl	80010a0 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0b1      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ee      	beq.n	80025e2 <HAL_RCC_OscConfig+0x37e>
 8002604:	e014      	b.n	8002630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7fe fd4b 	bl	80010a0 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe fd47 	bl	80010a0 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e09b      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	4b40      	ldr	r3, [pc, #256]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ee      	bne.n	800260e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b3c      	ldr	r3, [pc, #240]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4a3b      	ldr	r2, [pc, #236]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8087 	beq.w	800275a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800264c:	4b36      	ldr	r3, [pc, #216]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b08      	cmp	r3, #8
 8002656:	d061      	beq.n	800271c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d146      	bne.n	80026ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002660:	4b33      	ldr	r3, [pc, #204]	@ (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe fd1b 	bl	80010a0 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe fd17 	bl	80010a0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e06d      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002680:	4b29      	ldr	r3, [pc, #164]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002694:	d108      	bne.n	80026a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002696:	4b24      	ldr	r3, [pc, #144]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4921      	ldr	r1, [pc, #132]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a19      	ldr	r1, [r3, #32]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	430b      	orrs	r3, r1
 80026ba:	491b      	ldr	r1, [pc, #108]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fceb 	bl	80010a0 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe fce7 	bl	80010a0 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e03d      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x46a>
 80026ec:	e035      	b.n	800275a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fcd4 	bl	80010a0 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fcd0 	bl	80010a0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e026      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x498>
 800271a:	e01e      	b.n	800275a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e019      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
 8002728:	40021000 	.word	0x40021000
 800272c:	40007000 	.word	0x40007000
 8002730:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_OscConfig+0x500>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	429a      	cmp	r2, r3
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000

08002768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0d0      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b6a      	ldr	r3, [pc, #424]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d910      	bls.n	80027ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b67      	ldr	r3, [pc, #412]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	4965      	ldr	r1, [pc, #404]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b63      	ldr	r3, [pc, #396]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b8      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c4:	4b59      	ldr	r3, [pc, #356]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a58      	ldr	r2, [pc, #352]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027dc:	4b53      	ldr	r3, [pc, #332]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a52      	ldr	r2, [pc, #328]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b50      	ldr	r3, [pc, #320]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	494d      	ldr	r1, [pc, #308]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d040      	beq.n	8002888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b47      	ldr	r3, [pc, #284]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d115      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07f      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	4b41      	ldr	r3, [pc, #260]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e073      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	4b3d      	ldr	r3, [pc, #244]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06b      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b39      	ldr	r3, [pc, #228]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4936      	ldr	r1, [pc, #216]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002858:	f7fe fc22 	bl	80010a0 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe fc1e 	bl	80010a0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e053      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b2d      	ldr	r3, [pc, #180]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b27      	ldr	r3, [pc, #156]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d210      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 0207 	bic.w	r2, r3, #7
 800289e:	4922      	ldr	r1, [pc, #136]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e032      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4916      	ldr	r1, [pc, #88]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028e2:	4b12      	ldr	r3, [pc, #72]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	490e      	ldr	r1, [pc, #56]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028f6:	f000 f821 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	490a      	ldr	r1, [pc, #40]	@ (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	5ccb      	ldrb	r3, [r1, r3]
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	4a09      	ldr	r2, [pc, #36]	@ (8002934 <HAL_RCC_ClockConfig+0x1cc>)
 8002910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002912:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <HAL_RCC_ClockConfig+0x1d0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fa96 	bl	8000e48 <HAL_InitTick>

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40022000 	.word	0x40022000
 800292c:	40021000 	.word	0x40021000
 8002930:	08006828 	.word	0x08006828
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002956:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b04      	cmp	r3, #4
 8002964:	d002      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x30>
 8002966:	2b08      	cmp	r3, #8
 8002968:	d003      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x36>
 800296a:	e027      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800296c:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800296e:	613b      	str	r3, [r7, #16]
      break;
 8002970:	e027      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	0c9b      	lsrs	r3, r3, #18
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	4a17      	ldr	r2, [pc, #92]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800297c:	5cd3      	ldrb	r3, [r2, r3]
 800297e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d010      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800298a:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	0c5b      	lsrs	r3, r3, #17
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	4a11      	ldr	r2, [pc, #68]	@ (80029dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a0d      	ldr	r2, [pc, #52]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800299e:	fb03 f202 	mul.w	r2, r3, r2
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e004      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0c      	ldr	r2, [pc, #48]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	613b      	str	r3, [r7, #16]
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029be:	613b      	str	r3, [r7, #16]
      break;
 80029c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c2:	693b      	ldr	r3, [r7, #16]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	007a1200 	.word	0x007a1200
 80029d8:	08006840 	.word	0x08006840
 80029dc:	08006850 	.word	0x08006850
 80029e0:	003d0900 	.word	0x003d0900

080029e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e8:	4b02      	ldr	r3, [pc, #8]	@ (80029f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	20000000 	.word	0x20000000

080029f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029fc:	f7ff fff2 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4903      	ldr	r1, [pc, #12]	@ (8002a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	08006838 	.word	0x08006838

08002a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a24:	f7ff ffde 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	0adb      	lsrs	r3, r3, #11
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	@ (8002a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	08006838 	.word	0x08006838

08002a48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	220f      	movs	r2, #15
 8002a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_RCC_GetClockConfig+0x58>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0203 	and.w	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a64:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <HAL_RCC_GetClockConfig+0x58>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_GetClockConfig+0x58>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a7c:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <HAL_RCC_GetClockConfig+0x58>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	08db      	lsrs	r3, r3, #3
 8002a82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0207 	and.w	r2, r3, #7
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <RCC_Delay+0x34>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <RCC_Delay+0x38>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a5b      	lsrs	r3, r3, #9
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ac4:	bf00      	nop
  }
  while (Delay --);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	60fa      	str	r2, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f9      	bne.n	8002ac4 <RCC_Delay+0x1c>
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	10624dd3 	.word	0x10624dd3

08002ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d07d      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b04:	4b4f      	ldr	r3, [pc, #316]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10d      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b4c      	ldr	r3, [pc, #304]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4a4b      	ldr	r2, [pc, #300]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b1a:	61d3      	str	r3, [r2, #28]
 8002b1c:	4b49      	ldr	r3, [pc, #292]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b46      	ldr	r3, [pc, #280]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d118      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b38:	4b43      	ldr	r3, [pc, #268]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a42      	ldr	r2, [pc, #264]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b44:	f7fe faac 	bl	80010a0 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	e008      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4c:	f7fe faa8 	bl	80010a0 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	@ 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e06d      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b6a:	4b36      	ldr	r3, [pc, #216]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02e      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d027      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b88:	4b2e      	ldr	r3, [pc, #184]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b92:	4b2e      	ldr	r3, [pc, #184]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b98:	4b2c      	ldr	r3, [pc, #176]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b9e:	4a29      	ldr	r2, [pc, #164]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d014      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe fa77 	bl	80010a0 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe fa73 	bl	80010a0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e036      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ee      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4917      	ldr	r1, [pc, #92]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b14      	ldr	r3, [pc, #80]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	4a13      	ldr	r2, [pc, #76]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c08:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	490b      	ldr	r1, [pc, #44]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c26:	4b07      	ldr	r3, [pc, #28]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4904      	ldr	r1, [pc, #16]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	42420440 	.word	0x42420440

08002c50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	f200 808a 	bhi.w	8002d8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d045      	beq.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d075      	beq.n	8002d72 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002c86:	e082      	b.n	8002d8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002c88:	4b46      	ldr	r3, [pc, #280]	@ (8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c8e:	4b45      	ldr	r3, [pc, #276]	@ (8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d07b      	beq.n	8002d92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0c9b      	lsrs	r3, r3, #18
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	4a41      	ldr	r2, [pc, #260]	@ (8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d015      	beq.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	0c5b      	lsrs	r3, r3, #17
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	4a3b      	ldr	r2, [pc, #236]	@ (8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ccc:	4a38      	ldr	r2, [pc, #224]	@ (8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	e004      	b.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4a34      	ldr	r2, [pc, #208]	@ (8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cf4:	d102      	bne.n	8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	61bb      	str	r3, [r7, #24]
      break;
 8002cfa:	e04a      	b.n	8002d92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4a2d      	ldr	r2, [pc, #180]	@ (8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	61bb      	str	r3, [r7, #24]
      break;
 8002d0a:	e042      	b.n	8002d92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002d0c:	4b25      	ldr	r3, [pc, #148]	@ (8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d1c:	d108      	bne.n	8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002d28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	e01f      	b.n	8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d3a:	d109      	bne.n	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002d3c:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002d48:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	e00f      	b.n	8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d5a:	d11c      	bne.n	8002d96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d5c:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d016      	beq.n	8002d96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002d68:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002d6c:	61bb      	str	r3, [r7, #24]
      break;
 8002d6e:	e012      	b.n	8002d96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d70:	e011      	b.n	8002d96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d72:	f7ff fe55 	bl	8002a20 <HAL_RCC_GetPCLK2Freq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	0b9b      	lsrs	r3, r3, #14
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	3301      	adds	r3, #1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	61bb      	str	r3, [r7, #24]
      break;
 8002d8c:	e004      	b.n	8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e002      	b.n	8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d96:	bf00      	nop
    }
  }
  return (frequency);
 8002d98:	69bb      	ldr	r3, [r7, #24]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	08006854 	.word	0x08006854
 8002dac:	08006864 	.word	0x08006864
 8002db0:	007a1200 	.word	0x007a1200
 8002db4:	003d0900 	.word	0x003d0900
 8002db8:	aaaaaaab 	.word	0xaaaaaaab

08002dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e041      	b.n	8002e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f839 	bl	8002e5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f000 f99c 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d001      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e03a      	b.n	8002efa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <HAL_TIM_Base_Start_IT+0x98>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x58>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eae:	d009      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x58>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a14      	ldr	r2, [pc, #80]	@ (8002f08 <HAL_TIM_Base_Start_IT+0x9c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x58>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a13      	ldr	r2, [pc, #76]	@ (8002f0c <HAL_TIM_Base_Start_IT+0xa0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d111      	bne.n	8002ee8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b06      	cmp	r3, #6
 8002ed4:	d010      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee6:	e007      	b.n	8002ef8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	40012c00 	.word	0x40012c00
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800

08002f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d020      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01b      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0202 	mvn.w	r2, #2
 8002f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8d1 	bl	8003102 <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f8c4 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f8d3 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d020      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01b      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0204 	mvn.w	r2, #4
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8ab 	bl	8003102 <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f89e 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f8ad 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d020      	beq.n	800300c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01b      	beq.n	800300c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0208 	mvn.w	r2, #8
 8002fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f885 	bl	8003102 <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f878 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f887 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	d020      	beq.n	8003058 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01b      	beq.n	8003058 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0210 	mvn.w	r2, #16
 8003028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2208      	movs	r2, #8
 800302e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f85f 	bl	8003102 <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f852 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f861 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00c      	beq.n	800307c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0201 	mvn.w	r2, #1
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fd fdf0 	bl	8000c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8c3 	bl	8003226 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00c      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f831 	bl	8003126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0220 	mvn.w	r2, #32
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f896 	bl	8003214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a2f      	ldr	r2, [pc, #188]	@ (8003208 <TIM_Base_SetConfig+0xd0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00b      	beq.n	8003168 <TIM_Base_SetConfig+0x30>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003156:	d007      	beq.n	8003168 <TIM_Base_SetConfig+0x30>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a2c      	ldr	r2, [pc, #176]	@ (800320c <TIM_Base_SetConfig+0xd4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_Base_SetConfig+0x30>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a2b      	ldr	r2, [pc, #172]	@ (8003210 <TIM_Base_SetConfig+0xd8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d108      	bne.n	800317a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a22      	ldr	r2, [pc, #136]	@ (8003208 <TIM_Base_SetConfig+0xd0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00b      	beq.n	800319a <TIM_Base_SetConfig+0x62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003188:	d007      	beq.n	800319a <TIM_Base_SetConfig+0x62>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1f      	ldr	r2, [pc, #124]	@ (800320c <TIM_Base_SetConfig+0xd4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <TIM_Base_SetConfig+0x62>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1e      	ldr	r2, [pc, #120]	@ (8003210 <TIM_Base_SetConfig+0xd8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003208 <TIM_Base_SetConfig+0xd0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d103      	bne.n	80031e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f023 0201 	bic.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	611a      	str	r2, [r3, #16]
  }
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800

08003214 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <__NVIC_SetPriority>:
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	2b00      	cmp	r3, #0
 800324a:	db0a      	blt.n	8003262 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	490c      	ldr	r1, [pc, #48]	@ (8003284 <__NVIC_SetPriority+0x4c>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	440b      	add	r3, r1
 800325c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003260:	e00a      	b.n	8003278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4908      	ldr	r1, [pc, #32]	@ (8003288 <__NVIC_SetPriority+0x50>)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	3b04      	subs	r3, #4
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	440b      	add	r3, r1
 8003276:	761a      	strb	r2, [r3, #24]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000e100 	.word	0xe000e100
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003290:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <SysTick_Handler+0x1c>)
 8003292:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003294:	f001 fd66 	bl	8004d64 <xTaskGetSchedulerState>
 8003298:	4603      	mov	r3, r0
 800329a:	2b01      	cmp	r3, #1
 800329c:	d001      	beq.n	80032a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800329e:	f002 fb0b 	bl	80058b8 <xPortSysTickHandler>
  }
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	e000e010 	.word	0xe000e010

080032ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80032b0:	2100      	movs	r1, #0
 80032b2:	f06f 0004 	mvn.w	r0, #4
 80032b6:	f7ff ffbf 	bl	8003238 <__NVIC_SetPriority>
#endif
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032c6:	f3ef 8305 	mrs	r3, IPSR
 80032ca:	603b      	str	r3, [r7, #0]
  return(result);
 80032cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80032d2:	f06f 0305 	mvn.w	r3, #5
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	e00c      	b.n	80032f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032da:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <osKernelInitialize+0x40>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d105      	bne.n	80032ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80032e2:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <osKernelInitialize+0x40>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	e002      	b.n	80032f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80032f4:	687b      	ldr	r3, [r7, #4]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	20000200 	.word	0x20000200

08003304 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800330a:	f3ef 8305 	mrs	r3, IPSR
 800330e:	603b      	str	r3, [r7, #0]
  return(result);
 8003310:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003316:	f06f 0305 	mvn.w	r3, #5
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	e010      	b.n	8003340 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800331e:	4b0b      	ldr	r3, [pc, #44]	@ (800334c <osKernelStart+0x48>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d109      	bne.n	800333a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003326:	f7ff ffc1 	bl	80032ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800332a:	4b08      	ldr	r3, [pc, #32]	@ (800334c <osKernelStart+0x48>)
 800332c:	2202      	movs	r2, #2
 800332e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003330:	f001 f8b8 	bl	80044a4 <vTaskStartScheduler>
      stat = osOK;
 8003334:	2300      	movs	r3, #0
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	e002      	b.n	8003340 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800333a:	f04f 33ff 	mov.w	r3, #4294967295
 800333e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003340:	687b      	ldr	r3, [r7, #4]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000200 	.word	0x20000200

08003350 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	@ 0x38
 8003354:	af04      	add	r7, sp, #16
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003360:	f3ef 8305 	mrs	r3, IPSR
 8003364:	617b      	str	r3, [r7, #20]
  return(result);
 8003366:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003368:	2b00      	cmp	r3, #0
 800336a:	d17e      	bne.n	800346a <osThreadNew+0x11a>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d07b      	beq.n	800346a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003372:	2380      	movs	r3, #128	@ 0x80
 8003374:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003376:	2318      	movs	r3, #24
 8003378:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d045      	beq.n	8003416 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <osThreadNew+0x48>
        name = attr->name;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <osThreadNew+0x6e>
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b38      	cmp	r3, #56	@ 0x38
 80033b0:	d805      	bhi.n	80033be <osThreadNew+0x6e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <osThreadNew+0x72>
        return (NULL);
 80033be:	2300      	movs	r3, #0
 80033c0:	e054      	b.n	800346c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	089b      	lsrs	r3, r3, #2
 80033d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00e      	beq.n	80033f8 <osThreadNew+0xa8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2ba7      	cmp	r3, #167	@ 0xa7
 80033e0:	d90a      	bls.n	80033f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d006      	beq.n	80033f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <osThreadNew+0xa8>
        mem = 1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e010      	b.n	800341a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10c      	bne.n	800341a <osThreadNew+0xca>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d108      	bne.n	800341a <osThreadNew+0xca>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d104      	bne.n	800341a <osThreadNew+0xca>
          mem = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	e001      	b.n	800341a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d110      	bne.n	8003442 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003428:	9202      	str	r2, [sp, #8]
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	6a3a      	ldr	r2, [r7, #32]
 8003434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fdf6 	bl	8004028 <xTaskCreateStatic>
 800343c:	4603      	mov	r3, r0
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	e013      	b.n	800346a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d110      	bne.n	800346a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	b29a      	uxth	r2, r3
 800344c:	f107 0310 	add.w	r3, r7, #16
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fe44 	bl	80040e8 <xTaskCreate>
 8003460:	4603      	mov	r3, r0
 8003462:	2b01      	cmp	r3, #1
 8003464:	d001      	beq.n	800346a <osThreadNew+0x11a>
            hTask = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800346a:	693b      	ldr	r3, [r7, #16]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3728      	adds	r7, #40	@ 0x28
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a06      	ldr	r2, [pc, #24]	@ (800349c <vApplicationGetIdleTaskMemory+0x28>)
 8003484:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4a05      	ldr	r2, [pc, #20]	@ (80034a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800348a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2280      	movs	r2, #128	@ 0x80
 8003490:	601a      	str	r2, [r3, #0]
}
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	20000204 	.word	0x20000204
 80034a0:	200002ac 	.word	0x200002ac

080034a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a07      	ldr	r2, [pc, #28]	@ (80034d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80034b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4a06      	ldr	r2, [pc, #24]	@ (80034d4 <vApplicationGetTimerTaskMemory+0x30>)
 80034ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034c2:	601a      	str	r2, [r3, #0]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	200004ac 	.word	0x200004ac
 80034d4:	20000554 	.word	0x20000554

080034d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f103 0208 	add.w	r2, r3, #8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f103 0208 	add.w	r2, r3, #8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f103 0208 	add.w	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d103      	bne.n	8003594 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e00c      	b.n	80035ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3308      	adds	r3, #8
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e002      	b.n	80035a2 <vListInsert+0x2e>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d2f6      	bcs.n	800359c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6892      	ldr	r2, [r2, #8]
 80035fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6852      	ldr	r2, [r2, #4]
 8003604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	429a      	cmp	r2, r3
 800360e:	d103      	bne.n	8003618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	1e5a      	subs	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
	...

08003638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003664:	f002 f8aa 	bl	80057bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	68f9      	ldr	r1, [r7, #12]
 8003672:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	441a      	add	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003694:	3b01      	subs	r3, #1
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	441a      	add	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	22ff      	movs	r2, #255	@ 0xff
 80036a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	22ff      	movs	r2, #255	@ 0xff
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d114      	bne.n	80036e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01a      	beq.n	80036f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3310      	adds	r3, #16
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 f986 	bl	80049d8 <xTaskRemoveFromEventList>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d012      	beq.n	80036f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003708 <xQueueGenericReset+0xd0>)
 80036d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	e009      	b.n	80036f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3310      	adds	r3, #16
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fef5 	bl	80034d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3324      	adds	r3, #36	@ 0x24
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fef0 	bl	80034d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036f8:	f002 f890 	bl	800581c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036fc:	2301      	movs	r3, #1
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08e      	sub	sp, #56	@ 0x38
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	e7fd      	b.n	8003752 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <xQueueGenericCreateStatic+0x56>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <xQueueGenericCreateStatic+0x5a>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <xQueueGenericCreateStatic+0x5c>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	623b      	str	r3, [r7, #32]
}
 800377e:	bf00      	nop
 8003780:	bf00      	nop
 8003782:	e7fd      	b.n	8003780 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <xQueueGenericCreateStatic+0x84>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <xQueueGenericCreateStatic+0x88>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <xQueueGenericCreateStatic+0x8a>
 8003794:	2300      	movs	r3, #0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	61fb      	str	r3, [r7, #28]
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	e7fd      	b.n	80037ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037b2:	2350      	movs	r3, #80	@ 0x50
 80037b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b50      	cmp	r3, #80	@ 0x50
 80037ba:	d00b      	beq.n	80037d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	61bb      	str	r3, [r7, #24]
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80037da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80037ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f805 	bl	8003806 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80037fe:	4618      	mov	r0, r3
 8003800:	3730      	adds	r7, #48	@ 0x30
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d103      	bne.n	8003822 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e002      	b.n	8003828 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003834:	2101      	movs	r1, #1
 8003836:	69b8      	ldr	r0, [r7, #24]
 8003838:	f7ff fefe 	bl	8003638 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08e      	sub	sp, #56	@ 0x38
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800385a:	2300      	movs	r3, #0
 800385c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <xQueueGenericSend+0x34>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800387a:	bf00      	nop
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <xQueueGenericSend+0x42>
 8003886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <xQueueGenericSend+0x46>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <xQueueGenericSend+0x48>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <xQueueGenericSend+0x64>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d103      	bne.n	80038be <xQueueGenericSend+0x72>
 80038b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <xQueueGenericSend+0x76>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <xQueueGenericSend+0x78>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <xQueueGenericSend+0x94>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	623b      	str	r3, [r7, #32]
}
 80038da:	bf00      	nop
 80038dc:	bf00      	nop
 80038de:	e7fd      	b.n	80038dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038e0:	f001 fa40 	bl	8004d64 <xTaskGetSchedulerState>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <xQueueGenericSend+0xa4>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <xQueueGenericSend+0xa8>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <xQueueGenericSend+0xaa>
 80038f4:	2300      	movs	r3, #0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <xQueueGenericSend+0xc6>
	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	61fb      	str	r3, [r7, #28]
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	e7fd      	b.n	800390e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003912:	f001 ff53 	bl	80057bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800391a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <xQueueGenericSend+0xdc>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d129      	bne.n	800397c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800392e:	f000 fa0f 	bl	8003d50 <prvCopyDataToQueue>
 8003932:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	3324      	adds	r3, #36	@ 0x24
 8003940:	4618      	mov	r0, r3
 8003942:	f001 f849 	bl	80049d8 <xTaskRemoveFromEventList>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800394c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a4c <xQueueGenericSend+0x200>)
 800394e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	e00a      	b.n	8003974 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003964:	4b39      	ldr	r3, [pc, #228]	@ (8003a4c <xQueueGenericSend+0x200>)
 8003966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003974:	f001 ff52 	bl	800581c <vPortExitCritical>
				return pdPASS;
 8003978:	2301      	movs	r3, #1
 800397a:	e063      	b.n	8003a44 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d103      	bne.n	800398a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003982:	f001 ff4b 	bl	800581c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003986:	2300      	movs	r3, #0
 8003988:	e05c      	b.n	8003a44 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800398a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	4618      	mov	r0, r3
 8003996:	f001 f883 	bl	8004aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800399a:	2301      	movs	r3, #1
 800399c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800399e:	f001 ff3d 	bl	800581c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039a2:	f000 fdef 	bl	8004584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039a6:	f001 ff09 	bl	80057bc <vPortEnterCritical>
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039b0:	b25b      	sxtb	r3, r3
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d103      	bne.n	80039c0 <xQueueGenericSend+0x174>
 80039b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039c6:	b25b      	sxtb	r3, r3
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d103      	bne.n	80039d6 <xQueueGenericSend+0x18a>
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039d6:	f001 ff21 	bl	800581c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039da:	1d3a      	adds	r2, r7, #4
 80039dc:	f107 0314 	add.w	r3, r7, #20
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 f872 	bl	8004acc <xTaskCheckForTimeOut>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d124      	bne.n	8003a38 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039f0:	f000 faa6 	bl	8003f40 <prvIsQueueFull>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d018      	beq.n	8003a2c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fc:	3310      	adds	r3, #16
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 ff96 	bl	8004934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a0a:	f000 fa31 	bl	8003e70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a0e:	f000 fdc7 	bl	80045a0 <xTaskResumeAll>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f47f af7c 	bne.w	8003912 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <xQueueGenericSend+0x200>)
 8003a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	e772      	b.n	8003912 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a2e:	f000 fa1f 	bl	8003e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a32:	f000 fdb5 	bl	80045a0 <xTaskResumeAll>
 8003a36:	e76c      	b.n	8003912 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a3a:	f000 fa19 	bl	8003e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a3e:	f000 fdaf 	bl	80045a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3738      	adds	r7, #56	@ 0x38
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b090      	sub	sp, #64	@ 0x40
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a7a:	bf00      	nop
 8003a7c:	bf00      	nop
 8003a7e:	e7fd      	b.n	8003a7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <xQueueGenericSendFromISR+0x3e>
 8003a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <xQueueGenericSendFromISR+0x42>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <xQueueGenericSendFromISR+0x44>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d103      	bne.n	8003abe <xQueueGenericSendFromISR+0x6e>
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <xQueueGenericSendFromISR+0x72>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <xQueueGenericSendFromISR+0x74>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	623b      	str	r3, [r7, #32]
}
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ae0:	f001 ff2e 	bl	8005940 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ae4:	f3ef 8211 	mrs	r2, BASEPRI
 8003ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	61fa      	str	r2, [r7, #28]
 8003afa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003afc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003afe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d302      	bcc.n	8003b12 <xQueueGenericSendFromISR+0xc2>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d12f      	bne.n	8003b72 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b28:	f000 f912 	bl	8003d50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d112      	bne.n	8003b5c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d016      	beq.n	8003b6c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b40:	3324      	adds	r3, #36	@ 0x24
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 ff48 	bl	80049d8 <xTaskRemoveFromEventList>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00b      	beq.n	8003b6c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e007      	b.n	8003b6c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b60:	3301      	adds	r3, #1
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	b25a      	sxtb	r2, r3
 8003b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003b70:	e001      	b.n	8003b76 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b78:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3740      	adds	r7, #64	@ 0x40
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08c      	sub	sp, #48	@ 0x30
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10b      	bne.n	8003bbe <xQueueReceive+0x32>
	__asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	623b      	str	r3, [r7, #32]
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	e7fd      	b.n	8003bba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <xQueueReceive+0x40>
 8003bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <xQueueReceive+0x44>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <xQueueReceive+0x46>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <xQueueReceive+0x62>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	61fb      	str	r3, [r7, #28]
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	e7fd      	b.n	8003bea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bee:	f001 f8b9 	bl	8004d64 <xTaskGetSchedulerState>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <xQueueReceive+0x72>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <xQueueReceive+0x76>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <xQueueReceive+0x78>
 8003c02:	2300      	movs	r3, #0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <xQueueReceive+0x94>
	__asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	61bb      	str	r3, [r7, #24]
}
 8003c1a:	bf00      	nop
 8003c1c:	bf00      	nop
 8003c1e:	e7fd      	b.n	8003c1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c20:	f001 fdcc 	bl	80057bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01f      	beq.n	8003c70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c34:	f000 f8f6 	bl	8003e24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	1e5a      	subs	r2, r3, #1
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00f      	beq.n	8003c68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4a:	3310      	adds	r3, #16
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fec3 	bl	80049d8 <xTaskRemoveFromEventList>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c58:	4b3c      	ldr	r3, [pc, #240]	@ (8003d4c <xQueueReceive+0x1c0>)
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c68:	f001 fdd8 	bl	800581c <vPortExitCritical>
				return pdPASS;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e069      	b.n	8003d44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c76:	f001 fdd1 	bl	800581c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e062      	b.n	8003d44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c84:	f107 0310 	add.w	r3, r7, #16
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 ff09 	bl	8004aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c92:	f001 fdc3 	bl	800581c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c96:	f000 fc75 	bl	8004584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c9a:	f001 fd8f 	bl	80057bc <vPortEnterCritical>
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ca4:	b25b      	sxtb	r3, r3
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d103      	bne.n	8003cb4 <xQueueReceive+0x128>
 8003cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cba:	b25b      	sxtb	r3, r3
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d103      	bne.n	8003cca <xQueueReceive+0x13e>
 8003cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cca:	f001 fda7 	bl	800581c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cce:	1d3a      	adds	r2, r7, #4
 8003cd0:	f107 0310 	add.w	r3, r7, #16
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fef8 	bl	8004acc <xTaskCheckForTimeOut>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d123      	bne.n	8003d2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ce4:	f000 f916 	bl	8003f14 <prvIsQueueEmpty>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d017      	beq.n	8003d1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf0:	3324      	adds	r3, #36	@ 0x24
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fe1c 	bl	8004934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cfe:	f000 f8b7 	bl	8003e70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d02:	f000 fc4d 	bl	80045a0 <xTaskResumeAll>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d189      	bne.n	8003c20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <xQueueReceive+0x1c0>)
 8003d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	e780      	b.n	8003c20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d20:	f000 f8a6 	bl	8003e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d24:	f000 fc3c 	bl	80045a0 <xTaskResumeAll>
 8003d28:	e77a      	b.n	8003c20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d2c:	f000 f8a0 	bl	8003e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d30:	f000 fc36 	bl	80045a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d36:	f000 f8ed 	bl	8003f14 <prvIsQueueEmpty>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f43f af6f 	beq.w	8003c20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3730      	adds	r7, #48	@ 0x30
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10d      	bne.n	8003d8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d14d      	bne.n	8003e12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 f810 	bl	8004da0 <xTaskPriorityDisinherit>
 8003d80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	e043      	b.n	8003e12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d119      	bne.n	8003dc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6858      	ldr	r0, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	f002 f8b0 	bl	8005f00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da8:	441a      	add	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d32b      	bcc.n	8003e12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	e026      	b.n	8003e12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	68d8      	ldr	r0, [r3, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	f002 f896 	bl	8005f00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	425b      	negs	r3, r3
 8003dde:	441a      	add	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d207      	bcs.n	8003e00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	425b      	negs	r3, r3
 8003dfa:	441a      	add	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d105      	bne.n	8003e12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003e1a:	697b      	ldr	r3, [r7, #20]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d018      	beq.n	8003e68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	441a      	add	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d303      	bcc.n	8003e58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68d9      	ldr	r1, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	461a      	mov	r2, r3
 8003e62:	6838      	ldr	r0, [r7, #0]
 8003e64:	f002 f84c 	bl	8005f00 <memcpy>
	}
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e78:	f001 fca0 	bl	80057bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e84:	e011      	b.n	8003eaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d012      	beq.n	8003eb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3324      	adds	r3, #36	@ 0x24
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fda0 	bl	80049d8 <xTaskRemoveFromEventList>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e9e:	f000 fe79 	bl	8004b94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	dce9      	bgt.n	8003e86 <prvUnlockQueue+0x16>
 8003eb2:	e000      	b.n	8003eb6 <prvUnlockQueue+0x46>
					break;
 8003eb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	22ff      	movs	r2, #255	@ 0xff
 8003eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003ebe:	f001 fcad 	bl	800581c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ec2:	f001 fc7b 	bl	80057bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ecc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ece:	e011      	b.n	8003ef4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d012      	beq.n	8003efe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3310      	adds	r3, #16
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fd7b 	bl	80049d8 <xTaskRemoveFromEventList>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ee8:	f000 fe54 	bl	8004b94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003eec:	7bbb      	ldrb	r3, [r7, #14]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dce9      	bgt.n	8003ed0 <prvUnlockQueue+0x60>
 8003efc:	e000      	b.n	8003f00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003efe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	22ff      	movs	r2, #255	@ 0xff
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003f08:	f001 fc88 	bl	800581c <vPortExitCritical>
}
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f1c:	f001 fc4e 	bl	80057bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e001      	b.n	8003f32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f32:	f001 fc73 	bl	800581c <vPortExitCritical>

	return xReturn;
 8003f36:	68fb      	ldr	r3, [r7, #12]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f48:	f001 fc38 	bl	80057bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d102      	bne.n	8003f5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	e001      	b.n	8003f62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f62:	f001 fc5b 	bl	800581c <vPortExitCritical>

	return xReturn;
 8003f66:	68fb      	ldr	r3, [r7, #12]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e014      	b.n	8003faa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f80:	4a0e      	ldr	r2, [pc, #56]	@ (8003fbc <vQueueAddToRegistry+0x4c>)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f8c:	490b      	ldr	r1, [pc, #44]	@ (8003fbc <vQueueAddToRegistry+0x4c>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f96:	4a09      	ldr	r2, [pc, #36]	@ (8003fbc <vQueueAddToRegistry+0x4c>)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fa2:	e006      	b.n	8003fb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b07      	cmp	r3, #7
 8003fae:	d9e7      	bls.n	8003f80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	20000954 	.word	0x20000954

08003fc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fd0:	f001 fbf4 	bl	80057bc <vPortEnterCritical>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fda:	b25b      	sxtb	r3, r3
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d103      	bne.n	8003fea <vQueueWaitForMessageRestricted+0x2a>
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ff0:	b25b      	sxtb	r3, r3
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d103      	bne.n	8004000 <vQueueWaitForMessageRestricted+0x40>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004000:	f001 fc0c 	bl	800581c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3324      	adds	r3, #36	@ 0x24
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fcb3 	bl	8004980 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800401a:	6978      	ldr	r0, [r7, #20]
 800401c:	f7ff ff28 	bl	8003e70 <prvUnlockQueue>
	}
 8004020:	bf00      	nop
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08e      	sub	sp, #56	@ 0x38
 800402c:	af04      	add	r7, sp, #16
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <xTaskCreateStatic+0x2c>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	623b      	str	r3, [r7, #32]
}
 800404e:	bf00      	nop
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10b      	bne.n	8004072 <xTaskCreateStatic+0x4a>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	61fb      	str	r3, [r7, #28]
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	e7fd      	b.n	800406e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004072:	23a8      	movs	r3, #168	@ 0xa8
 8004074:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2ba8      	cmp	r3, #168	@ 0xa8
 800407a:	d00b      	beq.n	8004094 <xTaskCreateStatic+0x6c>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	61bb      	str	r3, [r7, #24]
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	e7fd      	b.n	8004090 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004094:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01e      	beq.n	80040da <xTaskCreateStatic+0xb2>
 800409c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01b      	beq.n	80040da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040b4:	2300      	movs	r3, #0
 80040b6:	9303      	str	r3, [sp, #12]
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	9302      	str	r3, [sp, #8]
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f851 	bl	8004174 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040d4:	f000 f8f6 	bl	80042c4 <prvAddNewTaskToReadyList>
 80040d8:	e001      	b.n	80040de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040de:	697b      	ldr	r3, [r7, #20]
	}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3728      	adds	r7, #40	@ 0x28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08c      	sub	sp, #48	@ 0x30
 80040ec:	af04      	add	r7, sp, #16
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 fc5f 	bl	80059c0 <pvPortMalloc>
 8004102:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00e      	beq.n	8004128 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800410a:	20a8      	movs	r0, #168	@ 0xa8
 800410c:	f001 fc58 	bl	80059c0 <pvPortMalloc>
 8004110:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	631a      	str	r2, [r3, #48]	@ 0x30
 800411e:	e005      	b.n	800412c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004120:	6978      	ldr	r0, [r7, #20]
 8004122:	f001 fd1b 	bl	8005b5c <vPortFree>
 8004126:	e001      	b.n	800412c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004128:	2300      	movs	r3, #0
 800412a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d017      	beq.n	8004162 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	2300      	movs	r3, #0
 800413e:	9303      	str	r3, [sp, #12]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	9302      	str	r3, [sp, #8]
 8004144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f80f 	bl	8004174 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004156:	69f8      	ldr	r0, [r7, #28]
 8004158:	f000 f8b4 	bl	80042c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800415c:	2301      	movs	r3, #1
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	e002      	b.n	8004168 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004162:	f04f 33ff 	mov.w	r3, #4294967295
 8004166:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004168:	69bb      	ldr	r3, [r7, #24]
	}
 800416a:	4618      	mov	r0, r3
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	461a      	mov	r2, r3
 800418c:	21a5      	movs	r1, #165	@ 0xa5
 800418e:	f001 fe25 	bl	8005ddc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800419c:	3b01      	subs	r3, #1
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f023 0307 	bic.w	r3, r3, #7
 80041aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	617b      	str	r3, [r7, #20]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01f      	beq.n	8004214 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	e012      	b.n	8004200 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	7819      	ldrb	r1, [r3, #0]
 80041e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	3334      	adds	r3, #52	@ 0x34
 80041ea:	460a      	mov	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3301      	adds	r3, #1
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b0f      	cmp	r3, #15
 8004204:	d9e9      	bls.n	80041da <prvInitialiseNewTask+0x66>
 8004206:	e000      	b.n	800420a <prvInitialiseNewTask+0x96>
			{
				break;
 8004208:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004212:	e003      	b.n	800421c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421e:	2b37      	cmp	r3, #55	@ 0x37
 8004220:	d901      	bls.n	8004226 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004222:	2337      	movs	r3, #55	@ 0x37
 8004224:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800422a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004230:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004234:	2200      	movs	r2, #0
 8004236:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423a:	3304      	adds	r3, #4
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff f96a 	bl	8003516 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	3318      	adds	r3, #24
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff f965 	bl	8003516 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800424c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004250:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004254:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004264:	2200      	movs	r2, #0
 8004266:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	2200      	movs	r2, #0
 800426e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004274:	3354      	adds	r3, #84	@ 0x54
 8004276:	224c      	movs	r2, #76	@ 0x4c
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f001 fdae 	bl	8005ddc <memset>
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	4a0d      	ldr	r2, [pc, #52]	@ (80042b8 <prvInitialiseNewTask+0x144>)
 8004284:	659a      	str	r2, [r3, #88]	@ 0x58
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	4a0c      	ldr	r2, [pc, #48]	@ (80042bc <prvInitialiseNewTask+0x148>)
 800428a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	4a0c      	ldr	r2, [pc, #48]	@ (80042c0 <prvInitialiseNewTask+0x14c>)
 8004290:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	68f9      	ldr	r1, [r7, #12]
 8004296:	69b8      	ldr	r0, [r7, #24]
 8004298:	f001 f99e 	bl	80055d8 <pxPortInitialiseStack>
 800429c:	4602      	mov	r2, r0
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ae:	bf00      	nop
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20001be8 	.word	0x20001be8
 80042bc:	20001c50 	.word	0x20001c50
 80042c0:	20001cb8 	.word	0x20001cb8

080042c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042cc:	f001 fa76 	bl	80057bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004388 <prvAddNewTaskToReadyList+0xc4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004388 <prvAddNewTaskToReadyList+0xc4>)
 80042d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042da:	4b2c      	ldr	r3, [pc, #176]	@ (800438c <prvAddNewTaskToReadyList+0xc8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042e2:	4a2a      	ldr	r2, [pc, #168]	@ (800438c <prvAddNewTaskToReadyList+0xc8>)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042e8:	4b27      	ldr	r3, [pc, #156]	@ (8004388 <prvAddNewTaskToReadyList+0xc4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d110      	bne.n	8004312 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042f0:	f000 fc74 	bl	8004bdc <prvInitialiseTaskLists>
 80042f4:	e00d      	b.n	8004312 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042f6:	4b26      	ldr	r3, [pc, #152]	@ (8004390 <prvAddNewTaskToReadyList+0xcc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042fe:	4b23      	ldr	r3, [pc, #140]	@ (800438c <prvAddNewTaskToReadyList+0xc8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	429a      	cmp	r2, r3
 800430a:	d802      	bhi.n	8004312 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800430c:	4a1f      	ldr	r2, [pc, #124]	@ (800438c <prvAddNewTaskToReadyList+0xc8>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004312:	4b20      	ldr	r3, [pc, #128]	@ (8004394 <prvAddNewTaskToReadyList+0xd0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3301      	adds	r3, #1
 8004318:	4a1e      	ldr	r2, [pc, #120]	@ (8004394 <prvAddNewTaskToReadyList+0xd0>)
 800431a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800431c:	4b1d      	ldr	r3, [pc, #116]	@ (8004394 <prvAddNewTaskToReadyList+0xd0>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004328:	4b1b      	ldr	r3, [pc, #108]	@ (8004398 <prvAddNewTaskToReadyList+0xd4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d903      	bls.n	8004338 <prvAddNewTaskToReadyList+0x74>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	4a18      	ldr	r2, [pc, #96]	@ (8004398 <prvAddNewTaskToReadyList+0xd4>)
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4a15      	ldr	r2, [pc, #84]	@ (800439c <prvAddNewTaskToReadyList+0xd8>)
 8004346:	441a      	add	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f7ff f8ed 	bl	800352e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004354:	f001 fa62 	bl	800581c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004358:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <prvAddNewTaskToReadyList+0xcc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00e      	beq.n	800437e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004360:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <prvAddNewTaskToReadyList+0xc8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	429a      	cmp	r2, r3
 800436c:	d207      	bcs.n	800437e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800436e:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <prvAddNewTaskToReadyList+0xdc>)
 8004370:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000e68 	.word	0x20000e68
 800438c:	20000994 	.word	0x20000994
 8004390:	20000e74 	.word	0x20000e74
 8004394:	20000e84 	.word	0x20000e84
 8004398:	20000e70 	.word	0x20000e70
 800439c:	20000998 	.word	0x20000998
 80043a0:	e000ed04 	.word	0xe000ed04

080043a4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	@ 0x28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <vTaskDelayUntil+0x2c>
	__asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	617b      	str	r3, [r7, #20]
}
 80043ca:	bf00      	nop
 80043cc:	bf00      	nop
 80043ce:	e7fd      	b.n	80043cc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <vTaskDelayUntil+0x4a>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	613b      	str	r3, [r7, #16]
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	e7fd      	b.n	80043ea <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80043ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004498 <vTaskDelayUntil+0xf4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00b      	beq.n	800440e <vTaskDelayUntil+0x6a>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60fb      	str	r3, [r7, #12]
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	e7fd      	b.n	800440a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800440e:	f000 f8b9 	bl	8004584 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004412:	4b22      	ldr	r3, [pc, #136]	@ (800449c <vTaskDelayUntil+0xf8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	4413      	add	r3, r2
 8004420:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a3a      	ldr	r2, [r7, #32]
 8004428:	429a      	cmp	r2, r3
 800442a:	d20b      	bcs.n	8004444 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	429a      	cmp	r2, r3
 8004434:	d211      	bcs.n	800445a <vTaskDelayUntil+0xb6>
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	429a      	cmp	r2, r3
 800443c:	d90d      	bls.n	800445a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800443e:	2301      	movs	r3, #1
 8004440:	627b      	str	r3, [r7, #36]	@ 0x24
 8004442:	e00a      	b.n	800445a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	429a      	cmp	r2, r3
 800444c:	d303      	bcc.n	8004456 <vTaskDelayUntil+0xb2>
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	429a      	cmp	r2, r3
 8004454:	d901      	bls.n	800445a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004456:	2301      	movs	r3, #1
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	d006      	beq.n	8004474 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2100      	movs	r1, #0
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fd06 	bl	8004e80 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004474:	f000 f894 	bl	80045a0 <xTaskResumeAll>
 8004478:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8004480:	4b07      	ldr	r3, [pc, #28]	@ (80044a0 <vTaskDelayUntil+0xfc>)
 8004482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004490:	bf00      	nop
 8004492:	3728      	adds	r7, #40	@ 0x28
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000e90 	.word	0x20000e90
 800449c:	20000e6c 	.word	0x20000e6c
 80044a0:	e000ed04 	.word	0xe000ed04

080044a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	@ 0x28
 80044a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044b2:	463a      	mov	r2, r7
 80044b4:	1d39      	adds	r1, r7, #4
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe ffda 	bl	8003474 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044c0:	6839      	ldr	r1, [r7, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	9202      	str	r2, [sp, #8]
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	2300      	movs	r3, #0
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	2300      	movs	r3, #0
 80044d0:	460a      	mov	r2, r1
 80044d2:	4924      	ldr	r1, [pc, #144]	@ (8004564 <vTaskStartScheduler+0xc0>)
 80044d4:	4824      	ldr	r0, [pc, #144]	@ (8004568 <vTaskStartScheduler+0xc4>)
 80044d6:	f7ff fda7 	bl	8004028 <xTaskCreateStatic>
 80044da:	4603      	mov	r3, r0
 80044dc:	4a23      	ldr	r2, [pc, #140]	@ (800456c <vTaskStartScheduler+0xc8>)
 80044de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044e0:	4b22      	ldr	r3, [pc, #136]	@ (800456c <vTaskStartScheduler+0xc8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044e8:	2301      	movs	r3, #1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e001      	b.n	80044f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d102      	bne.n	80044fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044f8:	f000 fd16 	bl	8004f28 <xTimerCreateTimerTask>
 80044fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d11b      	bne.n	800453c <vTaskStartScheduler+0x98>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	613b      	str	r3, [r7, #16]
}
 8004516:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004518:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <vTaskStartScheduler+0xcc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3354      	adds	r3, #84	@ 0x54
 800451e:	4a15      	ldr	r2, [pc, #84]	@ (8004574 <vTaskStartScheduler+0xd0>)
 8004520:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004522:	4b15      	ldr	r3, [pc, #84]	@ (8004578 <vTaskStartScheduler+0xd4>)
 8004524:	f04f 32ff 	mov.w	r2, #4294967295
 8004528:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800452a:	4b14      	ldr	r3, [pc, #80]	@ (800457c <vTaskStartScheduler+0xd8>)
 800452c:	2201      	movs	r2, #1
 800452e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004530:	4b13      	ldr	r3, [pc, #76]	@ (8004580 <vTaskStartScheduler+0xdc>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004536:	f001 f8cf 	bl	80056d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800453a:	e00f      	b.n	800455c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004542:	d10b      	bne.n	800455c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	60fb      	str	r3, [r7, #12]
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <vTaskStartScheduler+0xb4>
}
 800455c:	bf00      	nop
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	080067e8 	.word	0x080067e8
 8004568:	08004bad 	.word	0x08004bad
 800456c:	20000e8c 	.word	0x20000e8c
 8004570:	20000994 	.word	0x20000994
 8004574:	20000010 	.word	0x20000010
 8004578:	20000e88 	.word	0x20000e88
 800457c:	20000e74 	.word	0x20000e74
 8004580:	20000e6c 	.word	0x20000e6c

08004584 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004588:	4b04      	ldr	r3, [pc, #16]	@ (800459c <vTaskSuspendAll+0x18>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	4a03      	ldr	r2, [pc, #12]	@ (800459c <vTaskSuspendAll+0x18>)
 8004590:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004592:	bf00      	nop
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000e90 	.word	0x20000e90

080045a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045ae:	4b42      	ldr	r3, [pc, #264]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <xTaskResumeAll+0x2e>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	603b      	str	r3, [r7, #0]
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	e7fd      	b.n	80045ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045ce:	f001 f8f5 	bl	80057bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045d2:	4b39      	ldr	r3, [pc, #228]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	4a37      	ldr	r2, [pc, #220]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045dc:	4b36      	ldr	r3, [pc, #216]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d162      	bne.n	80046aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045e4:	4b35      	ldr	r3, [pc, #212]	@ (80046bc <xTaskResumeAll+0x11c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d05e      	beq.n	80046aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ec:	e02f      	b.n	800464e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ee:	4b34      	ldr	r3, [pc, #208]	@ (80046c0 <xTaskResumeAll+0x120>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3318      	adds	r3, #24
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fff2 	bl	80035e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3304      	adds	r3, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe ffed 	bl	80035e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460e:	4b2d      	ldr	r3, [pc, #180]	@ (80046c4 <xTaskResumeAll+0x124>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d903      	bls.n	800461e <xTaskResumeAll+0x7e>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461a:	4a2a      	ldr	r2, [pc, #168]	@ (80046c4 <xTaskResumeAll+0x124>)
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4a27      	ldr	r2, [pc, #156]	@ (80046c8 <xTaskResumeAll+0x128>)
 800462c:	441a      	add	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7fe ff7a 	bl	800352e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800463e:	4b23      	ldr	r3, [pc, #140]	@ (80046cc <xTaskResumeAll+0x12c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004648:	4b21      	ldr	r3, [pc, #132]	@ (80046d0 <xTaskResumeAll+0x130>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800464e:	4b1c      	ldr	r3, [pc, #112]	@ (80046c0 <xTaskResumeAll+0x120>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1cb      	bne.n	80045ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800465c:	f000 fb62 	bl	8004d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004660:	4b1c      	ldr	r3, [pc, #112]	@ (80046d4 <xTaskResumeAll+0x134>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d010      	beq.n	800468e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800466c:	f000 f844 	bl	80046f8 <xTaskIncrementTick>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004676:	4b16      	ldr	r3, [pc, #88]	@ (80046d0 <xTaskResumeAll+0x130>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f1      	bne.n	800466c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004688:	4b12      	ldr	r3, [pc, #72]	@ (80046d4 <xTaskResumeAll+0x134>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800468e:	4b10      	ldr	r3, [pc, #64]	@ (80046d0 <xTaskResumeAll+0x130>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004696:	2301      	movs	r3, #1
 8004698:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800469a:	4b0f      	ldr	r3, [pc, #60]	@ (80046d8 <xTaskResumeAll+0x138>)
 800469c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046aa:	f001 f8b7 	bl	800581c <vPortExitCritical>

	return xAlreadyYielded;
 80046ae:	68bb      	ldr	r3, [r7, #8]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000e90 	.word	0x20000e90
 80046bc:	20000e68 	.word	0x20000e68
 80046c0:	20000e28 	.word	0x20000e28
 80046c4:	20000e70 	.word	0x20000e70
 80046c8:	20000998 	.word	0x20000998
 80046cc:	20000994 	.word	0x20000994
 80046d0:	20000e7c 	.word	0x20000e7c
 80046d4:	20000e78 	.word	0x20000e78
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046e2:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <xTaskGetTickCount+0x18>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046e8:	687b      	ldr	r3, [r7, #4]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr
 80046f4:	20000e6c 	.word	0x20000e6c

080046f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004702:	4b4f      	ldr	r3, [pc, #316]	@ (8004840 <xTaskIncrementTick+0x148>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f040 8090 	bne.w	800482c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800470c:	4b4d      	ldr	r3, [pc, #308]	@ (8004844 <xTaskIncrementTick+0x14c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3301      	adds	r3, #1
 8004712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004714:	4a4b      	ldr	r2, [pc, #300]	@ (8004844 <xTaskIncrementTick+0x14c>)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d121      	bne.n	8004764 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004720:	4b49      	ldr	r3, [pc, #292]	@ (8004848 <xTaskIncrementTick+0x150>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00b      	beq.n	8004742 <xTaskIncrementTick+0x4a>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	603b      	str	r3, [r7, #0]
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <xTaskIncrementTick+0x46>
 8004742:	4b41      	ldr	r3, [pc, #260]	@ (8004848 <xTaskIncrementTick+0x150>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	4b40      	ldr	r3, [pc, #256]	@ (800484c <xTaskIncrementTick+0x154>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a3e      	ldr	r2, [pc, #248]	@ (8004848 <xTaskIncrementTick+0x150>)
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	4a3e      	ldr	r2, [pc, #248]	@ (800484c <xTaskIncrementTick+0x154>)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b3e      	ldr	r3, [pc, #248]	@ (8004850 <xTaskIncrementTick+0x158>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	4a3c      	ldr	r2, [pc, #240]	@ (8004850 <xTaskIncrementTick+0x158>)
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	f000 fae0 	bl	8004d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004764:	4b3b      	ldr	r3, [pc, #236]	@ (8004854 <xTaskIncrementTick+0x15c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	429a      	cmp	r2, r3
 800476c:	d349      	bcc.n	8004802 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800476e:	4b36      	ldr	r3, [pc, #216]	@ (8004848 <xTaskIncrementTick+0x150>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004778:	4b36      	ldr	r3, [pc, #216]	@ (8004854 <xTaskIncrementTick+0x15c>)
 800477a:	f04f 32ff 	mov.w	r2, #4294967295
 800477e:	601a      	str	r2, [r3, #0]
					break;
 8004780:	e03f      	b.n	8004802 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004782:	4b31      	ldr	r3, [pc, #196]	@ (8004848 <xTaskIncrementTick+0x150>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d203      	bcs.n	80047a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800479a:	4a2e      	ldr	r2, [pc, #184]	@ (8004854 <xTaskIncrementTick+0x15c>)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047a0:	e02f      	b.n	8004802 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe ff1c 	bl	80035e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	3318      	adds	r3, #24
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe ff13 	bl	80035e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c2:	4b25      	ldr	r3, [pc, #148]	@ (8004858 <xTaskIncrementTick+0x160>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d903      	bls.n	80047d2 <xTaskIncrementTick+0xda>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ce:	4a22      	ldr	r2, [pc, #136]	@ (8004858 <xTaskIncrementTick+0x160>)
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4a1f      	ldr	r2, [pc, #124]	@ (800485c <xTaskIncrementTick+0x164>)
 80047e0:	441a      	add	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f7fe fea0 	bl	800352e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004860 <xTaskIncrementTick+0x168>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d3b8      	bcc.n	800476e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004800:	e7b5      	b.n	800476e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004802:	4b17      	ldr	r3, [pc, #92]	@ (8004860 <xTaskIncrementTick+0x168>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004808:	4914      	ldr	r1, [pc, #80]	@ (800485c <xTaskIncrementTick+0x164>)
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d901      	bls.n	800481e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800481e:	4b11      	ldr	r3, [pc, #68]	@ (8004864 <xTaskIncrementTick+0x16c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004826:	2301      	movs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e004      	b.n	8004836 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800482c:	4b0e      	ldr	r3, [pc, #56]	@ (8004868 <xTaskIncrementTick+0x170>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	4a0d      	ldr	r2, [pc, #52]	@ (8004868 <xTaskIncrementTick+0x170>)
 8004834:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004836:	697b      	ldr	r3, [r7, #20]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000e90 	.word	0x20000e90
 8004844:	20000e6c 	.word	0x20000e6c
 8004848:	20000e20 	.word	0x20000e20
 800484c:	20000e24 	.word	0x20000e24
 8004850:	20000e80 	.word	0x20000e80
 8004854:	20000e88 	.word	0x20000e88
 8004858:	20000e70 	.word	0x20000e70
 800485c:	20000998 	.word	0x20000998
 8004860:	20000994 	.word	0x20000994
 8004864:	20000e7c 	.word	0x20000e7c
 8004868:	20000e78 	.word	0x20000e78

0800486c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004872:	4b2a      	ldr	r3, [pc, #168]	@ (800491c <vTaskSwitchContext+0xb0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800487a:	4b29      	ldr	r3, [pc, #164]	@ (8004920 <vTaskSwitchContext+0xb4>)
 800487c:	2201      	movs	r2, #1
 800487e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004880:	e047      	b.n	8004912 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004882:	4b27      	ldr	r3, [pc, #156]	@ (8004920 <vTaskSwitchContext+0xb4>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004888:	4b26      	ldr	r3, [pc, #152]	@ (8004924 <vTaskSwitchContext+0xb8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e011      	b.n	80048b4 <vTaskSwitchContext+0x48>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <vTaskSwitchContext+0x42>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	607b      	str	r3, [r7, #4]
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	e7fd      	b.n	80048aa <vTaskSwitchContext+0x3e>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	491c      	ldr	r1, [pc, #112]	@ (8004928 <vTaskSwitchContext+0xbc>)
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0e3      	beq.n	8004890 <vTaskSwitchContext+0x24>
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4a15      	ldr	r2, [pc, #84]	@ (8004928 <vTaskSwitchContext+0xbc>)
 80048d4:	4413      	add	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	3308      	adds	r3, #8
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d104      	bne.n	80048f8 <vTaskSwitchContext+0x8c>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	605a      	str	r2, [r3, #4]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4a0b      	ldr	r2, [pc, #44]	@ (800492c <vTaskSwitchContext+0xc0>)
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	4a08      	ldr	r2, [pc, #32]	@ (8004924 <vTaskSwitchContext+0xb8>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004908:	4b08      	ldr	r3, [pc, #32]	@ (800492c <vTaskSwitchContext+0xc0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3354      	adds	r3, #84	@ 0x54
 800490e:	4a08      	ldr	r2, [pc, #32]	@ (8004930 <vTaskSwitchContext+0xc4>)
 8004910:	6013      	str	r3, [r2, #0]
}
 8004912:	bf00      	nop
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	20000e90 	.word	0x20000e90
 8004920:	20000e7c 	.word	0x20000e7c
 8004924:	20000e70 	.word	0x20000e70
 8004928:	20000998 	.word	0x20000998
 800492c:	20000994 	.word	0x20000994
 8004930:	20000010 	.word	0x20000010

08004934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	60fb      	str	r3, [r7, #12]
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800495c:	4b07      	ldr	r3, [pc, #28]	@ (800497c <vTaskPlaceOnEventList+0x48>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3318      	adds	r3, #24
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fe fe05 	bl	8003574 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800496a:	2101      	movs	r1, #1
 800496c:	6838      	ldr	r0, [r7, #0]
 800496e:	f000 fa87 	bl	8004e80 <prvAddCurrentTaskToDelayedList>
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000994 	.word	0x20000994

08004980 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	617b      	str	r3, [r7, #20]
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	e7fd      	b.n	80049a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049aa:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3318      	adds	r3, #24
 80049b0:	4619      	mov	r1, r3
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7fe fdbb 	bl	800352e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	68b8      	ldr	r0, [r7, #8]
 80049c8:	f000 fa5a 	bl	8004e80 <prvAddCurrentTaskToDelayedList>
	}
 80049cc:	bf00      	nop
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000994 	.word	0x20000994

080049d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60fb      	str	r3, [r7, #12]
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	e7fd      	b.n	8004a02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	3318      	adds	r3, #24
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe fdea 	bl	80035e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a10:	4b1d      	ldr	r3, [pc, #116]	@ (8004a88 <xTaskRemoveFromEventList+0xb0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d11d      	bne.n	8004a54 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe fde1 	bl	80035e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a26:	4b19      	ldr	r3, [pc, #100]	@ (8004a8c <xTaskRemoveFromEventList+0xb4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d903      	bls.n	8004a36 <xTaskRemoveFromEventList+0x5e>
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	4a16      	ldr	r2, [pc, #88]	@ (8004a8c <xTaskRemoveFromEventList+0xb4>)
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4a13      	ldr	r2, [pc, #76]	@ (8004a90 <xTaskRemoveFromEventList+0xb8>)
 8004a44:	441a      	add	r2, r3
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f7fe fd6e 	bl	800352e <vListInsertEnd>
 8004a52:	e005      	b.n	8004a60 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	3318      	adds	r3, #24
 8004a58:	4619      	mov	r1, r3
 8004a5a:	480e      	ldr	r0, [pc, #56]	@ (8004a94 <xTaskRemoveFromEventList+0xbc>)
 8004a5c:	f7fe fd67 	bl	800352e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a64:	4b0c      	ldr	r3, [pc, #48]	@ (8004a98 <xTaskRemoveFromEventList+0xc0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d905      	bls.n	8004a7a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a72:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <xTaskRemoveFromEventList+0xc4>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e001      	b.n	8004a7e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a7e:	697b      	ldr	r3, [r7, #20]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000e90 	.word	0x20000e90
 8004a8c:	20000e70 	.word	0x20000e70
 8004a90:	20000998 	.word	0x20000998
 8004a94:	20000e28 	.word	0x20000e28
 8004a98:	20000994 	.word	0x20000994
 8004a9c:	20000e7c 	.word	0x20000e7c

08004aa0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004aa8:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <vTaskInternalSetTimeOutState+0x24>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ab0:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <vTaskInternalSetTimeOutState+0x28>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	605a      	str	r2, [r3, #4]
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000e80 	.word	0x20000e80
 8004ac8:	20000e6c 	.word	0x20000e6c

08004acc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	613b      	str	r3, [r7, #16]
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	e7fd      	b.n	8004af0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	60fb      	str	r3, [r7, #12]
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	e7fd      	b.n	8004b0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004b12:	f000 fe53 	bl	80057bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b16:	4b1d      	ldr	r3, [pc, #116]	@ (8004b8c <xTaskCheckForTimeOut+0xc0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d102      	bne.n	8004b36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e023      	b.n	8004b7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b15      	ldr	r3, [pc, #84]	@ (8004b90 <xTaskCheckForTimeOut+0xc4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d007      	beq.n	8004b52 <xTaskCheckForTimeOut+0x86>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d302      	bcc.n	8004b52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	e015      	b.n	8004b7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d20b      	bcs.n	8004b74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	1ad2      	subs	r2, r2, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ff99 	bl	8004aa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	e004      	b.n	8004b7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b7e:	f000 fe4d 	bl	800581c <vPortExitCritical>

	return xReturn;
 8004b82:	69fb      	ldr	r3, [r7, #28]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000e6c 	.word	0x20000e6c
 8004b90:	20000e80 	.word	0x20000e80

08004b94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b98:	4b03      	ldr	r3, [pc, #12]	@ (8004ba8 <vTaskMissedYield+0x14>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
}
 8004b9e:	bf00      	nop
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000e7c 	.word	0x20000e7c

08004bac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bb4:	f000 f852 	bl	8004c5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bb8:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <prvIdleTask+0x28>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d9f9      	bls.n	8004bb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bc0:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <prvIdleTask+0x2c>)
 8004bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bd0:	e7f0      	b.n	8004bb4 <prvIdleTask+0x8>
 8004bd2:	bf00      	nop
 8004bd4:	20000998 	.word	0x20000998
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004be2:	2300      	movs	r3, #0
 8004be4:	607b      	str	r3, [r7, #4]
 8004be6:	e00c      	b.n	8004c02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4a12      	ldr	r2, [pc, #72]	@ (8004c3c <prvInitialiseTaskLists+0x60>)
 8004bf4:	4413      	add	r3, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe fc6e 	bl	80034d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b37      	cmp	r3, #55	@ 0x37
 8004c06:	d9ef      	bls.n	8004be8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c08:	480d      	ldr	r0, [pc, #52]	@ (8004c40 <prvInitialiseTaskLists+0x64>)
 8004c0a:	f7fe fc65 	bl	80034d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c0e:	480d      	ldr	r0, [pc, #52]	@ (8004c44 <prvInitialiseTaskLists+0x68>)
 8004c10:	f7fe fc62 	bl	80034d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c14:	480c      	ldr	r0, [pc, #48]	@ (8004c48 <prvInitialiseTaskLists+0x6c>)
 8004c16:	f7fe fc5f 	bl	80034d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c1a:	480c      	ldr	r0, [pc, #48]	@ (8004c4c <prvInitialiseTaskLists+0x70>)
 8004c1c:	f7fe fc5c 	bl	80034d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c20:	480b      	ldr	r0, [pc, #44]	@ (8004c50 <prvInitialiseTaskLists+0x74>)
 8004c22:	f7fe fc59 	bl	80034d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c26:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <prvInitialiseTaskLists+0x78>)
 8004c28:	4a05      	ldr	r2, [pc, #20]	@ (8004c40 <prvInitialiseTaskLists+0x64>)
 8004c2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <prvInitialiseTaskLists+0x7c>)
 8004c2e:	4a05      	ldr	r2, [pc, #20]	@ (8004c44 <prvInitialiseTaskLists+0x68>)
 8004c30:	601a      	str	r2, [r3, #0]
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000998 	.word	0x20000998
 8004c40:	20000df8 	.word	0x20000df8
 8004c44:	20000e0c 	.word	0x20000e0c
 8004c48:	20000e28 	.word	0x20000e28
 8004c4c:	20000e3c 	.word	0x20000e3c
 8004c50:	20000e54 	.word	0x20000e54
 8004c54:	20000e20 	.word	0x20000e20
 8004c58:	20000e24 	.word	0x20000e24

08004c5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c62:	e019      	b.n	8004c98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c64:	f000 fdaa 	bl	80057bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c68:	4b10      	ldr	r3, [pc, #64]	@ (8004cac <prvCheckTasksWaitingTermination+0x50>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe fcb5 	bl	80035e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <prvCheckTasksWaitingTermination+0x54>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	4a0b      	ldr	r2, [pc, #44]	@ (8004cb0 <prvCheckTasksWaitingTermination+0x54>)
 8004c82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c84:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb4 <prvCheckTasksWaitingTermination+0x58>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <prvCheckTasksWaitingTermination+0x58>)
 8004c8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c8e:	f000 fdc5 	bl	800581c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f810 	bl	8004cb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c98:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <prvCheckTasksWaitingTermination+0x58>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e1      	bne.n	8004c64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000e3c 	.word	0x20000e3c
 8004cb0:	20000e68 	.word	0x20000e68
 8004cb4:	20000e50 	.word	0x20000e50

08004cb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3354      	adds	r3, #84	@ 0x54
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 f891 	bl	8005dec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d108      	bne.n	8004ce6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 ff3f 	bl	8005b5c <vPortFree>
				vPortFree( pxTCB );
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 ff3c 	bl	8005b5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ce4:	e019      	b.n	8004d1a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d103      	bne.n	8004cf8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 ff33 	bl	8005b5c <vPortFree>
	}
 8004cf6:	e010      	b.n	8004d1a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d00b      	beq.n	8004d1a <prvDeleteTCB+0x62>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60fb      	str	r3, [r7, #12]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <prvDeleteTCB+0x5e>
	}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <prvResetNextTaskUnblockTime+0x38>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d104      	bne.n	8004d3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d34:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <prvResetNextTaskUnblockTime+0x3c>)
 8004d36:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d3c:	e008      	b.n	8004d50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3e:	4b07      	ldr	r3, [pc, #28]	@ (8004d5c <prvResetNextTaskUnblockTime+0x38>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4a04      	ldr	r2, [pc, #16]	@ (8004d60 <prvResetNextTaskUnblockTime+0x3c>)
 8004d4e:	6013      	str	r3, [r2, #0]
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000e20 	.word	0x20000e20
 8004d60:	20000e88 	.word	0x20000e88

08004d64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <xTaskGetSchedulerState+0x34>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d72:	2301      	movs	r3, #1
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	e008      	b.n	8004d8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d78:	4b08      	ldr	r3, [pc, #32]	@ (8004d9c <xTaskGetSchedulerState+0x38>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d102      	bne.n	8004d86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d80:	2302      	movs	r3, #2
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	e001      	b.n	8004d8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d8a:	687b      	ldr	r3, [r7, #4]
	}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	20000e74 	.word	0x20000e74
 8004d9c:	20000e90 	.word	0x20000e90

08004da0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d058      	beq.n	8004e68 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004db6:	4b2f      	ldr	r3, [pc, #188]	@ (8004e74 <xTaskPriorityDisinherit+0xd4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d00b      	beq.n	8004dd8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	60fb      	str	r3, [r7, #12]
}
 8004dd2:	bf00      	nop
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60bb      	str	r3, [r7, #8]
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfc:	1e5a      	subs	r2, r3, #1
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d02c      	beq.n	8004e68 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d128      	bne.n	8004e68 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe fbe2 	bl	80035e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e38:	4b0f      	ldr	r3, [pc, #60]	@ (8004e78 <xTaskPriorityDisinherit+0xd8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d903      	bls.n	8004e48 <xTaskPriorityDisinherit+0xa8>
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	4a0c      	ldr	r2, [pc, #48]	@ (8004e78 <xTaskPriorityDisinherit+0xd8>)
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4a09      	ldr	r2, [pc, #36]	@ (8004e7c <xTaskPriorityDisinherit+0xdc>)
 8004e56:	441a      	add	r2, r3
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f7fe fb65 	bl	800352e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e68:	697b      	ldr	r3, [r7, #20]
	}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000994 	.word	0x20000994
 8004e78:	20000e70 	.word	0x20000e70
 8004e7c:	20000998 	.word	0x20000998

08004e80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e8a:	4b21      	ldr	r3, [pc, #132]	@ (8004f10 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e90:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3304      	adds	r3, #4
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fba4 	bl	80035e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	d10a      	bne.n	8004eba <prvAddCurrentTaskToDelayedList+0x3a>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8004f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4819      	ldr	r0, [pc, #100]	@ (8004f18 <prvAddCurrentTaskToDelayedList+0x98>)
 8004eb4:	f7fe fb3b 	bl	800352e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004eb8:	e026      	b.n	8004f08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ec2:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d209      	bcs.n	8004ee6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ed2:	4b12      	ldr	r3, [pc, #72]	@ (8004f1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7fe fb48 	bl	8003574 <vListInsert>
}
 8004ee4:	e010      	b.n	8004f08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b0a      	ldr	r3, [pc, #40]	@ (8004f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f7fe fb3e 	bl	8003574 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d202      	bcs.n	8004f08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f02:	4a08      	ldr	r2, [pc, #32]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	6013      	str	r3, [r2, #0]
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20000e6c 	.word	0x20000e6c
 8004f14:	20000994 	.word	0x20000994
 8004f18:	20000e54 	.word	0x20000e54
 8004f1c:	20000e24 	.word	0x20000e24
 8004f20:	20000e20 	.word	0x20000e20
 8004f24:	20000e88 	.word	0x20000e88

08004f28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	@ 0x28
 8004f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f32:	f000 fb11 	bl	8005558 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f36:	4b1d      	ldr	r3, [pc, #116]	@ (8004fac <xTimerCreateTimerTask+0x84>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d021      	beq.n	8004f82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f46:	1d3a      	adds	r2, r7, #4
 8004f48:	f107 0108 	add.w	r1, r7, #8
 8004f4c:	f107 030c 	add.w	r3, r7, #12
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe faa7 	bl	80034a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	9202      	str	r2, [sp, #8]
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	2302      	movs	r3, #2
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	2300      	movs	r3, #0
 8004f66:	460a      	mov	r2, r1
 8004f68:	4911      	ldr	r1, [pc, #68]	@ (8004fb0 <xTimerCreateTimerTask+0x88>)
 8004f6a:	4812      	ldr	r0, [pc, #72]	@ (8004fb4 <xTimerCreateTimerTask+0x8c>)
 8004f6c:	f7ff f85c 	bl	8004028 <xTaskCreateStatic>
 8004f70:	4603      	mov	r3, r0
 8004f72:	4a11      	ldr	r2, [pc, #68]	@ (8004fb8 <xTimerCreateTimerTask+0x90>)
 8004f74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f76:	4b10      	ldr	r3, [pc, #64]	@ (8004fb8 <xTimerCreateTimerTask+0x90>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10b      	bne.n	8004fa0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	613b      	str	r3, [r7, #16]
}
 8004f9a:	bf00      	nop
 8004f9c:	bf00      	nop
 8004f9e:	e7fd      	b.n	8004f9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004fa0:	697b      	ldr	r3, [r7, #20]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000ec4 	.word	0x20000ec4
 8004fb0:	080067f0 	.word	0x080067f0
 8004fb4:	080050f5 	.word	0x080050f5
 8004fb8:	20000ec8 	.word	0x20000ec8

08004fbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08a      	sub	sp, #40	@ 0x28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10b      	bne.n	8004fec <xTimerGenericCommand+0x30>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	623b      	str	r3, [r7, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	bf00      	nop
 8004fea:	e7fd      	b.n	8004fe8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fec:	4b19      	ldr	r3, [pc, #100]	@ (8005054 <xTimerGenericCommand+0x98>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02a      	beq.n	800504a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b05      	cmp	r3, #5
 8005004:	dc18      	bgt.n	8005038 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005006:	f7ff fead 	bl	8004d64 <xTaskGetSchedulerState>
 800500a:	4603      	mov	r3, r0
 800500c:	2b02      	cmp	r3, #2
 800500e:	d109      	bne.n	8005024 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005010:	4b10      	ldr	r3, [pc, #64]	@ (8005054 <xTimerGenericCommand+0x98>)
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	f107 0110 	add.w	r1, r7, #16
 8005018:	2300      	movs	r3, #0
 800501a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501c:	f7fe fc16 	bl	800384c <xQueueGenericSend>
 8005020:	6278      	str	r0, [r7, #36]	@ 0x24
 8005022:	e012      	b.n	800504a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005024:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <xTimerGenericCommand+0x98>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	f107 0110 	add.w	r1, r7, #16
 800502c:	2300      	movs	r3, #0
 800502e:	2200      	movs	r2, #0
 8005030:	f7fe fc0c 	bl	800384c <xQueueGenericSend>
 8005034:	6278      	str	r0, [r7, #36]	@ 0x24
 8005036:	e008      	b.n	800504a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005038:	4b06      	ldr	r3, [pc, #24]	@ (8005054 <xTimerGenericCommand+0x98>)
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	f107 0110 	add.w	r1, r7, #16
 8005040:	2300      	movs	r3, #0
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	f7fe fd04 	bl	8003a50 <xQueueGenericSendFromISR>
 8005048:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800504c:	4618      	mov	r0, r3
 800504e:	3728      	adds	r7, #40	@ 0x28
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000ec4 	.word	0x20000ec4

08005058 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005062:	4b23      	ldr	r3, [pc, #140]	@ (80050f0 <prvProcessExpiredTimer+0x98>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	3304      	adds	r3, #4
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe fab7 	bl	80035e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d023      	beq.n	80050cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	699a      	ldr	r2, [r3, #24]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	18d1      	adds	r1, r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	6978      	ldr	r0, [r7, #20]
 8005092:	f000 f8d3 	bl	800523c <prvInsertTimerInActiveList>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800509c:	2300      	movs	r3, #0
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	2300      	movs	r3, #0
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	2100      	movs	r1, #0
 80050a6:	6978      	ldr	r0, [r7, #20]
 80050a8:	f7ff ff88 	bl	8004fbc <xTimerGenericCommand>
 80050ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d114      	bne.n	80050de <prvProcessExpiredTimer+0x86>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	60fb      	str	r3, [r7, #12]
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	6978      	ldr	r0, [r7, #20]
 80050e4:	4798      	blx	r3
}
 80050e6:	bf00      	nop
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000ebc 	.word	0x20000ebc

080050f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050fc:	f107 0308 	add.w	r3, r7, #8
 8005100:	4618      	mov	r0, r3
 8005102:	f000 f859 	bl	80051b8 <prvGetNextExpireTime>
 8005106:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4619      	mov	r1, r3
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f805 	bl	800511c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005112:	f000 f8d5 	bl	80052c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005116:	bf00      	nop
 8005118:	e7f0      	b.n	80050fc <prvTimerTask+0x8>
	...

0800511c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005126:	f7ff fa2d 	bl	8004584 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800512a:	f107 0308 	add.w	r3, r7, #8
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f864 	bl	80051fc <prvSampleTimeNow>
 8005134:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d130      	bne.n	800519e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <prvProcessTimerOrBlockTask+0x3c>
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	429a      	cmp	r2, r3
 8005148:	d806      	bhi.n	8005158 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800514a:	f7ff fa29 	bl	80045a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800514e:	68f9      	ldr	r1, [r7, #12]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ff81 	bl	8005058 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005156:	e024      	b.n	80051a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800515e:	4b13      	ldr	r3, [pc, #76]	@ (80051ac <prvProcessTimerOrBlockTask+0x90>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <prvProcessTimerOrBlockTask+0x50>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <prvProcessTimerOrBlockTask+0x52>
 800516c:	2300      	movs	r3, #0
 800516e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005170:	4b0f      	ldr	r3, [pc, #60]	@ (80051b0 <prvProcessTimerOrBlockTask+0x94>)
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	4619      	mov	r1, r3
 800517e:	f7fe ff1f 	bl	8003fc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005182:	f7ff fa0d 	bl	80045a0 <xTaskResumeAll>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800518c:	4b09      	ldr	r3, [pc, #36]	@ (80051b4 <prvProcessTimerOrBlockTask+0x98>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	f3bf 8f6f 	isb	sy
}
 800519c:	e001      	b.n	80051a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800519e:	f7ff f9ff 	bl	80045a0 <xTaskResumeAll>
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000ec0 	.word	0x20000ec0
 80051b0:	20000ec4 	.word	0x20000ec4
 80051b4:	e000ed04 	.word	0xe000ed04

080051b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051c0:	4b0d      	ldr	r3, [pc, #52]	@ (80051f8 <prvGetNextExpireTime+0x40>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <prvGetNextExpireTime+0x16>
 80051ca:	2201      	movs	r2, #1
 80051cc:	e000      	b.n	80051d0 <prvGetNextExpireTime+0x18>
 80051ce:	2200      	movs	r2, #0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051dc:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <prvGetNextExpireTime+0x40>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e001      	b.n	80051ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051ec:	68fb      	ldr	r3, [r7, #12]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr
 80051f8:	20000ebc 	.word	0x20000ebc

080051fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005204:	f7ff fa6a 	bl	80046dc <xTaskGetTickCount>
 8005208:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800520a:	4b0b      	ldr	r3, [pc, #44]	@ (8005238 <prvSampleTimeNow+0x3c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	429a      	cmp	r2, r3
 8005212:	d205      	bcs.n	8005220 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005214:	f000 f93a 	bl	800548c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e002      	b.n	8005226 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005226:	4a04      	ldr	r2, [pc, #16]	@ (8005238 <prvSampleTimeNow+0x3c>)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800522c:	68fb      	ldr	r3, [r7, #12]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000ecc 	.word	0x20000ecc

0800523c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	429a      	cmp	r2, r3
 8005260:	d812      	bhi.n	8005288 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	429a      	cmp	r2, r3
 800526e:	d302      	bcc.n	8005276 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005270:	2301      	movs	r3, #1
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e01b      	b.n	80052ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005276:	4b10      	ldr	r3, [pc, #64]	@ (80052b8 <prvInsertTimerInActiveList+0x7c>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3304      	adds	r3, #4
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f7fe f977 	bl	8003574 <vListInsert>
 8005286:	e012      	b.n	80052ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d206      	bcs.n	800529e <prvInsertTimerInActiveList+0x62>
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d302      	bcc.n	800529e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005298:	2301      	movs	r3, #1
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	e007      	b.n	80052ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800529e:	4b07      	ldr	r3, [pc, #28]	@ (80052bc <prvInsertTimerInActiveList+0x80>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3304      	adds	r3, #4
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f7fe f963 	bl	8003574 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80052ae:	697b      	ldr	r3, [r7, #20]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000ec0 	.word	0x20000ec0
 80052bc:	20000ebc 	.word	0x20000ebc

080052c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08e      	sub	sp, #56	@ 0x38
 80052c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052c6:	e0ce      	b.n	8005466 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	da19      	bge.n	8005302 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	3304      	adds	r3, #4
 80052d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10b      	bne.n	80052f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	61fb      	str	r3, [r7, #28]
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	e7fd      	b.n	80052ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f8:	6850      	ldr	r0, [r2, #4]
 80052fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052fc:	6892      	ldr	r2, [r2, #8]
 80052fe:	4611      	mov	r1, r2
 8005300:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f2c0 80ae 	blt.w	8005466 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005318:	3304      	adds	r3, #4
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe f962 	bl	80035e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005320:	463b      	mov	r3, r7
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff ff6a 	bl	80051fc <prvSampleTimeNow>
 8005328:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b09      	cmp	r3, #9
 800532e:	f200 8097 	bhi.w	8005460 <prvProcessReceivedCommands+0x1a0>
 8005332:	a201      	add	r2, pc, #4	@ (adr r2, 8005338 <prvProcessReceivedCommands+0x78>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	08005361 	.word	0x08005361
 800533c:	08005361 	.word	0x08005361
 8005340:	08005361 	.word	0x08005361
 8005344:	080053d7 	.word	0x080053d7
 8005348:	080053eb 	.word	0x080053eb
 800534c:	08005437 	.word	0x08005437
 8005350:	08005361 	.word	0x08005361
 8005354:	08005361 	.word	0x08005361
 8005358:	080053d7 	.word	0x080053d7
 800535c:	080053eb 	.word	0x080053eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	b2da      	uxtb	r2, r3
 800536c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	18d1      	adds	r1, r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800537e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005380:	f7ff ff5c 	bl	800523c <prvInsertTimerInActiveList>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d06c      	beq.n	8005464 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005390:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d061      	beq.n	8005464 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	441a      	add	r2, r3
 80053a8:	2300      	movs	r3, #0
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	2300      	movs	r3, #0
 80053ae:	2100      	movs	r1, #0
 80053b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053b2:	f7ff fe03 	bl	8004fbc <xTimerGenericCommand>
 80053b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d152      	bne.n	8005464 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	61bb      	str	r3, [r7, #24]
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	e7fd      	b.n	80053d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80053e8:	e03d      	b.n	8005466 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005400:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	617b      	str	r3, [r7, #20]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	18d1      	adds	r1, r2, r3
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800542e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005430:	f7ff ff04 	bl	800523c <prvInsertTimerInActiveList>
					break;
 8005434:	e017      	b.n	8005466 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d103      	bne.n	800544c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005446:	f000 fb89 	bl	8005b5c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800544a:	e00c      	b.n	8005466 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005452:	f023 0301 	bic.w	r3, r3, #1
 8005456:	b2da      	uxtb	r2, r3
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800545e:	e002      	b.n	8005466 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005460:	bf00      	nop
 8005462:	e000      	b.n	8005466 <prvProcessReceivedCommands+0x1a6>
					break;
 8005464:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005466:	4b08      	ldr	r3, [pc, #32]	@ (8005488 <prvProcessReceivedCommands+0x1c8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	1d39      	adds	r1, r7, #4
 800546c:	2200      	movs	r2, #0
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fb8c 	bl	8003b8c <xQueueReceive>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	f47f af26 	bne.w	80052c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	3730      	adds	r7, #48	@ 0x30
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000ec4 	.word	0x20000ec4

0800548c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005492:	e049      	b.n	8005528 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005494:	4b2e      	ldr	r3, [pc, #184]	@ (8005550 <prvSwitchTimerLists+0xc4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549e:	4b2c      	ldr	r3, [pc, #176]	@ (8005550 <prvSwitchTimerLists+0xc4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fe f899 	bl	80035e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d02f      	beq.n	8005528 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d90e      	bls.n	80054f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005550 <prvSwitchTimerLists+0xc4>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f7fe f83f 	bl	8003574 <vListInsert>
 80054f6:	e017      	b.n	8005528 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054f8:	2300      	movs	r3, #0
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	2300      	movs	r3, #0
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	2100      	movs	r1, #0
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff fd5a 	bl	8004fbc <xTimerGenericCommand>
 8005508:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10b      	bne.n	8005528 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	603b      	str	r3, [r7, #0]
}
 8005522:	bf00      	nop
 8005524:	bf00      	nop
 8005526:	e7fd      	b.n	8005524 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005528:	4b09      	ldr	r3, [pc, #36]	@ (8005550 <prvSwitchTimerLists+0xc4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1b0      	bne.n	8005494 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005532:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <prvSwitchTimerLists+0xc4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005538:	4b06      	ldr	r3, [pc, #24]	@ (8005554 <prvSwitchTimerLists+0xc8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a04      	ldr	r2, [pc, #16]	@ (8005550 <prvSwitchTimerLists+0xc4>)
 800553e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005540:	4a04      	ldr	r2, [pc, #16]	@ (8005554 <prvSwitchTimerLists+0xc8>)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	6013      	str	r3, [r2, #0]
}
 8005546:	bf00      	nop
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000ebc 	.word	0x20000ebc
 8005554:	20000ec0 	.word	0x20000ec0

08005558 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800555e:	f000 f92d 	bl	80057bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005562:	4b15      	ldr	r3, [pc, #84]	@ (80055b8 <prvCheckForValidListAndQueue+0x60>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d120      	bne.n	80055ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800556a:	4814      	ldr	r0, [pc, #80]	@ (80055bc <prvCheckForValidListAndQueue+0x64>)
 800556c:	f7fd ffb4 	bl	80034d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005570:	4813      	ldr	r0, [pc, #76]	@ (80055c0 <prvCheckForValidListAndQueue+0x68>)
 8005572:	f7fd ffb1 	bl	80034d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005576:	4b13      	ldr	r3, [pc, #76]	@ (80055c4 <prvCheckForValidListAndQueue+0x6c>)
 8005578:	4a10      	ldr	r2, [pc, #64]	@ (80055bc <prvCheckForValidListAndQueue+0x64>)
 800557a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800557c:	4b12      	ldr	r3, [pc, #72]	@ (80055c8 <prvCheckForValidListAndQueue+0x70>)
 800557e:	4a10      	ldr	r2, [pc, #64]	@ (80055c0 <prvCheckForValidListAndQueue+0x68>)
 8005580:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005582:	2300      	movs	r3, #0
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	4b11      	ldr	r3, [pc, #68]	@ (80055cc <prvCheckForValidListAndQueue+0x74>)
 8005588:	4a11      	ldr	r2, [pc, #68]	@ (80055d0 <prvCheckForValidListAndQueue+0x78>)
 800558a:	2110      	movs	r1, #16
 800558c:	200a      	movs	r0, #10
 800558e:	f7fe f8bd 	bl	800370c <xQueueGenericCreateStatic>
 8005592:	4603      	mov	r3, r0
 8005594:	4a08      	ldr	r2, [pc, #32]	@ (80055b8 <prvCheckForValidListAndQueue+0x60>)
 8005596:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005598:	4b07      	ldr	r3, [pc, #28]	@ (80055b8 <prvCheckForValidListAndQueue+0x60>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80055a0:	4b05      	ldr	r3, [pc, #20]	@ (80055b8 <prvCheckForValidListAndQueue+0x60>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	490b      	ldr	r1, [pc, #44]	@ (80055d4 <prvCheckForValidListAndQueue+0x7c>)
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe fce2 	bl	8003f70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055ac:	f000 f936 	bl	800581c <vPortExitCritical>
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000ec4 	.word	0x20000ec4
 80055bc:	20000e94 	.word	0x20000e94
 80055c0:	20000ea8 	.word	0x20000ea8
 80055c4:	20000ebc 	.word	0x20000ebc
 80055c8:	20000ec0 	.word	0x20000ec0
 80055cc:	20000f70 	.word	0x20000f70
 80055d0:	20000ed0 	.word	0x20000ed0
 80055d4:	080067f8 	.word	0x080067f8

080055d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3b04      	subs	r3, #4
 80055e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80055f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3b04      	subs	r3, #4
 80055f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f023 0201 	bic.w	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3b04      	subs	r3, #4
 8005606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005608:	4a08      	ldr	r2, [pc, #32]	@ (800562c <pxPortInitialiseStack+0x54>)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3b14      	subs	r3, #20
 8005612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3b20      	subs	r3, #32
 800561e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005620:	68fb      	ldr	r3, [r7, #12]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr
 800562c:	08005631 	.word	0x08005631

08005630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005636:	2300      	movs	r3, #0
 8005638:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800563a:	4b12      	ldr	r3, [pc, #72]	@ (8005684 <prvTaskExitError+0x54>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d00b      	beq.n	800565c <prvTaskExitError+0x2c>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	60fb      	str	r3, [r7, #12]
}
 8005656:	bf00      	nop
 8005658:	bf00      	nop
 800565a:	e7fd      	b.n	8005658 <prvTaskExitError+0x28>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	60bb      	str	r3, [r7, #8]
}
 800566e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005670:	bf00      	nop
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0fc      	beq.n	8005672 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	2000000c 	.word	0x2000000c
	...

08005690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005690:	4b07      	ldr	r3, [pc, #28]	@ (80056b0 <pxCurrentTCBConst2>)
 8005692:	6819      	ldr	r1, [r3, #0]
 8005694:	6808      	ldr	r0, [r1, #0]
 8005696:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800569a:	f380 8809 	msr	PSP, r0
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8811 	msr	BASEPRI, r0
 80056aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80056ae:	4770      	bx	lr

080056b0 <pxCurrentTCBConst2>:
 80056b0:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop

080056b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80056b8:	4806      	ldr	r0, [pc, #24]	@ (80056d4 <prvPortStartFirstTask+0x1c>)
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	6800      	ldr	r0, [r0, #0]
 80056be:	f380 8808 	msr	MSP, r0
 80056c2:	b662      	cpsie	i
 80056c4:	b661      	cpsie	f
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	df00      	svc	0
 80056d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056d2:	bf00      	nop
 80056d4:	e000ed08 	.word	0xe000ed08

080056d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056de:	4b32      	ldr	r3, [pc, #200]	@ (80057a8 <xPortStartScheduler+0xd0>)
 80056e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	22ff      	movs	r2, #255	@ 0xff
 80056ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005700:	b2da      	uxtb	r2, r3
 8005702:	4b2a      	ldr	r3, [pc, #168]	@ (80057ac <xPortStartScheduler+0xd4>)
 8005704:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005706:	4b2a      	ldr	r3, [pc, #168]	@ (80057b0 <xPortStartScheduler+0xd8>)
 8005708:	2207      	movs	r2, #7
 800570a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800570c:	e009      	b.n	8005722 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800570e:	4b28      	ldr	r3, [pc, #160]	@ (80057b0 <xPortStartScheduler+0xd8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3b01      	subs	r3, #1
 8005714:	4a26      	ldr	r2, [pc, #152]	@ (80057b0 <xPortStartScheduler+0xd8>)
 8005716:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	b2db      	uxtb	r3, r3
 8005720:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572a:	2b80      	cmp	r3, #128	@ 0x80
 800572c:	d0ef      	beq.n	800570e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800572e:	4b20      	ldr	r3, [pc, #128]	@ (80057b0 <xPortStartScheduler+0xd8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f1c3 0307 	rsb	r3, r3, #7
 8005736:	2b04      	cmp	r3, #4
 8005738:	d00b      	beq.n	8005752 <xPortStartScheduler+0x7a>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	60bb      	str	r3, [r7, #8]
}
 800574c:	bf00      	nop
 800574e:	bf00      	nop
 8005750:	e7fd      	b.n	800574e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005752:	4b17      	ldr	r3, [pc, #92]	@ (80057b0 <xPortStartScheduler+0xd8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	4a15      	ldr	r2, [pc, #84]	@ (80057b0 <xPortStartScheduler+0xd8>)
 800575a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800575c:	4b14      	ldr	r3, [pc, #80]	@ (80057b0 <xPortStartScheduler+0xd8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005764:	4a12      	ldr	r2, [pc, #72]	@ (80057b0 <xPortStartScheduler+0xd8>)
 8005766:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	b2da      	uxtb	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005770:	4b10      	ldr	r3, [pc, #64]	@ (80057b4 <xPortStartScheduler+0xdc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a0f      	ldr	r2, [pc, #60]	@ (80057b4 <xPortStartScheduler+0xdc>)
 8005776:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800577a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800577c:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <xPortStartScheduler+0xdc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a0c      	ldr	r2, [pc, #48]	@ (80057b4 <xPortStartScheduler+0xdc>)
 8005782:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005786:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005788:	f000 f8b8 	bl	80058fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800578c:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <xPortStartScheduler+0xe0>)
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005792:	f7ff ff91 	bl	80056b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005796:	f7ff f869 	bl	800486c <vTaskSwitchContext>
	prvTaskExitError();
 800579a:	f7ff ff49 	bl	8005630 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	e000e400 	.word	0xe000e400
 80057ac:	20000fc0 	.word	0x20000fc0
 80057b0:	20000fc4 	.word	0x20000fc4
 80057b4:	e000ed20 	.word	0xe000ed20
 80057b8:	2000000c 	.word	0x2000000c

080057bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	607b      	str	r3, [r7, #4]
}
 80057d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005814 <vPortEnterCritical+0x58>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3301      	adds	r3, #1
 80057dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005814 <vPortEnterCritical+0x58>)
 80057de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <vPortEnterCritical+0x58>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d110      	bne.n	800580a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005818 <vPortEnterCritical+0x5c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <vPortEnterCritical+0x4e>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	603b      	str	r3, [r7, #0]
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	e7fd      	b.n	8005806 <vPortEnterCritical+0x4a>
	}
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	2000000c 	.word	0x2000000c
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005822:	4b12      	ldr	r3, [pc, #72]	@ (800586c <vPortExitCritical+0x50>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10b      	bne.n	8005842 <vPortExitCritical+0x26>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	607b      	str	r3, [r7, #4]
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	e7fd      	b.n	800583e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005842:	4b0a      	ldr	r3, [pc, #40]	@ (800586c <vPortExitCritical+0x50>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3b01      	subs	r3, #1
 8005848:	4a08      	ldr	r2, [pc, #32]	@ (800586c <vPortExitCritical+0x50>)
 800584a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800584c:	4b07      	ldr	r3, [pc, #28]	@ (800586c <vPortExitCritical+0x50>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <vPortExitCritical+0x44>
 8005854:	2300      	movs	r3, #0
 8005856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f383 8811 	msr	BASEPRI, r3
}
 800585e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	bc80      	pop	{r7}
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	2000000c 	.word	0x2000000c

08005870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005870:	f3ef 8009 	mrs	r0, PSP
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	4b0d      	ldr	r3, [pc, #52]	@ (80058b0 <pxCurrentTCBConst>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005880:	6010      	str	r0, [r2, #0]
 8005882:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005886:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800588a:	f380 8811 	msr	BASEPRI, r0
 800588e:	f7fe ffed 	bl	800486c <vTaskSwitchContext>
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8811 	msr	BASEPRI, r0
 800589a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	6808      	ldr	r0, [r1, #0]
 80058a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80058a6:	f380 8809 	msr	PSP, r0
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	4770      	bx	lr

080058b0 <pxCurrentTCBConst>:
 80058b0:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	607b      	str	r3, [r7, #4]
}
 80058d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058d2:	f7fe ff11 	bl	80046f8 <xTaskIncrementTick>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058dc:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <xPortSysTickHandler+0x40>)
 80058de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	2300      	movs	r3, #0
 80058e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	f383 8811 	msr	BASEPRI, r3
}
 80058ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005900:	4b0a      	ldr	r3, [pc, #40]	@ (800592c <vPortSetupTimerInterrupt+0x30>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005906:	4b0a      	ldr	r3, [pc, #40]	@ (8005930 <vPortSetupTimerInterrupt+0x34>)
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800590c:	4b09      	ldr	r3, [pc, #36]	@ (8005934 <vPortSetupTimerInterrupt+0x38>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a09      	ldr	r2, [pc, #36]	@ (8005938 <vPortSetupTimerInterrupt+0x3c>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	099b      	lsrs	r3, r3, #6
 8005918:	4a08      	ldr	r2, [pc, #32]	@ (800593c <vPortSetupTimerInterrupt+0x40>)
 800591a:	3b01      	subs	r3, #1
 800591c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800591e:	4b03      	ldr	r3, [pc, #12]	@ (800592c <vPortSetupTimerInterrupt+0x30>)
 8005920:	2207      	movs	r2, #7
 8005922:	601a      	str	r2, [r3, #0]
}
 8005924:	bf00      	nop
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	e000e010 	.word	0xe000e010
 8005930:	e000e018 	.word	0xe000e018
 8005934:	20000000 	.word	0x20000000
 8005938:	10624dd3 	.word	0x10624dd3
 800593c:	e000e014 	.word	0xe000e014

08005940 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005946:	f3ef 8305 	mrs	r3, IPSR
 800594a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b0f      	cmp	r3, #15
 8005950:	d915      	bls.n	800597e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005952:	4a17      	ldr	r2, [pc, #92]	@ (80059b0 <vPortValidateInterruptPriority+0x70>)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800595c:	4b15      	ldr	r3, [pc, #84]	@ (80059b4 <vPortValidateInterruptPriority+0x74>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	7afa      	ldrb	r2, [r7, #11]
 8005962:	429a      	cmp	r2, r3
 8005964:	d20b      	bcs.n	800597e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	607b      	str	r3, [r7, #4]
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	e7fd      	b.n	800597a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800597e:	4b0e      	ldr	r3, [pc, #56]	@ (80059b8 <vPortValidateInterruptPriority+0x78>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005986:	4b0d      	ldr	r3, [pc, #52]	@ (80059bc <vPortValidateInterruptPriority+0x7c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d90b      	bls.n	80059a6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	603b      	str	r3, [r7, #0]
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	e7fd      	b.n	80059a2 <vPortValidateInterruptPriority+0x62>
	}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr
 80059b0:	e000e3f0 	.word	0xe000e3f0
 80059b4:	20000fc0 	.word	0x20000fc0
 80059b8:	e000ed0c 	.word	0xe000ed0c
 80059bc:	20000fc4 	.word	0x20000fc4

080059c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08a      	sub	sp, #40	@ 0x28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059cc:	f7fe fdda 	bl	8004584 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059d0:	4b5c      	ldr	r3, [pc, #368]	@ (8005b44 <pvPortMalloc+0x184>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059d8:	f000 f924 	bl	8005c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059dc:	4b5a      	ldr	r3, [pc, #360]	@ (8005b48 <pvPortMalloc+0x188>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f040 8095 	bne.w	8005b14 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01e      	beq.n	8005a2e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80059f0:	2208      	movs	r2, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4413      	add	r3, r2
 80059f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d015      	beq.n	8005a2e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f023 0307 	bic.w	r3, r3, #7
 8005a08:	3308      	adds	r3, #8
 8005a0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00b      	beq.n	8005a2e <pvPortMalloc+0x6e>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	617b      	str	r3, [r7, #20]
}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	e7fd      	b.n	8005a2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d06f      	beq.n	8005b14 <pvPortMalloc+0x154>
 8005a34:	4b45      	ldr	r3, [pc, #276]	@ (8005b4c <pvPortMalloc+0x18c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d86a      	bhi.n	8005b14 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a3e:	4b44      	ldr	r3, [pc, #272]	@ (8005b50 <pvPortMalloc+0x190>)
 8005a40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a42:	4b43      	ldr	r3, [pc, #268]	@ (8005b50 <pvPortMalloc+0x190>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a48:	e004      	b.n	8005a54 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d903      	bls.n	8005a66 <pvPortMalloc+0xa6>
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f1      	bne.n	8005a4a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a66:	4b37      	ldr	r3, [pc, #220]	@ (8005b44 <pvPortMalloc+0x184>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d051      	beq.n	8005b14 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2208      	movs	r2, #8
 8005a76:	4413      	add	r3, r2
 8005a78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	1ad2      	subs	r2, r2, r3
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d920      	bls.n	8005ad4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4413      	add	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00b      	beq.n	8005abc <pvPortMalloc+0xfc>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	613b      	str	r3, [r7, #16]
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	1ad2      	subs	r2, r2, r3
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ace:	69b8      	ldr	r0, [r7, #24]
 8005ad0:	f000 f90a 	bl	8005ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b4c <pvPortMalloc+0x18c>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	4a1b      	ldr	r2, [pc, #108]	@ (8005b4c <pvPortMalloc+0x18c>)
 8005ae0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b4c <pvPortMalloc+0x18c>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8005b54 <pvPortMalloc+0x194>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d203      	bcs.n	8005af6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005aee:	4b17      	ldr	r3, [pc, #92]	@ (8005b4c <pvPortMalloc+0x18c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a18      	ldr	r2, [pc, #96]	@ (8005b54 <pvPortMalloc+0x194>)
 8005af4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	4b13      	ldr	r3, [pc, #76]	@ (8005b48 <pvPortMalloc+0x188>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b0a:	4b13      	ldr	r3, [pc, #76]	@ (8005b58 <pvPortMalloc+0x198>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	4a11      	ldr	r2, [pc, #68]	@ (8005b58 <pvPortMalloc+0x198>)
 8005b12:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b14:	f7fe fd44 	bl	80045a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <pvPortMalloc+0x17a>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	60fb      	str	r3, [r7, #12]
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	e7fd      	b.n	8005b36 <pvPortMalloc+0x176>
	return pvReturn;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3728      	adds	r7, #40	@ 0x28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20001bd0 	.word	0x20001bd0
 8005b48:	20001be4 	.word	0x20001be4
 8005b4c:	20001bd4 	.word	0x20001bd4
 8005b50:	20001bc8 	.word	0x20001bc8
 8005b54:	20001bd8 	.word	0x20001bd8
 8005b58:	20001bdc 	.word	0x20001bdc

08005b5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d04f      	beq.n	8005c0e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b6e:	2308      	movs	r3, #8
 8005b70:	425b      	negs	r3, r3
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4413      	add	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	4b25      	ldr	r3, [pc, #148]	@ (8005c18 <vPortFree+0xbc>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <vPortFree+0x46>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	60fb      	str	r3, [r7, #12]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00b      	beq.n	8005bc2 <vPortFree+0x66>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	60bb      	str	r3, [r7, #8]
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	e7fd      	b.n	8005bbe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4b14      	ldr	r3, [pc, #80]	@ (8005c18 <vPortFree+0xbc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01e      	beq.n	8005c0e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d11a      	bne.n	8005c0e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8005c18 <vPortFree+0xbc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	43db      	mvns	r3, r3
 8005be2:	401a      	ands	r2, r3
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005be8:	f7fe fccc 	bl	8004584 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <vPortFree+0xc0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	4a09      	ldr	r2, [pc, #36]	@ (8005c1c <vPortFree+0xc0>)
 8005bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bfa:	6938      	ldr	r0, [r7, #16]
 8005bfc:	f000 f874 	bl	8005ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c00:	4b07      	ldr	r3, [pc, #28]	@ (8005c20 <vPortFree+0xc4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	4a06      	ldr	r2, [pc, #24]	@ (8005c20 <vPortFree+0xc4>)
 8005c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c0a:	f7fe fcc9 	bl	80045a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c0e:	bf00      	nop
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20001be4 	.word	0x20001be4
 8005c1c:	20001bd4 	.word	0x20001bd4
 8005c20:	20001be0 	.word	0x20001be0

08005c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c30:	4b27      	ldr	r3, [pc, #156]	@ (8005cd0 <prvHeapInit+0xac>)
 8005c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3307      	adds	r3, #7
 8005c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	4a1f      	ldr	r2, [pc, #124]	@ (8005cd0 <prvHeapInit+0xac>)
 8005c54:	4413      	add	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd4 <prvHeapInit+0xb0>)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c62:	4b1c      	ldr	r3, [pc, #112]	@ (8005cd4 <prvHeapInit+0xb0>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c70:	2208      	movs	r2, #8
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a15      	ldr	r2, [pc, #84]	@ (8005cd8 <prvHeapInit+0xb4>)
 8005c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c86:	4b14      	ldr	r3, [pc, #80]	@ (8005cd8 <prvHeapInit+0xb4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c8e:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <prvHeapInit+0xb4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd8 <prvHeapInit+0xb4>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8005cdc <prvHeapInit+0xb8>)
 8005cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	4a09      	ldr	r2, [pc, #36]	@ (8005ce0 <prvHeapInit+0xbc>)
 8005cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cbc:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <prvHeapInit+0xc0>)
 8005cbe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005cc2:	601a      	str	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20000fc8 	.word	0x20000fc8
 8005cd4:	20001bc8 	.word	0x20001bc8
 8005cd8:	20001bd0 	.word	0x20001bd0
 8005cdc:	20001bd8 	.word	0x20001bd8
 8005ce0:	20001bd4 	.word	0x20001bd4
 8005ce4:	20001be4 	.word	0x20001be4

08005ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cf0:	4b27      	ldr	r3, [pc, #156]	@ (8005d90 <prvInsertBlockIntoFreeList+0xa8>)
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e002      	b.n	8005cfc <prvInsertBlockIntoFreeList+0x14>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d8f7      	bhi.n	8005cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	4413      	add	r3, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d108      	bne.n	8005d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	441a      	add	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	441a      	add	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d118      	bne.n	8005d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b14      	ldr	r3, [pc, #80]	@ (8005d94 <prvInsertBlockIntoFreeList+0xac>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d00d      	beq.n	8005d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e008      	b.n	8005d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d66:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <prvInsertBlockIntoFreeList+0xac>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e003      	b.n	8005d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d002      	beq.n	8005d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr
 8005d90:	20001bc8 	.word	0x20001bc8
 8005d94:	20001bd0 	.word	0x20001bd0

08005d98 <siprintf>:
 8005d98:	b40e      	push	{r1, r2, r3}
 8005d9a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	2400      	movs	r4, #0
 8005da2:	b09d      	sub	sp, #116	@ 0x74
 8005da4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005da6:	9002      	str	r0, [sp, #8]
 8005da8:	9006      	str	r0, [sp, #24]
 8005daa:	9107      	str	r1, [sp, #28]
 8005dac:	9104      	str	r1, [sp, #16]
 8005dae:	4809      	ldr	r0, [pc, #36]	@ (8005dd4 <siprintf+0x3c>)
 8005db0:	4909      	ldr	r1, [pc, #36]	@ (8005dd8 <siprintf+0x40>)
 8005db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db6:	9105      	str	r1, [sp, #20]
 8005db8:	6800      	ldr	r0, [r0, #0]
 8005dba:	a902      	add	r1, sp, #8
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005dc0:	f000 f9fe 	bl	80061c0 <_svfiprintf_r>
 8005dc4:	9b02      	ldr	r3, [sp, #8]
 8005dc6:	701c      	strb	r4, [r3, #0]
 8005dc8:	b01d      	add	sp, #116	@ 0x74
 8005dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dce:	b003      	add	sp, #12
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000010 	.word	0x20000010
 8005dd8:	ffff0208 	.word	0xffff0208

08005ddc <memset>:
 8005ddc:	4603      	mov	r3, r0
 8005dde:	4402      	add	r2, r0
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d100      	bne.n	8005de6 <memset+0xa>
 8005de4:	4770      	bx	lr
 8005de6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dea:	e7f9      	b.n	8005de0 <memset+0x4>

08005dec <_reclaim_reent>:
 8005dec:	4b2d      	ldr	r3, [pc, #180]	@ (8005ea4 <_reclaim_reent+0xb8>)
 8005dee:	b570      	push	{r4, r5, r6, lr}
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4604      	mov	r4, r0
 8005df4:	4283      	cmp	r3, r0
 8005df6:	d053      	beq.n	8005ea0 <_reclaim_reent+0xb4>
 8005df8:	69c3      	ldr	r3, [r0, #28]
 8005dfa:	b31b      	cbz	r3, 8005e44 <_reclaim_reent+0x58>
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	b163      	cbz	r3, 8005e1a <_reclaim_reent+0x2e>
 8005e00:	2500      	movs	r5, #0
 8005e02:	69e3      	ldr	r3, [r4, #28]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	5959      	ldr	r1, [r3, r5]
 8005e08:	b9b1      	cbnz	r1, 8005e38 <_reclaim_reent+0x4c>
 8005e0a:	3504      	adds	r5, #4
 8005e0c:	2d80      	cmp	r5, #128	@ 0x80
 8005e0e:	d1f8      	bne.n	8005e02 <_reclaim_reent+0x16>
 8005e10:	69e3      	ldr	r3, [r4, #28]
 8005e12:	4620      	mov	r0, r4
 8005e14:	68d9      	ldr	r1, [r3, #12]
 8005e16:	f000 f881 	bl	8005f1c <_free_r>
 8005e1a:	69e3      	ldr	r3, [r4, #28]
 8005e1c:	6819      	ldr	r1, [r3, #0]
 8005e1e:	b111      	cbz	r1, 8005e26 <_reclaim_reent+0x3a>
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 f87b 	bl	8005f1c <_free_r>
 8005e26:	69e3      	ldr	r3, [r4, #28]
 8005e28:	689d      	ldr	r5, [r3, #8]
 8005e2a:	b15d      	cbz	r5, 8005e44 <_reclaim_reent+0x58>
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	4620      	mov	r0, r4
 8005e30:	682d      	ldr	r5, [r5, #0]
 8005e32:	f000 f873 	bl	8005f1c <_free_r>
 8005e36:	e7f8      	b.n	8005e2a <_reclaim_reent+0x3e>
 8005e38:	680e      	ldr	r6, [r1, #0]
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 f86e 	bl	8005f1c <_free_r>
 8005e40:	4631      	mov	r1, r6
 8005e42:	e7e1      	b.n	8005e08 <_reclaim_reent+0x1c>
 8005e44:	6961      	ldr	r1, [r4, #20]
 8005e46:	b111      	cbz	r1, 8005e4e <_reclaim_reent+0x62>
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f000 f867 	bl	8005f1c <_free_r>
 8005e4e:	69e1      	ldr	r1, [r4, #28]
 8005e50:	b111      	cbz	r1, 8005e58 <_reclaim_reent+0x6c>
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 f862 	bl	8005f1c <_free_r>
 8005e58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005e5a:	b111      	cbz	r1, 8005e62 <_reclaim_reent+0x76>
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 f85d 	bl	8005f1c <_free_r>
 8005e62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e64:	b111      	cbz	r1, 8005e6c <_reclaim_reent+0x80>
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 f858 	bl	8005f1c <_free_r>
 8005e6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005e6e:	b111      	cbz	r1, 8005e76 <_reclaim_reent+0x8a>
 8005e70:	4620      	mov	r0, r4
 8005e72:	f000 f853 	bl	8005f1c <_free_r>
 8005e76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005e78:	b111      	cbz	r1, 8005e80 <_reclaim_reent+0x94>
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 f84e 	bl	8005f1c <_free_r>
 8005e80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005e82:	b111      	cbz	r1, 8005e8a <_reclaim_reent+0x9e>
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 f849 	bl	8005f1c <_free_r>
 8005e8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005e8c:	b111      	cbz	r1, 8005e94 <_reclaim_reent+0xa8>
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 f844 	bl	8005f1c <_free_r>
 8005e94:	6a23      	ldr	r3, [r4, #32]
 8005e96:	b11b      	cbz	r3, 8005ea0 <_reclaim_reent+0xb4>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e9e:	4718      	bx	r3
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000010 	.word	0x20000010

08005ea8 <__errno>:
 8005ea8:	4b01      	ldr	r3, [pc, #4]	@ (8005eb0 <__errno+0x8>)
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	20000010 	.word	0x20000010

08005eb4 <__libc_init_array>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	4d0c      	ldr	r5, [pc, #48]	@ (8005eec <__libc_init_array+0x38>)
 8005eba:	4c0d      	ldr	r4, [pc, #52]	@ (8005ef0 <__libc_init_array+0x3c>)
 8005ebc:	1b64      	subs	r4, r4, r5
 8005ebe:	10a4      	asrs	r4, r4, #2
 8005ec0:	42a6      	cmp	r6, r4
 8005ec2:	d109      	bne.n	8005ed8 <__libc_init_array+0x24>
 8005ec4:	f000 fc76 	bl	80067b4 <_init>
 8005ec8:	2600      	movs	r6, #0
 8005eca:	4d0a      	ldr	r5, [pc, #40]	@ (8005ef4 <__libc_init_array+0x40>)
 8005ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8005ef8 <__libc_init_array+0x44>)
 8005ece:	1b64      	subs	r4, r4, r5
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	42a6      	cmp	r6, r4
 8005ed4:	d105      	bne.n	8005ee2 <__libc_init_array+0x2e>
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005edc:	4798      	blx	r3
 8005ede:	3601      	adds	r6, #1
 8005ee0:	e7ee      	b.n	8005ec0 <__libc_init_array+0xc>
 8005ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee6:	4798      	blx	r3
 8005ee8:	3601      	adds	r6, #1
 8005eea:	e7f2      	b.n	8005ed2 <__libc_init_array+0x1e>
 8005eec:	0800689c 	.word	0x0800689c
 8005ef0:	0800689c 	.word	0x0800689c
 8005ef4:	0800689c 	.word	0x0800689c
 8005ef8:	080068a0 	.word	0x080068a0

08005efc <__retarget_lock_acquire_recursive>:
 8005efc:	4770      	bx	lr

08005efe <__retarget_lock_release_recursive>:
 8005efe:	4770      	bx	lr

08005f00 <memcpy>:
 8005f00:	440a      	add	r2, r1
 8005f02:	4291      	cmp	r1, r2
 8005f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f08:	d100      	bne.n	8005f0c <memcpy+0xc>
 8005f0a:	4770      	bx	lr
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f12:	4291      	cmp	r1, r2
 8005f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f18:	d1f9      	bne.n	8005f0e <memcpy+0xe>
 8005f1a:	bd10      	pop	{r4, pc}

08005f1c <_free_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4605      	mov	r5, r0
 8005f20:	2900      	cmp	r1, #0
 8005f22:	d040      	beq.n	8005fa6 <_free_r+0x8a>
 8005f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f28:	1f0c      	subs	r4, r1, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bfb8      	it	lt
 8005f2e:	18e4      	addlt	r4, r4, r3
 8005f30:	f000 f8de 	bl	80060f0 <__malloc_lock>
 8005f34:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa8 <_free_r+0x8c>)
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	b933      	cbnz	r3, 8005f48 <_free_r+0x2c>
 8005f3a:	6063      	str	r3, [r4, #4]
 8005f3c:	6014      	str	r4, [r2, #0]
 8005f3e:	4628      	mov	r0, r5
 8005f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f44:	f000 b8da 	b.w	80060fc <__malloc_unlock>
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	d908      	bls.n	8005f5e <_free_r+0x42>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	1821      	adds	r1, r4, r0
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf01      	itttt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	1809      	addeq	r1, r1, r0
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	e7ed      	b.n	8005f3a <_free_r+0x1e>
 8005f5e:	461a      	mov	r2, r3
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b10b      	cbz	r3, 8005f68 <_free_r+0x4c>
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d9fa      	bls.n	8005f5e <_free_r+0x42>
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	1850      	adds	r0, r2, r1
 8005f6c:	42a0      	cmp	r0, r4
 8005f6e:	d10b      	bne.n	8005f88 <_free_r+0x6c>
 8005f70:	6820      	ldr	r0, [r4, #0]
 8005f72:	4401      	add	r1, r0
 8005f74:	1850      	adds	r0, r2, r1
 8005f76:	4283      	cmp	r3, r0
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	d1e0      	bne.n	8005f3e <_free_r+0x22>
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	4408      	add	r0, r1
 8005f82:	6010      	str	r0, [r2, #0]
 8005f84:	6053      	str	r3, [r2, #4]
 8005f86:	e7da      	b.n	8005f3e <_free_r+0x22>
 8005f88:	d902      	bls.n	8005f90 <_free_r+0x74>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	e7d6      	b.n	8005f3e <_free_r+0x22>
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	1821      	adds	r1, r4, r0
 8005f94:	428b      	cmp	r3, r1
 8005f96:	bf01      	itttt	eq
 8005f98:	6819      	ldreq	r1, [r3, #0]
 8005f9a:	685b      	ldreq	r3, [r3, #4]
 8005f9c:	1809      	addeq	r1, r1, r0
 8005f9e:	6021      	streq	r1, [r4, #0]
 8005fa0:	6063      	str	r3, [r4, #4]
 8005fa2:	6054      	str	r4, [r2, #4]
 8005fa4:	e7cb      	b.n	8005f3e <_free_r+0x22>
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	20001d2c 	.word	0x20001d2c

08005fac <sbrk_aligned>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4e0f      	ldr	r6, [pc, #60]	@ (8005fec <sbrk_aligned+0x40>)
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	6831      	ldr	r1, [r6, #0]
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	b911      	cbnz	r1, 8005fbe <sbrk_aligned+0x12>
 8005fb8:	f000 fba8 	bl	800670c <_sbrk_r>
 8005fbc:	6030      	str	r0, [r6, #0]
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f000 fba3 	bl	800670c <_sbrk_r>
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	d103      	bne.n	8005fd2 <sbrk_aligned+0x26>
 8005fca:	f04f 34ff 	mov.w	r4, #4294967295
 8005fce:	4620      	mov	r0, r4
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
 8005fd2:	1cc4      	adds	r4, r0, #3
 8005fd4:	f024 0403 	bic.w	r4, r4, #3
 8005fd8:	42a0      	cmp	r0, r4
 8005fda:	d0f8      	beq.n	8005fce <sbrk_aligned+0x22>
 8005fdc:	1a21      	subs	r1, r4, r0
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 fb94 	bl	800670c <_sbrk_r>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d1f2      	bne.n	8005fce <sbrk_aligned+0x22>
 8005fe8:	e7ef      	b.n	8005fca <sbrk_aligned+0x1e>
 8005fea:	bf00      	nop
 8005fec:	20001d28 	.word	0x20001d28

08005ff0 <_malloc_r>:
 8005ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff4:	1ccd      	adds	r5, r1, #3
 8005ff6:	f025 0503 	bic.w	r5, r5, #3
 8005ffa:	3508      	adds	r5, #8
 8005ffc:	2d0c      	cmp	r5, #12
 8005ffe:	bf38      	it	cc
 8006000:	250c      	movcc	r5, #12
 8006002:	2d00      	cmp	r5, #0
 8006004:	4606      	mov	r6, r0
 8006006:	db01      	blt.n	800600c <_malloc_r+0x1c>
 8006008:	42a9      	cmp	r1, r5
 800600a:	d904      	bls.n	8006016 <_malloc_r+0x26>
 800600c:	230c      	movs	r3, #12
 800600e:	6033      	str	r3, [r6, #0]
 8006010:	2000      	movs	r0, #0
 8006012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006016:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060ec <_malloc_r+0xfc>
 800601a:	f000 f869 	bl	80060f0 <__malloc_lock>
 800601e:	f8d8 3000 	ldr.w	r3, [r8]
 8006022:	461c      	mov	r4, r3
 8006024:	bb44      	cbnz	r4, 8006078 <_malloc_r+0x88>
 8006026:	4629      	mov	r1, r5
 8006028:	4630      	mov	r0, r6
 800602a:	f7ff ffbf 	bl	8005fac <sbrk_aligned>
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	4604      	mov	r4, r0
 8006032:	d158      	bne.n	80060e6 <_malloc_r+0xf6>
 8006034:	f8d8 4000 	ldr.w	r4, [r8]
 8006038:	4627      	mov	r7, r4
 800603a:	2f00      	cmp	r7, #0
 800603c:	d143      	bne.n	80060c6 <_malloc_r+0xd6>
 800603e:	2c00      	cmp	r4, #0
 8006040:	d04b      	beq.n	80060da <_malloc_r+0xea>
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	4639      	mov	r1, r7
 8006046:	4630      	mov	r0, r6
 8006048:	eb04 0903 	add.w	r9, r4, r3
 800604c:	f000 fb5e 	bl	800670c <_sbrk_r>
 8006050:	4581      	cmp	r9, r0
 8006052:	d142      	bne.n	80060da <_malloc_r+0xea>
 8006054:	6821      	ldr	r1, [r4, #0]
 8006056:	4630      	mov	r0, r6
 8006058:	1a6d      	subs	r5, r5, r1
 800605a:	4629      	mov	r1, r5
 800605c:	f7ff ffa6 	bl	8005fac <sbrk_aligned>
 8006060:	3001      	adds	r0, #1
 8006062:	d03a      	beq.n	80060da <_malloc_r+0xea>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	442b      	add	r3, r5
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	f8d8 3000 	ldr.w	r3, [r8]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	bb62      	cbnz	r2, 80060cc <_malloc_r+0xdc>
 8006072:	f8c8 7000 	str.w	r7, [r8]
 8006076:	e00f      	b.n	8006098 <_malloc_r+0xa8>
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	1b52      	subs	r2, r2, r5
 800607c:	d420      	bmi.n	80060c0 <_malloc_r+0xd0>
 800607e:	2a0b      	cmp	r2, #11
 8006080:	d917      	bls.n	80060b2 <_malloc_r+0xc2>
 8006082:	1961      	adds	r1, r4, r5
 8006084:	42a3      	cmp	r3, r4
 8006086:	6025      	str	r5, [r4, #0]
 8006088:	bf18      	it	ne
 800608a:	6059      	strne	r1, [r3, #4]
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	bf08      	it	eq
 8006090:	f8c8 1000 	streq.w	r1, [r8]
 8006094:	5162      	str	r2, [r4, r5]
 8006096:	604b      	str	r3, [r1, #4]
 8006098:	4630      	mov	r0, r6
 800609a:	f000 f82f 	bl	80060fc <__malloc_unlock>
 800609e:	f104 000b 	add.w	r0, r4, #11
 80060a2:	1d23      	adds	r3, r4, #4
 80060a4:	f020 0007 	bic.w	r0, r0, #7
 80060a8:	1ac2      	subs	r2, r0, r3
 80060aa:	bf1c      	itt	ne
 80060ac:	1a1b      	subne	r3, r3, r0
 80060ae:	50a3      	strne	r3, [r4, r2]
 80060b0:	e7af      	b.n	8006012 <_malloc_r+0x22>
 80060b2:	6862      	ldr	r2, [r4, #4]
 80060b4:	42a3      	cmp	r3, r4
 80060b6:	bf0c      	ite	eq
 80060b8:	f8c8 2000 	streq.w	r2, [r8]
 80060bc:	605a      	strne	r2, [r3, #4]
 80060be:	e7eb      	b.n	8006098 <_malloc_r+0xa8>
 80060c0:	4623      	mov	r3, r4
 80060c2:	6864      	ldr	r4, [r4, #4]
 80060c4:	e7ae      	b.n	8006024 <_malloc_r+0x34>
 80060c6:	463c      	mov	r4, r7
 80060c8:	687f      	ldr	r7, [r7, #4]
 80060ca:	e7b6      	b.n	800603a <_malloc_r+0x4a>
 80060cc:	461a      	mov	r2, r3
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	d1fb      	bne.n	80060cc <_malloc_r+0xdc>
 80060d4:	2300      	movs	r3, #0
 80060d6:	6053      	str	r3, [r2, #4]
 80060d8:	e7de      	b.n	8006098 <_malloc_r+0xa8>
 80060da:	230c      	movs	r3, #12
 80060dc:	4630      	mov	r0, r6
 80060de:	6033      	str	r3, [r6, #0]
 80060e0:	f000 f80c 	bl	80060fc <__malloc_unlock>
 80060e4:	e794      	b.n	8006010 <_malloc_r+0x20>
 80060e6:	6005      	str	r5, [r0, #0]
 80060e8:	e7d6      	b.n	8006098 <_malloc_r+0xa8>
 80060ea:	bf00      	nop
 80060ec:	20001d2c 	.word	0x20001d2c

080060f0 <__malloc_lock>:
 80060f0:	4801      	ldr	r0, [pc, #4]	@ (80060f8 <__malloc_lock+0x8>)
 80060f2:	f7ff bf03 	b.w	8005efc <__retarget_lock_acquire_recursive>
 80060f6:	bf00      	nop
 80060f8:	20001d24 	.word	0x20001d24

080060fc <__malloc_unlock>:
 80060fc:	4801      	ldr	r0, [pc, #4]	@ (8006104 <__malloc_unlock+0x8>)
 80060fe:	f7ff befe 	b.w	8005efe <__retarget_lock_release_recursive>
 8006102:	bf00      	nop
 8006104:	20001d24 	.word	0x20001d24

08006108 <__ssputs_r>:
 8006108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	461f      	mov	r7, r3
 800610e:	688e      	ldr	r6, [r1, #8]
 8006110:	4682      	mov	sl, r0
 8006112:	42be      	cmp	r6, r7
 8006114:	460c      	mov	r4, r1
 8006116:	4690      	mov	r8, r2
 8006118:	680b      	ldr	r3, [r1, #0]
 800611a:	d82d      	bhi.n	8006178 <__ssputs_r+0x70>
 800611c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006120:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006124:	d026      	beq.n	8006174 <__ssputs_r+0x6c>
 8006126:	6965      	ldr	r5, [r4, #20]
 8006128:	6909      	ldr	r1, [r1, #16]
 800612a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800612e:	eba3 0901 	sub.w	r9, r3, r1
 8006132:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006136:	1c7b      	adds	r3, r7, #1
 8006138:	444b      	add	r3, r9
 800613a:	106d      	asrs	r5, r5, #1
 800613c:	429d      	cmp	r5, r3
 800613e:	bf38      	it	cc
 8006140:	461d      	movcc	r5, r3
 8006142:	0553      	lsls	r3, r2, #21
 8006144:	d527      	bpl.n	8006196 <__ssputs_r+0x8e>
 8006146:	4629      	mov	r1, r5
 8006148:	f7ff ff52 	bl	8005ff0 <_malloc_r>
 800614c:	4606      	mov	r6, r0
 800614e:	b360      	cbz	r0, 80061aa <__ssputs_r+0xa2>
 8006150:	464a      	mov	r2, r9
 8006152:	6921      	ldr	r1, [r4, #16]
 8006154:	f7ff fed4 	bl	8005f00 <memcpy>
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800615e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006162:	81a3      	strh	r3, [r4, #12]
 8006164:	6126      	str	r6, [r4, #16]
 8006166:	444e      	add	r6, r9
 8006168:	6026      	str	r6, [r4, #0]
 800616a:	463e      	mov	r6, r7
 800616c:	6165      	str	r5, [r4, #20]
 800616e:	eba5 0509 	sub.w	r5, r5, r9
 8006172:	60a5      	str	r5, [r4, #8]
 8006174:	42be      	cmp	r6, r7
 8006176:	d900      	bls.n	800617a <__ssputs_r+0x72>
 8006178:	463e      	mov	r6, r7
 800617a:	4632      	mov	r2, r6
 800617c:	4641      	mov	r1, r8
 800617e:	6820      	ldr	r0, [r4, #0]
 8006180:	f000 faaa 	bl	80066d8 <memmove>
 8006184:	2000      	movs	r0, #0
 8006186:	68a3      	ldr	r3, [r4, #8]
 8006188:	1b9b      	subs	r3, r3, r6
 800618a:	60a3      	str	r3, [r4, #8]
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	4433      	add	r3, r6
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	462a      	mov	r2, r5
 8006198:	f000 fad6 	bl	8006748 <_realloc_r>
 800619c:	4606      	mov	r6, r0
 800619e:	2800      	cmp	r0, #0
 80061a0:	d1e0      	bne.n	8006164 <__ssputs_r+0x5c>
 80061a2:	4650      	mov	r0, sl
 80061a4:	6921      	ldr	r1, [r4, #16]
 80061a6:	f7ff feb9 	bl	8005f1c <_free_r>
 80061aa:	230c      	movs	r3, #12
 80061ac:	f8ca 3000 	str.w	r3, [sl]
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f04f 30ff 	mov.w	r0, #4294967295
 80061b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	e7e9      	b.n	8006192 <__ssputs_r+0x8a>
	...

080061c0 <_svfiprintf_r>:
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	4698      	mov	r8, r3
 80061c6:	898b      	ldrh	r3, [r1, #12]
 80061c8:	4607      	mov	r7, r0
 80061ca:	061b      	lsls	r3, r3, #24
 80061cc:	460d      	mov	r5, r1
 80061ce:	4614      	mov	r4, r2
 80061d0:	b09d      	sub	sp, #116	@ 0x74
 80061d2:	d510      	bpl.n	80061f6 <_svfiprintf_r+0x36>
 80061d4:	690b      	ldr	r3, [r1, #16]
 80061d6:	b973      	cbnz	r3, 80061f6 <_svfiprintf_r+0x36>
 80061d8:	2140      	movs	r1, #64	@ 0x40
 80061da:	f7ff ff09 	bl	8005ff0 <_malloc_r>
 80061de:	6028      	str	r0, [r5, #0]
 80061e0:	6128      	str	r0, [r5, #16]
 80061e2:	b930      	cbnz	r0, 80061f2 <_svfiprintf_r+0x32>
 80061e4:	230c      	movs	r3, #12
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ec:	b01d      	add	sp, #116	@ 0x74
 80061ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f2:	2340      	movs	r3, #64	@ 0x40
 80061f4:	616b      	str	r3, [r5, #20]
 80061f6:	2300      	movs	r3, #0
 80061f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80061fa:	2320      	movs	r3, #32
 80061fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006200:	2330      	movs	r3, #48	@ 0x30
 8006202:	f04f 0901 	mov.w	r9, #1
 8006206:	f8cd 800c 	str.w	r8, [sp, #12]
 800620a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80063a4 <_svfiprintf_r+0x1e4>
 800620e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006212:	4623      	mov	r3, r4
 8006214:	469a      	mov	sl, r3
 8006216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800621a:	b10a      	cbz	r2, 8006220 <_svfiprintf_r+0x60>
 800621c:	2a25      	cmp	r2, #37	@ 0x25
 800621e:	d1f9      	bne.n	8006214 <_svfiprintf_r+0x54>
 8006220:	ebba 0b04 	subs.w	fp, sl, r4
 8006224:	d00b      	beq.n	800623e <_svfiprintf_r+0x7e>
 8006226:	465b      	mov	r3, fp
 8006228:	4622      	mov	r2, r4
 800622a:	4629      	mov	r1, r5
 800622c:	4638      	mov	r0, r7
 800622e:	f7ff ff6b 	bl	8006108 <__ssputs_r>
 8006232:	3001      	adds	r0, #1
 8006234:	f000 80a7 	beq.w	8006386 <_svfiprintf_r+0x1c6>
 8006238:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800623a:	445a      	add	r2, fp
 800623c:	9209      	str	r2, [sp, #36]	@ 0x24
 800623e:	f89a 3000 	ldrb.w	r3, [sl]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 809f 	beq.w	8006386 <_svfiprintf_r+0x1c6>
 8006248:	2300      	movs	r3, #0
 800624a:	f04f 32ff 	mov.w	r2, #4294967295
 800624e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006252:	f10a 0a01 	add.w	sl, sl, #1
 8006256:	9304      	str	r3, [sp, #16]
 8006258:	9307      	str	r3, [sp, #28]
 800625a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800625e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006260:	4654      	mov	r4, sl
 8006262:	2205      	movs	r2, #5
 8006264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006268:	484e      	ldr	r0, [pc, #312]	@ (80063a4 <_svfiprintf_r+0x1e4>)
 800626a:	f000 fa5f 	bl	800672c <memchr>
 800626e:	9a04      	ldr	r2, [sp, #16]
 8006270:	b9d8      	cbnz	r0, 80062aa <_svfiprintf_r+0xea>
 8006272:	06d0      	lsls	r0, r2, #27
 8006274:	bf44      	itt	mi
 8006276:	2320      	movmi	r3, #32
 8006278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800627c:	0711      	lsls	r1, r2, #28
 800627e:	bf44      	itt	mi
 8006280:	232b      	movmi	r3, #43	@ 0x2b
 8006282:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006286:	f89a 3000 	ldrb.w	r3, [sl]
 800628a:	2b2a      	cmp	r3, #42	@ 0x2a
 800628c:	d015      	beq.n	80062ba <_svfiprintf_r+0xfa>
 800628e:	4654      	mov	r4, sl
 8006290:	2000      	movs	r0, #0
 8006292:	f04f 0c0a 	mov.w	ip, #10
 8006296:	9a07      	ldr	r2, [sp, #28]
 8006298:	4621      	mov	r1, r4
 800629a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800629e:	3b30      	subs	r3, #48	@ 0x30
 80062a0:	2b09      	cmp	r3, #9
 80062a2:	d94b      	bls.n	800633c <_svfiprintf_r+0x17c>
 80062a4:	b1b0      	cbz	r0, 80062d4 <_svfiprintf_r+0x114>
 80062a6:	9207      	str	r2, [sp, #28]
 80062a8:	e014      	b.n	80062d4 <_svfiprintf_r+0x114>
 80062aa:	eba0 0308 	sub.w	r3, r0, r8
 80062ae:	fa09 f303 	lsl.w	r3, r9, r3
 80062b2:	4313      	orrs	r3, r2
 80062b4:	46a2      	mov	sl, r4
 80062b6:	9304      	str	r3, [sp, #16]
 80062b8:	e7d2      	b.n	8006260 <_svfiprintf_r+0xa0>
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	1d19      	adds	r1, r3, #4
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	9103      	str	r1, [sp, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bfbb      	ittet	lt
 80062c6:	425b      	neglt	r3, r3
 80062c8:	f042 0202 	orrlt.w	r2, r2, #2
 80062cc:	9307      	strge	r3, [sp, #28]
 80062ce:	9307      	strlt	r3, [sp, #28]
 80062d0:	bfb8      	it	lt
 80062d2:	9204      	strlt	r2, [sp, #16]
 80062d4:	7823      	ldrb	r3, [r4, #0]
 80062d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80062d8:	d10a      	bne.n	80062f0 <_svfiprintf_r+0x130>
 80062da:	7863      	ldrb	r3, [r4, #1]
 80062dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80062de:	d132      	bne.n	8006346 <_svfiprintf_r+0x186>
 80062e0:	9b03      	ldr	r3, [sp, #12]
 80062e2:	3402      	adds	r4, #2
 80062e4:	1d1a      	adds	r2, r3, #4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	9203      	str	r2, [sp, #12]
 80062ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062ee:	9305      	str	r3, [sp, #20]
 80062f0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80063a8 <_svfiprintf_r+0x1e8>
 80062f4:	2203      	movs	r2, #3
 80062f6:	4650      	mov	r0, sl
 80062f8:	7821      	ldrb	r1, [r4, #0]
 80062fa:	f000 fa17 	bl	800672c <memchr>
 80062fe:	b138      	cbz	r0, 8006310 <_svfiprintf_r+0x150>
 8006300:	2240      	movs	r2, #64	@ 0x40
 8006302:	9b04      	ldr	r3, [sp, #16]
 8006304:	eba0 000a 	sub.w	r0, r0, sl
 8006308:	4082      	lsls	r2, r0
 800630a:	4313      	orrs	r3, r2
 800630c:	3401      	adds	r4, #1
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006314:	2206      	movs	r2, #6
 8006316:	4825      	ldr	r0, [pc, #148]	@ (80063ac <_svfiprintf_r+0x1ec>)
 8006318:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800631c:	f000 fa06 	bl	800672c <memchr>
 8006320:	2800      	cmp	r0, #0
 8006322:	d036      	beq.n	8006392 <_svfiprintf_r+0x1d2>
 8006324:	4b22      	ldr	r3, [pc, #136]	@ (80063b0 <_svfiprintf_r+0x1f0>)
 8006326:	bb1b      	cbnz	r3, 8006370 <_svfiprintf_r+0x1b0>
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	3307      	adds	r3, #7
 800632c:	f023 0307 	bic.w	r3, r3, #7
 8006330:	3308      	adds	r3, #8
 8006332:	9303      	str	r3, [sp, #12]
 8006334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006336:	4433      	add	r3, r6
 8006338:	9309      	str	r3, [sp, #36]	@ 0x24
 800633a:	e76a      	b.n	8006212 <_svfiprintf_r+0x52>
 800633c:	460c      	mov	r4, r1
 800633e:	2001      	movs	r0, #1
 8006340:	fb0c 3202 	mla	r2, ip, r2, r3
 8006344:	e7a8      	b.n	8006298 <_svfiprintf_r+0xd8>
 8006346:	2300      	movs	r3, #0
 8006348:	f04f 0c0a 	mov.w	ip, #10
 800634c:	4619      	mov	r1, r3
 800634e:	3401      	adds	r4, #1
 8006350:	9305      	str	r3, [sp, #20]
 8006352:	4620      	mov	r0, r4
 8006354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006358:	3a30      	subs	r2, #48	@ 0x30
 800635a:	2a09      	cmp	r2, #9
 800635c:	d903      	bls.n	8006366 <_svfiprintf_r+0x1a6>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0c6      	beq.n	80062f0 <_svfiprintf_r+0x130>
 8006362:	9105      	str	r1, [sp, #20]
 8006364:	e7c4      	b.n	80062f0 <_svfiprintf_r+0x130>
 8006366:	4604      	mov	r4, r0
 8006368:	2301      	movs	r3, #1
 800636a:	fb0c 2101 	mla	r1, ip, r1, r2
 800636e:	e7f0      	b.n	8006352 <_svfiprintf_r+0x192>
 8006370:	ab03      	add	r3, sp, #12
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	462a      	mov	r2, r5
 8006376:	4638      	mov	r0, r7
 8006378:	4b0e      	ldr	r3, [pc, #56]	@ (80063b4 <_svfiprintf_r+0x1f4>)
 800637a:	a904      	add	r1, sp, #16
 800637c:	f3af 8000 	nop.w
 8006380:	1c42      	adds	r2, r0, #1
 8006382:	4606      	mov	r6, r0
 8006384:	d1d6      	bne.n	8006334 <_svfiprintf_r+0x174>
 8006386:	89ab      	ldrh	r3, [r5, #12]
 8006388:	065b      	lsls	r3, r3, #25
 800638a:	f53f af2d 	bmi.w	80061e8 <_svfiprintf_r+0x28>
 800638e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006390:	e72c      	b.n	80061ec <_svfiprintf_r+0x2c>
 8006392:	ab03      	add	r3, sp, #12
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	462a      	mov	r2, r5
 8006398:	4638      	mov	r0, r7
 800639a:	4b06      	ldr	r3, [pc, #24]	@ (80063b4 <_svfiprintf_r+0x1f4>)
 800639c:	a904      	add	r1, sp, #16
 800639e:	f000 f87d 	bl	800649c <_printf_i>
 80063a2:	e7ed      	b.n	8006380 <_svfiprintf_r+0x1c0>
 80063a4:	08006866 	.word	0x08006866
 80063a8:	0800686c 	.word	0x0800686c
 80063ac:	08006870 	.word	0x08006870
 80063b0:	00000000 	.word	0x00000000
 80063b4:	08006109 	.word	0x08006109

080063b8 <_printf_common>:
 80063b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063bc:	4616      	mov	r6, r2
 80063be:	4698      	mov	r8, r3
 80063c0:	688a      	ldr	r2, [r1, #8]
 80063c2:	690b      	ldr	r3, [r1, #16]
 80063c4:	4607      	mov	r7, r0
 80063c6:	4293      	cmp	r3, r2
 80063c8:	bfb8      	it	lt
 80063ca:	4613      	movlt	r3, r2
 80063cc:	6033      	str	r3, [r6, #0]
 80063ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063d2:	460c      	mov	r4, r1
 80063d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063d8:	b10a      	cbz	r2, 80063de <_printf_common+0x26>
 80063da:	3301      	adds	r3, #1
 80063dc:	6033      	str	r3, [r6, #0]
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	0699      	lsls	r1, r3, #26
 80063e2:	bf42      	ittt	mi
 80063e4:	6833      	ldrmi	r3, [r6, #0]
 80063e6:	3302      	addmi	r3, #2
 80063e8:	6033      	strmi	r3, [r6, #0]
 80063ea:	6825      	ldr	r5, [r4, #0]
 80063ec:	f015 0506 	ands.w	r5, r5, #6
 80063f0:	d106      	bne.n	8006400 <_printf_common+0x48>
 80063f2:	f104 0a19 	add.w	sl, r4, #25
 80063f6:	68e3      	ldr	r3, [r4, #12]
 80063f8:	6832      	ldr	r2, [r6, #0]
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	dc2b      	bgt.n	8006458 <_printf_common+0xa0>
 8006400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006404:	6822      	ldr	r2, [r4, #0]
 8006406:	3b00      	subs	r3, #0
 8006408:	bf18      	it	ne
 800640a:	2301      	movne	r3, #1
 800640c:	0692      	lsls	r2, r2, #26
 800640e:	d430      	bmi.n	8006472 <_printf_common+0xba>
 8006410:	4641      	mov	r1, r8
 8006412:	4638      	mov	r0, r7
 8006414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006418:	47c8      	blx	r9
 800641a:	3001      	adds	r0, #1
 800641c:	d023      	beq.n	8006466 <_printf_common+0xae>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	6922      	ldr	r2, [r4, #16]
 8006422:	f003 0306 	and.w	r3, r3, #6
 8006426:	2b04      	cmp	r3, #4
 8006428:	bf14      	ite	ne
 800642a:	2500      	movne	r5, #0
 800642c:	6833      	ldreq	r3, [r6, #0]
 800642e:	f04f 0600 	mov.w	r6, #0
 8006432:	bf08      	it	eq
 8006434:	68e5      	ldreq	r5, [r4, #12]
 8006436:	f104 041a 	add.w	r4, r4, #26
 800643a:	bf08      	it	eq
 800643c:	1aed      	subeq	r5, r5, r3
 800643e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006442:	bf08      	it	eq
 8006444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006448:	4293      	cmp	r3, r2
 800644a:	bfc4      	itt	gt
 800644c:	1a9b      	subgt	r3, r3, r2
 800644e:	18ed      	addgt	r5, r5, r3
 8006450:	42b5      	cmp	r5, r6
 8006452:	d11a      	bne.n	800648a <_printf_common+0xd2>
 8006454:	2000      	movs	r0, #0
 8006456:	e008      	b.n	800646a <_printf_common+0xb2>
 8006458:	2301      	movs	r3, #1
 800645a:	4652      	mov	r2, sl
 800645c:	4641      	mov	r1, r8
 800645e:	4638      	mov	r0, r7
 8006460:	47c8      	blx	r9
 8006462:	3001      	adds	r0, #1
 8006464:	d103      	bne.n	800646e <_printf_common+0xb6>
 8006466:	f04f 30ff 	mov.w	r0, #4294967295
 800646a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646e:	3501      	adds	r5, #1
 8006470:	e7c1      	b.n	80063f6 <_printf_common+0x3e>
 8006472:	2030      	movs	r0, #48	@ 0x30
 8006474:	18e1      	adds	r1, r4, r3
 8006476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006480:	4422      	add	r2, r4
 8006482:	3302      	adds	r3, #2
 8006484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006488:	e7c2      	b.n	8006410 <_printf_common+0x58>
 800648a:	2301      	movs	r3, #1
 800648c:	4622      	mov	r2, r4
 800648e:	4641      	mov	r1, r8
 8006490:	4638      	mov	r0, r7
 8006492:	47c8      	blx	r9
 8006494:	3001      	adds	r0, #1
 8006496:	d0e6      	beq.n	8006466 <_printf_common+0xae>
 8006498:	3601      	adds	r6, #1
 800649a:	e7d9      	b.n	8006450 <_printf_common+0x98>

0800649c <_printf_i>:
 800649c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	7e0f      	ldrb	r7, [r1, #24]
 80064a2:	4691      	mov	r9, r2
 80064a4:	2f78      	cmp	r7, #120	@ 0x78
 80064a6:	4680      	mov	r8, r0
 80064a8:	460c      	mov	r4, r1
 80064aa:	469a      	mov	sl, r3
 80064ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064b2:	d807      	bhi.n	80064c4 <_printf_i+0x28>
 80064b4:	2f62      	cmp	r7, #98	@ 0x62
 80064b6:	d80a      	bhi.n	80064ce <_printf_i+0x32>
 80064b8:	2f00      	cmp	r7, #0
 80064ba:	f000 80d1 	beq.w	8006660 <_printf_i+0x1c4>
 80064be:	2f58      	cmp	r7, #88	@ 0x58
 80064c0:	f000 80b8 	beq.w	8006634 <_printf_i+0x198>
 80064c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064cc:	e03a      	b.n	8006544 <_printf_i+0xa8>
 80064ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064d2:	2b15      	cmp	r3, #21
 80064d4:	d8f6      	bhi.n	80064c4 <_printf_i+0x28>
 80064d6:	a101      	add	r1, pc, #4	@ (adr r1, 80064dc <_printf_i+0x40>)
 80064d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064dc:	08006535 	.word	0x08006535
 80064e0:	08006549 	.word	0x08006549
 80064e4:	080064c5 	.word	0x080064c5
 80064e8:	080064c5 	.word	0x080064c5
 80064ec:	080064c5 	.word	0x080064c5
 80064f0:	080064c5 	.word	0x080064c5
 80064f4:	08006549 	.word	0x08006549
 80064f8:	080064c5 	.word	0x080064c5
 80064fc:	080064c5 	.word	0x080064c5
 8006500:	080064c5 	.word	0x080064c5
 8006504:	080064c5 	.word	0x080064c5
 8006508:	08006647 	.word	0x08006647
 800650c:	08006573 	.word	0x08006573
 8006510:	08006601 	.word	0x08006601
 8006514:	080064c5 	.word	0x080064c5
 8006518:	080064c5 	.word	0x080064c5
 800651c:	08006669 	.word	0x08006669
 8006520:	080064c5 	.word	0x080064c5
 8006524:	08006573 	.word	0x08006573
 8006528:	080064c5 	.word	0x080064c5
 800652c:	080064c5 	.word	0x080064c5
 8006530:	08006609 	.word	0x08006609
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	1d1a      	adds	r2, r3, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6032      	str	r2, [r6, #0]
 800653c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006544:	2301      	movs	r3, #1
 8006546:	e09c      	b.n	8006682 <_printf_i+0x1e6>
 8006548:	6833      	ldr	r3, [r6, #0]
 800654a:	6820      	ldr	r0, [r4, #0]
 800654c:	1d19      	adds	r1, r3, #4
 800654e:	6031      	str	r1, [r6, #0]
 8006550:	0606      	lsls	r6, r0, #24
 8006552:	d501      	bpl.n	8006558 <_printf_i+0xbc>
 8006554:	681d      	ldr	r5, [r3, #0]
 8006556:	e003      	b.n	8006560 <_printf_i+0xc4>
 8006558:	0645      	lsls	r5, r0, #25
 800655a:	d5fb      	bpl.n	8006554 <_printf_i+0xb8>
 800655c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006560:	2d00      	cmp	r5, #0
 8006562:	da03      	bge.n	800656c <_printf_i+0xd0>
 8006564:	232d      	movs	r3, #45	@ 0x2d
 8006566:	426d      	negs	r5, r5
 8006568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800656c:	230a      	movs	r3, #10
 800656e:	4858      	ldr	r0, [pc, #352]	@ (80066d0 <_printf_i+0x234>)
 8006570:	e011      	b.n	8006596 <_printf_i+0xfa>
 8006572:	6821      	ldr	r1, [r4, #0]
 8006574:	6833      	ldr	r3, [r6, #0]
 8006576:	0608      	lsls	r0, r1, #24
 8006578:	f853 5b04 	ldr.w	r5, [r3], #4
 800657c:	d402      	bmi.n	8006584 <_printf_i+0xe8>
 800657e:	0649      	lsls	r1, r1, #25
 8006580:	bf48      	it	mi
 8006582:	b2ad      	uxthmi	r5, r5
 8006584:	2f6f      	cmp	r7, #111	@ 0x6f
 8006586:	6033      	str	r3, [r6, #0]
 8006588:	bf14      	ite	ne
 800658a:	230a      	movne	r3, #10
 800658c:	2308      	moveq	r3, #8
 800658e:	4850      	ldr	r0, [pc, #320]	@ (80066d0 <_printf_i+0x234>)
 8006590:	2100      	movs	r1, #0
 8006592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006596:	6866      	ldr	r6, [r4, #4]
 8006598:	2e00      	cmp	r6, #0
 800659a:	60a6      	str	r6, [r4, #8]
 800659c:	db05      	blt.n	80065aa <_printf_i+0x10e>
 800659e:	6821      	ldr	r1, [r4, #0]
 80065a0:	432e      	orrs	r6, r5
 80065a2:	f021 0104 	bic.w	r1, r1, #4
 80065a6:	6021      	str	r1, [r4, #0]
 80065a8:	d04b      	beq.n	8006642 <_printf_i+0x1a6>
 80065aa:	4616      	mov	r6, r2
 80065ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80065b0:	fb03 5711 	mls	r7, r3, r1, r5
 80065b4:	5dc7      	ldrb	r7, [r0, r7]
 80065b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065ba:	462f      	mov	r7, r5
 80065bc:	42bb      	cmp	r3, r7
 80065be:	460d      	mov	r5, r1
 80065c0:	d9f4      	bls.n	80065ac <_printf_i+0x110>
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d10b      	bne.n	80065de <_printf_i+0x142>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	07df      	lsls	r7, r3, #31
 80065ca:	d508      	bpl.n	80065de <_printf_i+0x142>
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	6861      	ldr	r1, [r4, #4]
 80065d0:	4299      	cmp	r1, r3
 80065d2:	bfde      	ittt	le
 80065d4:	2330      	movle	r3, #48	@ 0x30
 80065d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065de:	1b92      	subs	r2, r2, r6
 80065e0:	6122      	str	r2, [r4, #16]
 80065e2:	464b      	mov	r3, r9
 80065e4:	4621      	mov	r1, r4
 80065e6:	4640      	mov	r0, r8
 80065e8:	f8cd a000 	str.w	sl, [sp]
 80065ec:	aa03      	add	r2, sp, #12
 80065ee:	f7ff fee3 	bl	80063b8 <_printf_common>
 80065f2:	3001      	adds	r0, #1
 80065f4:	d14a      	bne.n	800668c <_printf_i+0x1f0>
 80065f6:	f04f 30ff 	mov.w	r0, #4294967295
 80065fa:	b004      	add	sp, #16
 80065fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	f043 0320 	orr.w	r3, r3, #32
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	2778      	movs	r7, #120	@ 0x78
 800660a:	4832      	ldr	r0, [pc, #200]	@ (80066d4 <_printf_i+0x238>)
 800660c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	6831      	ldr	r1, [r6, #0]
 8006614:	061f      	lsls	r7, r3, #24
 8006616:	f851 5b04 	ldr.w	r5, [r1], #4
 800661a:	d402      	bmi.n	8006622 <_printf_i+0x186>
 800661c:	065f      	lsls	r7, r3, #25
 800661e:	bf48      	it	mi
 8006620:	b2ad      	uxthmi	r5, r5
 8006622:	6031      	str	r1, [r6, #0]
 8006624:	07d9      	lsls	r1, r3, #31
 8006626:	bf44      	itt	mi
 8006628:	f043 0320 	orrmi.w	r3, r3, #32
 800662c:	6023      	strmi	r3, [r4, #0]
 800662e:	b11d      	cbz	r5, 8006638 <_printf_i+0x19c>
 8006630:	2310      	movs	r3, #16
 8006632:	e7ad      	b.n	8006590 <_printf_i+0xf4>
 8006634:	4826      	ldr	r0, [pc, #152]	@ (80066d0 <_printf_i+0x234>)
 8006636:	e7e9      	b.n	800660c <_printf_i+0x170>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	f023 0320 	bic.w	r3, r3, #32
 800663e:	6023      	str	r3, [r4, #0]
 8006640:	e7f6      	b.n	8006630 <_printf_i+0x194>
 8006642:	4616      	mov	r6, r2
 8006644:	e7bd      	b.n	80065c2 <_printf_i+0x126>
 8006646:	6833      	ldr	r3, [r6, #0]
 8006648:	6825      	ldr	r5, [r4, #0]
 800664a:	1d18      	adds	r0, r3, #4
 800664c:	6961      	ldr	r1, [r4, #20]
 800664e:	6030      	str	r0, [r6, #0]
 8006650:	062e      	lsls	r6, r5, #24
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	d501      	bpl.n	800665a <_printf_i+0x1be>
 8006656:	6019      	str	r1, [r3, #0]
 8006658:	e002      	b.n	8006660 <_printf_i+0x1c4>
 800665a:	0668      	lsls	r0, r5, #25
 800665c:	d5fb      	bpl.n	8006656 <_printf_i+0x1ba>
 800665e:	8019      	strh	r1, [r3, #0]
 8006660:	2300      	movs	r3, #0
 8006662:	4616      	mov	r6, r2
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	e7bc      	b.n	80065e2 <_printf_i+0x146>
 8006668:	6833      	ldr	r3, [r6, #0]
 800666a:	2100      	movs	r1, #0
 800666c:	1d1a      	adds	r2, r3, #4
 800666e:	6032      	str	r2, [r6, #0]
 8006670:	681e      	ldr	r6, [r3, #0]
 8006672:	6862      	ldr	r2, [r4, #4]
 8006674:	4630      	mov	r0, r6
 8006676:	f000 f859 	bl	800672c <memchr>
 800667a:	b108      	cbz	r0, 8006680 <_printf_i+0x1e4>
 800667c:	1b80      	subs	r0, r0, r6
 800667e:	6060      	str	r0, [r4, #4]
 8006680:	6863      	ldr	r3, [r4, #4]
 8006682:	6123      	str	r3, [r4, #16]
 8006684:	2300      	movs	r3, #0
 8006686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800668a:	e7aa      	b.n	80065e2 <_printf_i+0x146>
 800668c:	4632      	mov	r2, r6
 800668e:	4649      	mov	r1, r9
 8006690:	4640      	mov	r0, r8
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	47d0      	blx	sl
 8006696:	3001      	adds	r0, #1
 8006698:	d0ad      	beq.n	80065f6 <_printf_i+0x15a>
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	079b      	lsls	r3, r3, #30
 800669e:	d413      	bmi.n	80066c8 <_printf_i+0x22c>
 80066a0:	68e0      	ldr	r0, [r4, #12]
 80066a2:	9b03      	ldr	r3, [sp, #12]
 80066a4:	4298      	cmp	r0, r3
 80066a6:	bfb8      	it	lt
 80066a8:	4618      	movlt	r0, r3
 80066aa:	e7a6      	b.n	80065fa <_printf_i+0x15e>
 80066ac:	2301      	movs	r3, #1
 80066ae:	4632      	mov	r2, r6
 80066b0:	4649      	mov	r1, r9
 80066b2:	4640      	mov	r0, r8
 80066b4:	47d0      	blx	sl
 80066b6:	3001      	adds	r0, #1
 80066b8:	d09d      	beq.n	80065f6 <_printf_i+0x15a>
 80066ba:	3501      	adds	r5, #1
 80066bc:	68e3      	ldr	r3, [r4, #12]
 80066be:	9903      	ldr	r1, [sp, #12]
 80066c0:	1a5b      	subs	r3, r3, r1
 80066c2:	42ab      	cmp	r3, r5
 80066c4:	dcf2      	bgt.n	80066ac <_printf_i+0x210>
 80066c6:	e7eb      	b.n	80066a0 <_printf_i+0x204>
 80066c8:	2500      	movs	r5, #0
 80066ca:	f104 0619 	add.w	r6, r4, #25
 80066ce:	e7f5      	b.n	80066bc <_printf_i+0x220>
 80066d0:	08006877 	.word	0x08006877
 80066d4:	08006888 	.word	0x08006888

080066d8 <memmove>:
 80066d8:	4288      	cmp	r0, r1
 80066da:	b510      	push	{r4, lr}
 80066dc:	eb01 0402 	add.w	r4, r1, r2
 80066e0:	d902      	bls.n	80066e8 <memmove+0x10>
 80066e2:	4284      	cmp	r4, r0
 80066e4:	4623      	mov	r3, r4
 80066e6:	d807      	bhi.n	80066f8 <memmove+0x20>
 80066e8:	1e43      	subs	r3, r0, #1
 80066ea:	42a1      	cmp	r1, r4
 80066ec:	d008      	beq.n	8006700 <memmove+0x28>
 80066ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066f6:	e7f8      	b.n	80066ea <memmove+0x12>
 80066f8:	4601      	mov	r1, r0
 80066fa:	4402      	add	r2, r0
 80066fc:	428a      	cmp	r2, r1
 80066fe:	d100      	bne.n	8006702 <memmove+0x2a>
 8006700:	bd10      	pop	{r4, pc}
 8006702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800670a:	e7f7      	b.n	80066fc <memmove+0x24>

0800670c <_sbrk_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	2300      	movs	r3, #0
 8006710:	4d05      	ldr	r5, [pc, #20]	@ (8006728 <_sbrk_r+0x1c>)
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	602b      	str	r3, [r5, #0]
 8006718:	f7fa fc38 	bl	8000f8c <_sbrk>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_sbrk_r+0x1a>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_sbrk_r+0x1a>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	20001d20 	.word	0x20001d20

0800672c <memchr>:
 800672c:	4603      	mov	r3, r0
 800672e:	b510      	push	{r4, lr}
 8006730:	b2c9      	uxtb	r1, r1
 8006732:	4402      	add	r2, r0
 8006734:	4293      	cmp	r3, r2
 8006736:	4618      	mov	r0, r3
 8006738:	d101      	bne.n	800673e <memchr+0x12>
 800673a:	2000      	movs	r0, #0
 800673c:	e003      	b.n	8006746 <memchr+0x1a>
 800673e:	7804      	ldrb	r4, [r0, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	428c      	cmp	r4, r1
 8006744:	d1f6      	bne.n	8006734 <memchr+0x8>
 8006746:	bd10      	pop	{r4, pc}

08006748 <_realloc_r>:
 8006748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674c:	4607      	mov	r7, r0
 800674e:	4614      	mov	r4, r2
 8006750:	460d      	mov	r5, r1
 8006752:	b921      	cbnz	r1, 800675e <_realloc_r+0x16>
 8006754:	4611      	mov	r1, r2
 8006756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800675a:	f7ff bc49 	b.w	8005ff0 <_malloc_r>
 800675e:	b92a      	cbnz	r2, 800676c <_realloc_r+0x24>
 8006760:	f7ff fbdc 	bl	8005f1c <_free_r>
 8006764:	4625      	mov	r5, r4
 8006766:	4628      	mov	r0, r5
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676c:	f000 f81a 	bl	80067a4 <_malloc_usable_size_r>
 8006770:	4284      	cmp	r4, r0
 8006772:	4606      	mov	r6, r0
 8006774:	d802      	bhi.n	800677c <_realloc_r+0x34>
 8006776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800677a:	d8f4      	bhi.n	8006766 <_realloc_r+0x1e>
 800677c:	4621      	mov	r1, r4
 800677e:	4638      	mov	r0, r7
 8006780:	f7ff fc36 	bl	8005ff0 <_malloc_r>
 8006784:	4680      	mov	r8, r0
 8006786:	b908      	cbnz	r0, 800678c <_realloc_r+0x44>
 8006788:	4645      	mov	r5, r8
 800678a:	e7ec      	b.n	8006766 <_realloc_r+0x1e>
 800678c:	42b4      	cmp	r4, r6
 800678e:	4622      	mov	r2, r4
 8006790:	4629      	mov	r1, r5
 8006792:	bf28      	it	cs
 8006794:	4632      	movcs	r2, r6
 8006796:	f7ff fbb3 	bl	8005f00 <memcpy>
 800679a:	4629      	mov	r1, r5
 800679c:	4638      	mov	r0, r7
 800679e:	f7ff fbbd 	bl	8005f1c <_free_r>
 80067a2:	e7f1      	b.n	8006788 <_realloc_r+0x40>

080067a4 <_malloc_usable_size_r>:
 80067a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a8:	1f18      	subs	r0, r3, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bfbc      	itt	lt
 80067ae:	580b      	ldrlt	r3, [r1, r0]
 80067b0:	18c0      	addlt	r0, r0, r3
 80067b2:	4770      	bx	lr

080067b4 <_init>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr

080067c0 <_fini>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr
