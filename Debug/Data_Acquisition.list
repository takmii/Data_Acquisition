
Data_Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000727c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800738c  0800738c  0000838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007440  08007440  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007440  08007440  00009064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007440  08007440  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007440  08007440  00008440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007444  08007444  00008444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007448  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e9c  20000064  080074ac  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f00  080074ac  00009f00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187fc  00000000  00000000  0000908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000410a  00000000  00000000  00021889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00025998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001038  00000000  00000000  00026ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b787  00000000  00000000  00027f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196f5  00000000  00000000  00043687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab11  00000000  00000000  0005cd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f788d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005abc  00000000  00000000  000f78d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000fd38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08007374 	.word	0x08007374

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08007374 	.word	0x08007374

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2uiz>:
 80006f8:	0042      	lsls	r2, r0, #1
 80006fa:	d20e      	bcs.n	800071a <__aeabi_f2uiz+0x22>
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000700:	d30b      	bcc.n	800071a <__aeabi_f2uiz+0x22>
 8000702:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d409      	bmi.n	8000720 <__aeabi_f2uiz+0x28>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2uiz+0x32>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d102      	bne.n	8000730 <__aeabi_f2uiz+0x38>
 800072a:	f04f 30ff 	mov.w	r0, #4294967295
 800072e:	4770      	bx	lr
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000748:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <MX_ADC1_Init+0x74>)
 800074a:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <MX_ADC1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074e:	4b17      	ldr	r3, [pc, #92]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000754:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000756:	2201      	movs	r2, #1
 8000758:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075a:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_ADC1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000762:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_ADC1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000770:	2201      	movs	r2, #1
 8000772:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000774:	480d      	ldr	r0, [pc, #52]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000776:	f001 fc4d 	bl	8002014 <HAL_ADC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000780:	f001 f99a 	bl	8001ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000788:	2301      	movs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800078c:	2302      	movs	r3, #2
 800078e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_ADC1_Init+0x74>)
 8000796:	f001 ff01 	bl	800259c <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007a0:	f001 f98a 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000080 	.word	0x20000080
 80007b0:	40012400 	.word	0x40012400

080007b4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007c6:	4a19      	ldr	r2, [pc, #100]	@ (800082c <MX_ADC2_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007de:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80007e2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <MX_ADC2_Init+0x74>)
 80007f2:	f001 fc0f 	bl	8002014 <HAL_ADC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f001 f95c 	bl	8001ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000804:	2301      	movs	r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000808:	2302      	movs	r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_ADC2_Init+0x74>)
 8000812:	f001 fec3 	bl	800259c <HAL_ADC_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800081c:	f001 f94c 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000b0 	.word	0x200000b0
 800082c:	40012800 	.word	0x40012800

08000830 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0318 	add.w	r3, r7, #24
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a28      	ldr	r2, [pc, #160]	@ (80008ec <HAL_ADC_MspInit+0xbc>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d122      	bne.n	8000896 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a26      	ldr	r2, [pc, #152]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 8000856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a20      	ldr	r2, [pc, #128]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000880:	230e      	movs	r3, #14
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000884:	2303      	movs	r3, #3
 8000886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	4619      	mov	r1, r3
 800088e:	4819      	ldr	r0, [pc, #100]	@ (80008f4 <HAL_ADC_MspInit+0xc4>)
 8000890:	f002 fb28 	bl	8002ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000894:	e026      	b.n	80008e4 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <HAL_ADC_MspInit+0xc8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d121      	bne.n	80008e4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80008a0:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a0c      	ldr	r2, [pc, #48]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <HAL_ADC_MspInit+0xc0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80008d0:	2371      	movs	r3, #113	@ 0x71
 80008d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d4:	2303      	movs	r3, #3
 80008d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	4619      	mov	r1, r3
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <HAL_ADC_MspInit+0xc4>)
 80008e0:	f002 fb00 	bl	8002ee4 <HAL_GPIO_Init>
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40012400 	.word	0x40012400
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40012800 	.word	0x40012800

080008fc <setADCChannel1>:
unsigned char readings_qtt=5;


unsigned short sensorData[sensor_qtt][sensor_buffer_size];

HAL_StatusTypeDef setADCChannel1(unsigned char channel){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	switch(channel) {
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b11      	cmp	r3, #17
 800090a:	d86f      	bhi.n	80009ec <setADCChannel1+0xf0>
 800090c:	a201      	add	r2, pc, #4	@ (adr r2, 8000914 <setADCChannel1+0x18>)
 800090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000912:	bf00      	nop
 8000914:	0800095d 	.word	0x0800095d
 8000918:	08000965 	.word	0x08000965
 800091c:	0800096d 	.word	0x0800096d
 8000920:	08000975 	.word	0x08000975
 8000924:	0800097d 	.word	0x0800097d
 8000928:	08000985 	.word	0x08000985
 800092c:	0800098d 	.word	0x0800098d
 8000930:	08000995 	.word	0x08000995
 8000934:	0800099d 	.word	0x0800099d
 8000938:	080009a5 	.word	0x080009a5
 800093c:	080009ad 	.word	0x080009ad
 8000940:	080009b5 	.word	0x080009b5
 8000944:	080009bd 	.word	0x080009bd
 8000948:	080009c5 	.word	0x080009c5
 800094c:	080009cd 	.word	0x080009cd
 8000950:	080009d5 	.word	0x080009d5
 8000954:	080009dd 	.word	0x080009dd
 8000958:	080009e5 	.word	0x080009e5
	       	case 0:
	            sConfig1.Channel = ADC_CHANNEL_0;
 800095c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <setADCChannel1+0x114>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
	            break;
 8000962:	e045      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 1:
	            sConfig1.Channel = ADC_CHANNEL_1;
 8000964:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <setADCChannel1+0x114>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
	            break;
 800096a:	e041      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 2:
	            sConfig1.Channel = ADC_CHANNEL_2;
 800096c:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <setADCChannel1+0x114>)
 800096e:	2202      	movs	r2, #2
 8000970:	601a      	str	r2, [r3, #0]
	            break;
 8000972:	e03d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 3:
	            sConfig1.Channel = ADC_CHANNEL_3;
 8000974:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <setADCChannel1+0x114>)
 8000976:	2203      	movs	r2, #3
 8000978:	601a      	str	r2, [r3, #0]
	            break;
 800097a:	e039      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 4:
	            sConfig1.Channel = ADC_CHANNEL_4;
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <setADCChannel1+0x114>)
 800097e:	2204      	movs	r2, #4
 8000980:	601a      	str	r2, [r3, #0]
	            break;
 8000982:	e035      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 5:
	            sConfig1.Channel = ADC_CHANNEL_5;
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <setADCChannel1+0x114>)
 8000986:	2205      	movs	r2, #5
 8000988:	601a      	str	r2, [r3, #0]
	            break;
 800098a:	e031      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 6:
	            sConfig1.Channel = ADC_CHANNEL_6;
 800098c:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <setADCChannel1+0x114>)
 800098e:	2206      	movs	r2, #6
 8000990:	601a      	str	r2, [r3, #0]
	            break;
 8000992:	e02d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 7:
	            sConfig1.Channel = ADC_CHANNEL_7;
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <setADCChannel1+0x114>)
 8000996:	2207      	movs	r2, #7
 8000998:	601a      	str	r2, [r3, #0]
	            break;
 800099a:	e029      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 8:
	            sConfig1.Channel = ADC_CHANNEL_8;
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <setADCChannel1+0x114>)
 800099e:	2208      	movs	r2, #8
 80009a0:	601a      	str	r2, [r3, #0]
	            break;
 80009a2:	e025      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 9:
	            sConfig1.Channel = ADC_CHANNEL_9;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <setADCChannel1+0x114>)
 80009a6:	2209      	movs	r2, #9
 80009a8:	601a      	str	r2, [r3, #0]
	            break;
 80009aa:	e021      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 10:
	            sConfig1.Channel = ADC_CHANNEL_10;
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <setADCChannel1+0x114>)
 80009ae:	220a      	movs	r2, #10
 80009b0:	601a      	str	r2, [r3, #0]
	            break;
 80009b2:	e01d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 11:
	            sConfig1.Channel = ADC_CHANNEL_11;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <setADCChannel1+0x114>)
 80009b6:	220b      	movs	r2, #11
 80009b8:	601a      	str	r2, [r3, #0]
	            break;
 80009ba:	e019      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 12:
	            sConfig1.Channel = ADC_CHANNEL_12;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <setADCChannel1+0x114>)
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
	            break;
 80009c2:	e015      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 13:
	            sConfig1.Channel = ADC_CHANNEL_13;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <setADCChannel1+0x114>)
 80009c6:	220d      	movs	r2, #13
 80009c8:	601a      	str	r2, [r3, #0]
	            break;
 80009ca:	e011      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 14:
	            sConfig1.Channel = ADC_CHANNEL_14;
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <setADCChannel1+0x114>)
 80009ce:	220e      	movs	r2, #14
 80009d0:	601a      	str	r2, [r3, #0]
	            break;
 80009d2:	e00d      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 15:
	            sConfig1.Channel = ADC_CHANNEL_15;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <setADCChannel1+0x114>)
 80009d6:	220f      	movs	r2, #15
 80009d8:	601a      	str	r2, [r3, #0]
	            break;
 80009da:	e009      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 16:
	            sConfig1.Channel = ADC_CHANNEL_16;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <setADCChannel1+0x114>)
 80009de:	2210      	movs	r2, #16
 80009e0:	601a      	str	r2, [r3, #0]
	            break;
 80009e2:	e005      	b.n	80009f0 <setADCChannel1+0xf4>
	        case 17:
	            sConfig1.Channel = ADC_CHANNEL_17;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <setADCChannel1+0x114>)
 80009e6:	2211      	movs	r2, #17
 80009e8:	601a      	str	r2, [r3, #0]
	            break;
 80009ea:	e001      	b.n	80009f0 <setADCChannel1+0xf4>
	        default:
	            return HAL_ERROR; // Canal inválido
 80009ec:	2301      	movs	r3, #1
 80009ee:	e00a      	b.n	8000a06 <setADCChannel1+0x10a>
	    }

	    sConfig1.Rank = ADC_REGULAR_RANK_1;
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <setADCChannel1+0x114>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	605a      	str	r2, [r3, #4]
	    sConfig1.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <setADCChannel1+0x114>)
 80009f8:	2205      	movs	r2, #5
 80009fa:	609a      	str	r2, [r3, #8]

	    return HAL_ADC_ConfigChannel(&hadc1, &sConfig1);
 80009fc:	4904      	ldr	r1, [pc, #16]	@ (8000a10 <setADCChannel1+0x114>)
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <setADCChannel1+0x118>)
 8000a00:	f001 fdcc 	bl	800259c <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0

}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000e0 	.word	0x200000e0
 8000a14:	20000080 	.word	0x20000080

08000a18 <setADCChannel2>:

HAL_StatusTypeDef setADCChannel2(unsigned char channel){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	switch(channel) {
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b11      	cmp	r3, #17
 8000a26:	d86f      	bhi.n	8000b08 <setADCChannel2+0xf0>
 8000a28:	a201      	add	r2, pc, #4	@ (adr r2, 8000a30 <setADCChannel2+0x18>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a79 	.word	0x08000a79
 8000a34:	08000a81 	.word	0x08000a81
 8000a38:	08000a89 	.word	0x08000a89
 8000a3c:	08000a91 	.word	0x08000a91
 8000a40:	08000a99 	.word	0x08000a99
 8000a44:	08000aa1 	.word	0x08000aa1
 8000a48:	08000aa9 	.word	0x08000aa9
 8000a4c:	08000ab1 	.word	0x08000ab1
 8000a50:	08000ab9 	.word	0x08000ab9
 8000a54:	08000ac1 	.word	0x08000ac1
 8000a58:	08000ac9 	.word	0x08000ac9
 8000a5c:	08000ad1 	.word	0x08000ad1
 8000a60:	08000ad9 	.word	0x08000ad9
 8000a64:	08000ae1 	.word	0x08000ae1
 8000a68:	08000ae9 	.word	0x08000ae9
 8000a6c:	08000af1 	.word	0x08000af1
 8000a70:	08000af9 	.word	0x08000af9
 8000a74:	08000b01 	.word	0x08000b01
	        case 0:
	            sConfig2.Channel = ADC_CHANNEL_0;
 8000a78:	4b2c      	ldr	r3, [pc, #176]	@ (8000b2c <setADCChannel2+0x114>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
	            break;
 8000a7e:	e045      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 1:
	            sConfig2.Channel = ADC_CHANNEL_1;
 8000a80:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <setADCChannel2+0x114>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
	            break;
 8000a86:	e041      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 2:
	            sConfig2.Channel = ADC_CHANNEL_2;
 8000a88:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <setADCChannel2+0x114>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	601a      	str	r2, [r3, #0]
	            break;
 8000a8e:	e03d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 3:
	            sConfig2.Channel = ADC_CHANNEL_3;
 8000a90:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <setADCChannel2+0x114>)
 8000a92:	2203      	movs	r2, #3
 8000a94:	601a      	str	r2, [r3, #0]
	            break;
 8000a96:	e039      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 4:
	            sConfig2.Channel = ADC_CHANNEL_4;
 8000a98:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <setADCChannel2+0x114>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	601a      	str	r2, [r3, #0]
	            break;
 8000a9e:	e035      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 5:
	            sConfig2.Channel = ADC_CHANNEL_5;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <setADCChannel2+0x114>)
 8000aa2:	2205      	movs	r2, #5
 8000aa4:	601a      	str	r2, [r3, #0]
	            break;
 8000aa6:	e031      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 6:
	            sConfig2.Channel = ADC_CHANNEL_6;
 8000aa8:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <setADCChannel2+0x114>)
 8000aaa:	2206      	movs	r2, #6
 8000aac:	601a      	str	r2, [r3, #0]
	            break;
 8000aae:	e02d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 7:
	            sConfig2.Channel = ADC_CHANNEL_7;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <setADCChannel2+0x114>)
 8000ab2:	2207      	movs	r2, #7
 8000ab4:	601a      	str	r2, [r3, #0]
	            break;
 8000ab6:	e029      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 8:
	            sConfig2.Channel = ADC_CHANNEL_8;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <setADCChannel2+0x114>)
 8000aba:	2208      	movs	r2, #8
 8000abc:	601a      	str	r2, [r3, #0]
	            break;
 8000abe:	e025      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 9:
	            sConfig2.Channel = ADC_CHANNEL_9;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <setADCChannel2+0x114>)
 8000ac2:	2209      	movs	r2, #9
 8000ac4:	601a      	str	r2, [r3, #0]
	            break;
 8000ac6:	e021      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 10:
	            sConfig2.Channel = ADC_CHANNEL_10;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <setADCChannel2+0x114>)
 8000aca:	220a      	movs	r2, #10
 8000acc:	601a      	str	r2, [r3, #0]
	            break;
 8000ace:	e01d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 11:
	            sConfig2.Channel = ADC_CHANNEL_11;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <setADCChannel2+0x114>)
 8000ad2:	220b      	movs	r2, #11
 8000ad4:	601a      	str	r2, [r3, #0]
	            break;
 8000ad6:	e019      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 12:
	            sConfig2.Channel = ADC_CHANNEL_12;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <setADCChannel2+0x114>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
	            break;
 8000ade:	e015      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 13:
	            sConfig2.Channel = ADC_CHANNEL_13;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <setADCChannel2+0x114>)
 8000ae2:	220d      	movs	r2, #13
 8000ae4:	601a      	str	r2, [r3, #0]
	            break;
 8000ae6:	e011      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 14:
	            sConfig2.Channel = ADC_CHANNEL_14;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <setADCChannel2+0x114>)
 8000aea:	220e      	movs	r2, #14
 8000aec:	601a      	str	r2, [r3, #0]
	            break;
 8000aee:	e00d      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 15:
	            sConfig2.Channel = ADC_CHANNEL_15;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <setADCChannel2+0x114>)
 8000af2:	220f      	movs	r2, #15
 8000af4:	601a      	str	r2, [r3, #0]
	            break;
 8000af6:	e009      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 16:
	            sConfig2.Channel = ADC_CHANNEL_16;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <setADCChannel2+0x114>)
 8000afa:	2210      	movs	r2, #16
 8000afc:	601a      	str	r2, [r3, #0]
	            break;
 8000afe:	e005      	b.n	8000b0c <setADCChannel2+0xf4>
	        case 17:
	            sConfig2.Channel = ADC_CHANNEL_17;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <setADCChannel2+0x114>)
 8000b02:	2211      	movs	r2, #17
 8000b04:	601a      	str	r2, [r3, #0]
	            break;
 8000b06:	e001      	b.n	8000b0c <setADCChannel2+0xf4>
	        default:
	            return HAL_ERROR; // canal inválido
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e00a      	b.n	8000b22 <setADCChannel2+0x10a>
	    }

	    sConfig2.Rank = ADC_REGULAR_RANK_1;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <setADCChannel2+0x114>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	605a      	str	r2, [r3, #4]
	    sConfig2.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <setADCChannel2+0x114>)
 8000b14:	2205      	movs	r2, #5
 8000b16:	609a      	str	r2, [r3, #8]
	    return HAL_ADC_ConfigChannel(&hadc2, &sConfig2);
 8000b18:	4904      	ldr	r1, [pc, #16]	@ (8000b2c <setADCChannel2+0x114>)
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <setADCChannel2+0x118>)
 8000b1c:	f001 fd3e 	bl	800259c <HAL_ADC_ConfigChannel>
 8000b20:	4603      	mov	r3, r0

}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000ec 	.word	0x200000ec
 8000b30:	200000b0 	.word	0x200000b0

08000b34 <readADCValue1>:

uint16_t readADCValue1(unsigned char channelNumber) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]

    if (setADCChannel1(channelNumber) != HAL_OK) {
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fedb 	bl	80008fc <setADCChannel1>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <readADCValue1+0x1e>
        return 0xFFFF;  // erro
 8000b4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b50:	e031      	b.n	8000bb6 <readADCValue1+0x82>
    }
    delay_us(10);
 8000b52:	200a      	movs	r0, #10
 8000b54:	f000 f91a 	bl	8000d8c <delay_us>
    uint32_t sum=0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Start(&hadc1);
 8000b5c:	4818      	ldr	r0, [pc, #96]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b5e:	f001 fb31 	bl	80021c4 <HAL_ADC_Start>
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	72fb      	strb	r3, [r7, #11]
 8000b66:	e017      	b.n	8000b98 <readADCValue1+0x64>
    	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	4814      	ldr	r0, [pc, #80]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b6e:	f001 fc03 	bl	8002378 <HAL_ADC_PollForConversion>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d005      	beq.n	8000b84 <readADCValue1+0x50>
    		HAL_ADC_Stop(&hadc1);
 8000b78:	4811      	ldr	r0, [pc, #68]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b7a:	f001 fbd1 	bl	8002320 <HAL_ADC_Stop>
    		return 0xFFFF;  // erro
 8000b7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b82:	e018      	b.n	8000bb6 <readADCValue1+0x82>
    	}
    	sum += HAL_ADC_GetValue(&hadc1);
 8000b84:	480e      	ldr	r0, [pc, #56]	@ (8000bc0 <readADCValue1+0x8c>)
 8000b86:	f001 fcfd 	bl	8002584 <HAL_ADC_GetValue>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000b92:	7afb      	ldrb	r3, [r7, #11]
 8000b94:	3301      	adds	r3, #1
 8000b96:	72fb      	strb	r3, [r7, #11]
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <readADCValue1+0x90>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	7afa      	ldrb	r2, [r7, #11]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d3e2      	bcc.n	8000b68 <readADCValue1+0x34>
    }
    HAL_ADC_Stop(&hadc1);
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <readADCValue1+0x8c>)
 8000ba4:	f001 fbbc 	bl	8002320 <HAL_ADC_Stop>
    return (uint16_t)(sum / readings_qtt);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <readADCValue1+0x90>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bb4:	b29b      	uxth	r3, r3
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000080 	.word	0x20000080
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <readADCValue2>:

uint16_t readADCValue2(unsigned char channelNumber) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
    if (setADCChannel2(channelNumber) != HAL_OK) {
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff1f 	bl	8000a18 <setADCChannel2>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <readADCValue2+0x1e>
        return 0xFFFF;  // erro
 8000be0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be4:	e031      	b.n	8000c4a <readADCValue2+0x82>
    }
    delay_us(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f000 f8d0 	bl	8000d8c <delay_us>
    uint32_t sum=0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Start(&hadc2);
 8000bf0:	4818      	ldr	r0, [pc, #96]	@ (8000c54 <readADCValue2+0x8c>)
 8000bf2:	f001 fae7 	bl	80021c4 <HAL_ADC_Start>
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	72fb      	strb	r3, [r7, #11]
 8000bfa:	e017      	b.n	8000c2c <readADCValue2+0x64>
        if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) != HAL_OK) {
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	4814      	ldr	r0, [pc, #80]	@ (8000c54 <readADCValue2+0x8c>)
 8000c02:	f001 fbb9 	bl	8002378 <HAL_ADC_PollForConversion>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d005      	beq.n	8000c18 <readADCValue2+0x50>
            HAL_ADC_Stop(&hadc2);
 8000c0c:	4811      	ldr	r0, [pc, #68]	@ (8000c54 <readADCValue2+0x8c>)
 8000c0e:	f001 fb87 	bl	8002320 <HAL_ADC_Stop>
            return 0xFFFF;
 8000c12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c16:	e018      	b.n	8000c4a <readADCValue2+0x82>
        }
        sum += HAL_ADC_GetValue(&hadc2);
 8000c18:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <readADCValue2+0x8c>)
 8000c1a:	f001 fcb3 	bl	8002584 <HAL_ADC_GetValue>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < readings_qtt; i++) {
 8000c26:	7afb      	ldrb	r3, [r7, #11]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	72fb      	strb	r3, [r7, #11]
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <readADCValue2+0x90>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	7afa      	ldrb	r2, [r7, #11]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d3e2      	bcc.n	8000bfc <readADCValue2+0x34>
    }
    HAL_ADC_Stop(&hadc2);
 8000c36:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <readADCValue2+0x8c>)
 8000c38:	f001 fb72 	bl	8002320 <HAL_ADC_Stop>
    return (uint16_t)(sum / readings_qtt);
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <readADCValue2+0x90>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c48:	b29b      	uxth	r3, r3
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000b0 	.word	0x200000b0
 8000c58:	20000000 	.word	0x20000000

08000c5c <readSensor>:

uint16_t readSensor(unsigned char mux_pin, unsigned char index){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	unsigned char mux = mux_pin>>4;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	091b      	lsrs	r3, r3, #4
 8000c70:	737b      	strb	r3, [r7, #13]
	unsigned char porta  = mux_pin&0b1111;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	733b      	strb	r3, [r7, #12]
	_Bool s0 = porta&0b0001;
 8000c7a:	7b3b      	ldrb	r3, [r7, #12]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	bf14      	ite	ne
 8000c84:	2301      	movne	r3, #1
 8000c86:	2300      	moveq	r3, #0
 8000c88:	72fb      	strb	r3, [r7, #11]
	_Bool s1 = (porta&0b0010)>>1;
 8000c8a:	7b3b      	ldrb	r3, [r7, #12]
 8000c8c:	105b      	asrs	r3, r3, #1
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf14      	ite	ne
 8000c96:	2301      	movne	r3, #1
 8000c98:	2300      	moveq	r3, #0
 8000c9a:	72bb      	strb	r3, [r7, #10]
	_Bool s2 = (porta&0b0100)>>2;
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	109b      	asrs	r3, r3, #2
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf14      	ite	ne
 8000ca8:	2301      	movne	r3, #1
 8000caa:	2300      	moveq	r3, #0
 8000cac:	727b      	strb	r3, [r7, #9]
	_Bool s3 = (porta&0b1000)>>3;
 8000cae:	7b3b      	ldrb	r3, [r7, #12]
 8000cb0:	10db      	asrs	r3, r3, #3
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf14      	ite	ne
 8000cba:	2301      	movne	r3, #1
 8000cbc:	2300      	moveq	r3, #0
 8000cbe:	723b      	strb	r3, [r7, #8]

	HAL_GPIO_WritePin(EN1_GPIO, EN1_PIN, GPIO_PIN_SET); // EN1 (B4)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	482f      	ldr	r0, [pc, #188]	@ (8000d84 <readSensor+0x128>)
 8000cc6:	f002 fa91 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO, EN2_PIN, GPIO_PIN_SET); // EN2 (B3)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2108      	movs	r1, #8
 8000cce:	482d      	ldr	r0, [pc, #180]	@ (8000d84 <readSensor+0x128>)
 8000cd0:	f002 fa8c 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO, EN3_PIN, GPIO_PIN_SET); // EN3 (A15)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cda:	482b      	ldr	r0, [pc, #172]	@ (8000d88 <readSensor+0x12c>)
 8000cdc:	f002 fa86 	bl	80031ec <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(S0_GPIO, S0_PIN, s0);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	2180      	movs	r1, #128	@ 0x80
 8000ce6:	4827      	ldr	r0, [pc, #156]	@ (8000d84 <readSensor+0x128>)
 8000ce8:	f002 fa80 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S1_GPIO, S1_PIN, s1);
 8000cec:	7abb      	ldrb	r3, [r7, #10]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cf4:	4823      	ldr	r0, [pc, #140]	@ (8000d84 <readSensor+0x128>)
 8000cf6:	f002 fa79 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO, S2_PIN, s2);
 8000cfa:	7a7b      	ldrb	r3, [r7, #9]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	2120      	movs	r1, #32
 8000d00:	4820      	ldr	r0, [pc, #128]	@ (8000d84 <readSensor+0x128>)
 8000d02:	f002 fa73 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO, S3_PIN, s3);
 8000d06:	7a3b      	ldrb	r3, [r7, #8]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2140      	movs	r1, #64	@ 0x40
 8000d0c:	481d      	ldr	r0, [pc, #116]	@ (8000d84 <readSensor+0x128>)
 8000d0e:	f002 fa6d 	bl	80031ec <HAL_GPIO_WritePin>

	uint16_t value;
	switch (mux) {
 8000d12:	7b7b      	ldrb	r3, [r7, #13]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d01c      	beq.n	8000d52 <readSensor+0xf6>
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	dc26      	bgt.n	8000d6a <readSensor+0x10e>
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d002      	beq.n	8000d26 <readSensor+0xca>
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d00b      	beq.n	8000d3c <readSensor+0xe0>
	        case 3:
	            HAL_GPIO_WritePin(EN3_GPIO, EN3_PIN, GPIO_PIN_RESET); // Ativa EN3 (A15)
	            value = readADCValue1(3);
	            break;
	        default:
	            break;
 8000d24:	e021      	b.n	8000d6a <readSensor+0x10e>
	            HAL_GPIO_WritePin(EN1_GPIO, EN1_PIN, GPIO_PIN_RESET); // Ativa EN1 (B4)
 8000d26:	2200      	movs	r2, #0
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4816      	ldr	r0, [pc, #88]	@ (8000d84 <readSensor+0x128>)
 8000d2c:	f002 fa5e 	bl	80031ec <HAL_GPIO_WritePin>
	            value = readADCValue1(1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff feff 	bl	8000b34 <readADCValue1>
 8000d36:	4603      	mov	r3, r0
 8000d38:	81fb      	strh	r3, [r7, #14]
	            break;
 8000d3a:	e017      	b.n	8000d6c <readSensor+0x110>
	            HAL_GPIO_WritePin(EN2_GPIO, EN2_PIN, GPIO_PIN_RESET); // Ativa EN2 (B3)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2108      	movs	r1, #8
 8000d40:	4810      	ldr	r0, [pc, #64]	@ (8000d84 <readSensor+0x128>)
 8000d42:	f002 fa53 	bl	80031ec <HAL_GPIO_WritePin>
	            value = readADCValue1(2);
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff fef4 	bl	8000b34 <readADCValue1>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	81fb      	strh	r3, [r7, #14]
	            break;
 8000d50:	e00c      	b.n	8000d6c <readSensor+0x110>
	            HAL_GPIO_WritePin(EN3_GPIO, EN3_PIN, GPIO_PIN_RESET); // Ativa EN3 (A15)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d58:	480b      	ldr	r0, [pc, #44]	@ (8000d88 <readSensor+0x12c>)
 8000d5a:	f002 fa47 	bl	80031ec <HAL_GPIO_WritePin>
	            value = readADCValue1(3);
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f7ff fee8 	bl	8000b34 <readADCValue1>
 8000d64:	4603      	mov	r3, r0
 8000d66:	81fb      	strh	r3, [r7, #14]
	            break;
 8000d68:	e000      	b.n	8000d6c <readSensor+0x110>
	            break;
 8000d6a:	bf00      	nop
	    }
	return returnAvgData(value,index);
 8000d6c:	79ba      	ldrb	r2, [r7, #6]
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f826 	bl	8000dc4 <returnAvgData>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40010c00 	.word	0x40010c00
 8000d88:	40010800 	.word	0x40010800

08000d8c <delay_us>:

void delay_us(unsigned short us)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <delay_us+0x34>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim1);
 8000d9e:	4808      	ldr	r0, [pc, #32]	@ (8000dc0 <delay_us+0x34>)
 8000da0:	f003 f838 	bl	8003e14 <HAL_TIM_Base_Start>

    while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000da4:	bf00      	nop
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <delay_us+0x34>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3f9      	bcc.n	8000da6 <delay_us+0x1a>

    HAL_TIM_Base_Stop(&htim1);
 8000db2:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <delay_us+0x34>)
 8000db4:	f003 f878 	bl	8003ea8 <HAL_TIM_Base_Stop>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000038c 	.word	0x2000038c

08000dc4 <returnAvgData>:

uint16_t returnAvgData(uint16_t data, uint8_t index){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	460a      	mov	r2, r1
 8000dce:	80fb      	strh	r3, [r7, #6]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	717b      	strb	r3, [r7, #5]
	uint8_t weight = 3;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	743b      	strb	r3, [r7, #16]
	uint32_t sum=data*weight;
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	7c3a      	ldrb	r2, [r7, #16]
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
  float factor = 0.95;
 8000de2:	4b60      	ldr	r3, [pc, #384]	@ (8000f64 <returnAvgData+0x1a0>)
 8000de4:	60fb      	str	r3, [r7, #12]
	uint8_t n = weight;
 8000de6:	7c3b      	ldrb	r3, [r7, #16]
 8000de8:	74fb      	strb	r3, [r7, #19]
	for (uint8_t i=0;i<sensor_buffer_size;i++){
 8000dea:	2300      	movs	r3, #0
 8000dec:	74bb      	strb	r3, [r7, #18]
 8000dee:	e07c      	b.n	8000eea <returnAvgData+0x126>
		if (sensorData[index][i]==0xFFFF){
 8000df0:	797a      	ldrb	r2, [r7, #5]
 8000df2:	7cb9      	ldrb	r1, [r7, #18]
 8000df4:	485c      	ldr	r0, [pc, #368]	@ (8000f68 <returnAvgData+0x1a4>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d113      	bne.n	8000e32 <returnAvgData+0x6e>
			sensorData[index][i]=data;
 8000e0a:	797a      	ldrb	r2, [r7, #5]
 8000e0c:	7cb9      	ldrb	r1, [r7, #18]
 8000e0e:	4856      	ldr	r0, [pc, #344]	@ (8000f68 <returnAvgData+0x1a4>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	88fa      	ldrh	r2, [r7, #6]
 8000e1a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			return sensorData[index][i];
 8000e1e:	797a      	ldrb	r2, [r7, #5]
 8000e20:	7cb9      	ldrb	r1, [r7, #18]
 8000e22:	4851      	ldr	r0, [pc, #324]	@ (8000f68 <returnAvgData+0x1a4>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e30:	e094      	b.n	8000f5c <returnAvgData+0x198>
		}
		else{
      if (sensorData[index][i]>(factor*data)&&sensorData[index][i]<((1+(1-factor))*data)){
 8000e32:	797a      	ldrb	r2, [r7, #5]
 8000e34:	7cb9      	ldrb	r1, [r7, #18]
 8000e36:	484c      	ldr	r0, [pc, #304]	@ (8000f68 <returnAvgData+0x1a4>)
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fa3d 	bl	80002c4 <__aeabi_i2f>
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fa38 	bl	80002c4 <__aeabi_i2f>
 8000e54:	4603      	mov	r3, r0
 8000e56:	68f9      	ldr	r1, [r7, #12]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fa87 	bl	800036c <__aeabi_fmul>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4619      	mov	r1, r3
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fc3e 	bl	80006e4 <__aeabi_fcmpgt>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d03a      	beq.n	8000ee4 <returnAvgData+0x120>
 8000e6e:	797a      	ldrb	r2, [r7, #5]
 8000e70:	7cb9      	ldrb	r1, [r7, #18]
 8000e72:	483d      	ldr	r0, [pc, #244]	@ (8000f68 <returnAvgData+0x1a4>)
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fa1f 	bl	80002c4 <__aeabi_i2f>
 8000e86:	4604      	mov	r4, r0
 8000e88:	68f9      	ldr	r1, [r7, #12]
 8000e8a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000e8e:	f7ff f963 	bl	8000158 <__aeabi_fsub>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff f95f 	bl	800015c <__addsf3>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461d      	mov	r5, r3
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fa0d 	bl	80002c4 <__aeabi_i2f>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f7ff fa5c 	bl	800036c <__aeabi_fmul>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f7ff fbf5 	bl	80006a8 <__aeabi_fcmplt>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00f      	beq.n	8000ee4 <returnAvgData+0x120>
			sum = sum+sensorData[index][i];
 8000ec4:	797a      	ldrb	r2, [r7, #5]
 8000ec6:	7cb9      	ldrb	r1, [r7, #18]
 8000ec8:	4827      	ldr	r0, [pc, #156]	@ (8000f68 <returnAvgData+0x1a4>)
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
			n++;
 8000ede:	7cfb      	ldrb	r3, [r7, #19]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	74fb      	strb	r3, [r7, #19]
	for (uint8_t i=0;i<sensor_buffer_size;i++){
 8000ee4:	7cbb      	ldrb	r3, [r7, #18]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	74bb      	strb	r3, [r7, #18]
 8000eea:	7cbb      	ldrb	r3, [r7, #18]
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	f67f af7f 	bls.w	8000df0 <returnAvgData+0x2c>
      }
		}
	}
  for (uint8_t i=0;i<sensor_buffer_size-1;i++){
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	747b      	strb	r3, [r7, #17]
 8000ef6:	e016      	b.n	8000f26 <returnAvgData+0x162>
    sensorData[index][i]=sensorData[index][i+1];
 8000ef8:	7979      	ldrb	r1, [r7, #5]
 8000efa:	7c7b      	ldrb	r3, [r7, #17]
 8000efc:	1c5c      	adds	r4, r3, #1
 8000efe:	797a      	ldrb	r2, [r7, #5]
 8000f00:	7c78      	ldrb	r0, [r7, #17]
 8000f02:	4d19      	ldr	r5, [pc, #100]	@ (8000f68 <returnAvgData+0x1a4>)
 8000f04:	460b      	mov	r3, r1
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	4423      	add	r3, r4
 8000f0c:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8000f10:	4915      	ldr	r1, [pc, #84]	@ (8000f68 <returnAvgData+0x1a4>)
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	4403      	add	r3, r0
 8000f1a:	4622      	mov	r2, r4
 8000f1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint8_t i=0;i<sensor_buffer_size-1;i++){
 8000f20:	7c7b      	ldrb	r3, [r7, #17]
 8000f22:	3301      	adds	r3, #1
 8000f24:	747b      	strb	r3, [r7, #17]
 8000f26:	7c7b      	ldrb	r3, [r7, #17]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d9e5      	bls.n	8000ef8 <returnAvgData+0x134>
  }
	sensorData[index][sensor_buffer_size-1]=sum/n;
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f34:	797a      	ldrb	r2, [r7, #5]
 8000f36:	b298      	uxth	r0, r3
 8000f38:	490b      	ldr	r1, [pc, #44]	@ (8000f68 <returnAvgData+0x1a4>)
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	440b      	add	r3, r1
 8000f44:	3308      	adds	r3, #8
 8000f46:	4602      	mov	r2, r0
 8000f48:	801a      	strh	r2, [r3, #0]
	return sensorData[index][sensor_buffer_size-1];
 8000f4a:	797a      	ldrb	r2, [r7, #5]
 8000f4c:	4906      	ldr	r1, [pc, #24]	@ (8000f68 <returnAvgData+0x1a4>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	440b      	add	r3, r1
 8000f58:	3308      	adds	r3, #8
 8000f5a:	881b      	ldrh	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bdb0      	pop	{r4, r5, r7, pc}
 8000f64:	3f733333 	.word	0x3f733333
 8000f68:	200000f8 	.word	0x200000f8

08000f6c <setAvgDataEmpty>:

void setAvgDataEmpty(){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<sensor_qtt;i++){
 8000f72:	2300      	movs	r3, #0
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	e016      	b.n	8000fa6 <setAvgDataEmpty+0x3a>
		for (uint8_t j=0;j<sensor_buffer_size;j++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	71bb      	strb	r3, [r7, #6]
 8000f7c:	e00d      	b.n	8000f9a <setAvgDataEmpty+0x2e>
			sensorData[i][j]=0xFFFF;
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	79b9      	ldrb	r1, [r7, #6]
 8000f82:	480d      	ldr	r0, [pc, #52]	@ (8000fb8 <setAvgDataEmpty+0x4c>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f90:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (uint8_t j=0;j<sensor_buffer_size;j++){
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	3301      	adds	r3, #1
 8000f98:	71bb      	strb	r3, [r7, #6]
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d9ee      	bls.n	8000f7e <setAvgDataEmpty+0x12>
	for (uint8_t i=0;i<sensor_qtt;i++){
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b24      	cmp	r3, #36	@ 0x24
 8000faa:	d9e5      	bls.n	8000f78 <setAvgDataEmpty+0xc>
		}
	}
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	200000f8 	.word	0x200000f8

08000fbc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000fc0:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fc2:	4a18      	ldr	r2, [pc, #96]	@ (8001024 <MX_CAN_Init+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fc8:	2204      	movs	r2, #4
 8000fca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fda:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000fde:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fe2:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000fe6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <MX_CAN_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_CAN_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <MX_CAN_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_CAN_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001000:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <MX_CAN_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_CAN_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800100c:	4804      	ldr	r0, [pc, #16]	@ (8001020 <MX_CAN_Init+0x64>)
 800100e:	f001 fc58 	bl	80028c2 <HAL_CAN_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001018:	f000 fd4e 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000026c 	.word	0x2000026c
 8001024:	40006400 	.word	0x40006400

08001028 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a1c      	ldr	r2, [pc, #112]	@ (80010b4 <HAL_CAN_MspInit+0x8c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d131      	bne.n	80010ac <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001048:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	4a1a      	ldr	r2, [pc, #104]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 800104e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001052:	61d3      	str	r3, [r2, #28]
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_CAN_MspInit+0x90>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001078:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800107c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	480b      	ldr	r0, [pc, #44]	@ (80010bc <HAL_CAN_MspInit+0x94>)
 800108e:	f001 ff29 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <HAL_CAN_MspInit+0x94>)
 80010a8:	f001 ff1c 	bl	8002ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40006400 	.word	0x40006400
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800

080010c0 <sendCANString>:


const unsigned char DEBUG_ID = 0x7B;
const unsigned char DEBUG_DLC = 8;

HAL_StatusTypeDef sendCANString(const char* message){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	@ 0x38
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	unsigned long txMailbox;
	unsigned char txData[8];
	
	HAL_StatusTypeDef status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	
	txHeader.StdId = DEBUG_ID;
 80010ce:	237b      	movs	r3, #123	@ 0x7b
 80010d0:	61bb      	str	r3, [r7, #24]
    txHeader.ExtId = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    txHeader.IDE = CAN_ID_STD;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
    txHeader.RTR = CAN_RTR_DATA;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = DEBUG_DLC;
 80010de:	2308      	movs	r3, #8
 80010e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.TransmitGlobalTime = DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	
	unsigned char len = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while (1) {
        if (message[len] == '\0') {
 80010ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d109      	bne.n	8001110 <sendCANString+0x50>
        	  len++;
 80010fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001100:	3301      	adds	r3, #1
 8001102:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
              break;
 8001106:	bf00      	nop
        }
        len++;
    }
	
	for (unsigned char i = 0; i < len; i += 8) {
 8001108:	2300      	movs	r3, #0
 800110a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800110e:	e060      	b.n	80011d2 <sendCANString+0x112>
        len++;
 8001110:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001114:	3301      	adds	r3, #1
 8001116:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if (message[len] == '\0') {
 800111a:	e7e8      	b.n	80010ee <sendCANString+0x2e>
        txHeader.DLC = (len - i > 8) ? 8 : (len - i);
 800111c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001120:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b08      	cmp	r3, #8
 8001128:	bfa8      	it	ge
 800112a:	2308      	movge	r3, #8
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (unsigned char j = 0; j < 8; j++) {
 800112e:	2300      	movs	r3, #0
 8001130:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001134:	e00b      	b.n	800114e <sendCANString+0x8e>
            txData[j] = 0;
 8001136:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800113a:	3338      	adds	r3, #56	@ 0x38
 800113c:	443b      	add	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	f803 2c2c 	strb.w	r2, [r3, #-44]
        for (unsigned char j = 0; j < 8; j++) {
 8001144:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001148:	3301      	adds	r3, #1
 800114a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800114e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001152:	2b07      	cmp	r3, #7
 8001154:	d9ef      	bls.n	8001136 <sendCANString+0x76>
        }
        for (unsigned char j = 0; j < txHeader.DLC; j++) {
 8001156:	2300      	movs	r3, #0
 8001158:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800115c:	e013      	b.n	8001186 <sendCANString+0xc6>
            txData[j] = message[i + j];
 800115e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001162:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001166:	4413      	add	r3, r2
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	441a      	add	r2, r3
 800116e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001172:	7812      	ldrb	r2, [r2, #0]
 8001174:	3338      	adds	r3, #56	@ 0x38
 8001176:	443b      	add	r3, r7
 8001178:	f803 2c2c 	strb.w	r2, [r3, #-44]
        for (unsigned char j = 0; j < txHeader.DLC; j++) {
 800117c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001180:	3301      	adds	r3, #1
 8001182:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001186:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800118a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118c:	429a      	cmp	r2, r3
 800118e:	d3e6      	bcc.n	800115e <sendCANString+0x9e>
        }
        status = HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	f107 020c 	add.w	r2, r7, #12
 8001198:	f107 0118 	add.w	r1, r7, #24
 800119c:	4812      	ldr	r0, [pc, #72]	@ (80011e8 <sendCANString+0x128>)
 800119e:	f001 fccf 	bl	8002b40 <HAL_CAN_AddTxMessage>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (status != HAL_OK) {
 80011a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <sendCANString+0xf6>
            return status;
 80011b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011b4:	e014      	b.n	80011e0 <sendCANString+0x120>
        }
        while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox));
 80011b6:	bf00      	nop
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	4619      	mov	r1, r3
 80011bc:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <sendCANString+0x128>)
 80011be:	f001 fd8e 	bl	8002cde <HAL_CAN_IsTxMessagePending>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f7      	bne.n	80011b8 <sendCANString+0xf8>
	for (unsigned char i = 0; i < len; i += 8) {
 80011c8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80011cc:	3308      	adds	r3, #8
 80011ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80011d2:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80011d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011da:	429a      	cmp	r2, r3
 80011dc:	d39e      	bcc.n	800111c <sendCANString+0x5c>
    }
	return HAL_OK;
 80011de:	2300      	movs	r3, #0

}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3738      	adds	r7, #56	@ 0x38
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000026c 	.word	0x2000026c

080011ec <sendCANData>:


HAL_StatusTypeDef sendCANData(unsigned char message[8], unsigned char CAN_ID, unsigned char CAN_DLC){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
 80011f8:	4613      	mov	r3, r2
 80011fa:	70bb      	strb	r3, [r7, #2]
	CAN_TxHeaderTypeDef txHeader;
	unsigned long txMailbox;

	HAL_StatusTypeDef status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	txHeader.StdId = CAN_ID;
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	60fb      	str	r3, [r7, #12]
    txHeader.ExtId = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
    txHeader.IDE = CAN_ID_STD;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
    txHeader.RTR = CAN_RTR_DATA;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
    txHeader.DLC = CAN_DLC;
 8001212:	78bb      	ldrb	r3, [r7, #2]
 8001214:	61fb      	str	r3, [r7, #28]
    txHeader.TransmitGlobalTime = DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3020 	strb.w	r3, [r7, #32]

    status = HAL_CAN_AddTxMessage(&hcan, &txHeader, message, &txMailbox);
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	f107 010c 	add.w	r1, r7, #12
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	480d      	ldr	r0, [pc, #52]	@ (800125c <sendCANData+0x70>)
 8001228:	f001 fc8a 	bl	8002b40 <HAL_CAN_AddTxMessage>
 800122c:	4603      	mov	r3, r0
 800122e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8001232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <sendCANData+0x54>
        return status;
 800123a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800123e:	e009      	b.n	8001254 <sendCANData+0x68>
    }
    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){}
 8001240:	bf00      	nop
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	4619      	mov	r1, r3
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <sendCANData+0x70>)
 8001248:	f001 fd49 	bl	8002cde <HAL_CAN_IsTxMessagePending>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f7      	bne.n	8001242 <sendCANData+0x56>
	return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3728      	adds	r7, #40	@ 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000026c 	.word	0x2000026c

08001260 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	setAvgDataEmpty();
 8001264:	f7ff fe82 	bl	8000f6c <setAvgDataEmpty>
	hal_message=setupSensors();
 8001268:	f000 fc2c 	bl	8001ac4 <setupSensors>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <MX_FREERTOS_Init+0x8c>)
 8001272:	701a      	strb	r2, [r3, #0]

	Message_Debug_Time = HAL_GetTick();
 8001274:	f000 fec4 	bl	8002000 <HAL_GetTick>
 8001278:	4603      	mov	r3, r0
 800127a:	4a1d      	ldr	r2, [pc, #116]	@ (80012f0 <MX_FREERTOS_Init+0x90>)
 800127c:	6013      	str	r3, [r2, #0]

	DATA_01.time = HAL_GetTick();
 800127e:	f000 febf 	bl	8002000 <HAL_GetTick>
 8001282:	4603      	mov	r3, r0
 8001284:	4a1b      	ldr	r2, [pc, #108]	@ (80012f4 <MX_FREERTOS_Init+0x94>)
 8001286:	6013      	str	r3, [r2, #0]
	DATA_02.time = HAL_GetTick();
 8001288:	f000 feba 	bl	8002000 <HAL_GetTick>
 800128c:	4603      	mov	r3, r0
 800128e:	4a1a      	ldr	r2, [pc, #104]	@ (80012f8 <MX_FREERTOS_Init+0x98>)
 8001290:	6013      	str	r3, [r2, #0]
	DATA_03.time = HAL_GetTick();
 8001292:	f000 feb5 	bl	8002000 <HAL_GetTick>
 8001296:	4603      	mov	r3, r0
 8001298:	4a18      	ldr	r2, [pc, #96]	@ (80012fc <MX_FREERTOS_Init+0x9c>)
 800129a:	6013      	str	r3, [r2, #0]
	DATA_04.time = HAL_GetTick();
 800129c:	f000 feb0 	bl	8002000 <HAL_GetTick>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <MX_FREERTOS_Init+0xa0>)
 80012a4:	6013      	str	r3, [r2, #0]
	DATA_05.time = HAL_GetTick();
 80012a6:	f000 feab 	bl	8002000 <HAL_GetTick>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a15      	ldr	r2, [pc, #84]	@ (8001304 <MX_FREERTOS_Init+0xa4>)
 80012ae:	6013      	str	r3, [r2, #0]
	DATA_06.time = HAL_GetTick();
 80012b0:	f000 fea6 	bl	8002000 <HAL_GetTick>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <MX_FREERTOS_Init+0xa8>)
 80012b8:	6013      	str	r3, [r2, #0]
	DATA_07.time = HAL_GetTick();
 80012ba:	f000 fea1 	bl	8002000 <HAL_GetTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a12      	ldr	r2, [pc, #72]	@ (800130c <MX_FREERTOS_Init+0xac>)
 80012c2:	6013      	str	r3, [r2, #0]
	DATA_08.time = HAL_GetTick();
 80012c4:	f000 fe9c 	bl	8002000 <HAL_GetTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a11      	ldr	r2, [pc, #68]	@ (8001310 <MX_FREERTOS_Init+0xb0>)
 80012cc:	6013      	str	r3, [r2, #0]
	DATA_09.time = HAL_GetTick();
 80012ce:	f000 fe97 	bl	8002000 <HAL_GetTick>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <MX_FREERTOS_Init+0xb4>)
 80012d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensor_Task */
  sensor_TaskHandle = osThreadNew(sensorTask, NULL, &sensor_Task_attributes);
 80012d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001318 <MX_FREERTOS_Init+0xb8>)
 80012da:	2100      	movs	r1, #0
 80012dc:	480f      	ldr	r0, [pc, #60]	@ (800131c <MX_FREERTOS_Init+0xbc>)
 80012de:	f003 fa37 	bl	8004750 <osThreadNew>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001320 <MX_FREERTOS_Init+0xc0>)
 80012e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000294 	.word	0x20000294
 80012f0:	200002a0 	.word	0x200002a0
 80012f4:	200002a4 	.word	0x200002a4
 80012f8:	200002b4 	.word	0x200002b4
 80012fc:	200002c4 	.word	0x200002c4
 8001300:	200002d4 	.word	0x200002d4
 8001304:	200002e4 	.word	0x200002e4
 8001308:	200002f4 	.word	0x200002f4
 800130c:	20000304 	.word	0x20000304
 8001310:	20000314 	.word	0x20000314
 8001314:	20000324 	.word	0x20000324
 8001318:	080073bc 	.word	0x080073bc
 800131c:	08001325 	.word	0x08001325
 8001320:	20000298 	.word	0x20000298

08001324 <sensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensorTask */
void sensorTask(void *argument)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorTask */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800132c:	f004 fbd6 	bl	8005adc <xTaskGetTickCount>
 8001330:	4603      	mov	r3, r0
 8001332:	61fb      	str	r3, [r7, #28]
	uint16_t adc_value;
	char value[20];
  /* Infinite loop */
  for(;;)
  {
	RTOS_Time = HAL_GetTick();
 8001334:	f000 fe64 	bl	8002000 <HAL_GetTick>
 8001338:	6278      	str	r0, [r7, #36]	@ 0x24
	uint16_t v_ref = vRefValue(returnAvgData(readADCValue1(VREF_PIN),V_Ref_index));
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fbfa 	bl	8000b34 <readADCValue1>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b62      	ldr	r3, [pc, #392]	@ (80014d0 <sensorTask+0x1ac>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	4610      	mov	r0, r2
 800134c:	f7ff fd3a 	bl	8000dc4 <returnAvgData>
 8001350:	4603      	mov	r3, r0
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fc88 	bl	8001c68 <vRefValue>
 8001358:	4603      	mov	r3, r0
 800135a:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t data;
	if (RTOS_Time - Message_Debug_Time >= MESSAGE_DEBUG_REFRESH_RATE) {
 800135c:	4b5d      	ldr	r3, [pc, #372]	@ (80014d4 <sensorTask+0x1b0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	4a5c      	ldr	r2, [pc, #368]	@ (80014d8 <sensorTask+0x1b4>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	4293      	cmp	r3, r2
 800136a:	d302      	bcc.n	8001372 <sensorTask+0x4e>
		Message_Debug_Time = RTOS_Time;
 800136c:	4a59      	ldr	r2, [pc, #356]	@ (80014d4 <sensorTask+0x1b0>)
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	6013      	str	r3, [r2, #0]
		//sprintf(value, "%u$", adc_value);
		//sprintf(value, "%u$", v_ref);
		//hal_message = sendCANString(value);
		}

	if (RTOS_Time - DATA_01.time >= DATA_01.refresh_rate) {
 8001372:	4b5a      	ldr	r3, [pc, #360]	@ (80014dc <sensorTask+0x1b8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	4a58      	ldr	r2, [pc, #352]	@ (80014dc <sensorTask+0x1b8>)
 800137c:	7912      	ldrb	r2, [r2, #4]
 800137e:	4293      	cmp	r3, r2
 8001380:	f0c0 80c7 	bcc.w	8001512 <sensorTask+0x1ee>
	    DATA_01.time = RTOS_Time;
 8001384:	4a55      	ldr	r2, [pc, #340]	@ (80014dc <sensorTask+0x1b8>)
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	6013      	str	r3, [r2, #0]

	    data = vBatValue(returnAvgData(readADCValue2(VBAT_PIN),V_Bat_index));  // Tensao da Bateria
 800138a:	2004      	movs	r0, #4
 800138c:	f7ff fc1c 	bl	8000bc8 <readADCValue2>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b52      	ldr	r3, [pc, #328]	@ (80014e0 <sensorTask+0x1bc>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	4610      	mov	r0, r2
 800139c:	f7ff fd12 	bl	8000dc4 <returnAvgData>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fc30 	bl	8001c08 <vBatValue>
 80013a8:	4603      	mov	r3, r0
 80013aa:	843b      	strh	r3, [r7, #32]
	    DATA_01.data[0] = data&0xFF;
 80013ac:	8c3b      	ldrh	r3, [r7, #32]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b4a      	ldr	r3, [pc, #296]	@ (80014dc <sensorTask+0x1b8>)
 80013b2:	71da      	strb	r2, [r3, #7]
	    DATA_01.data[1] = (data>>8)&0x0F;
 80013b4:	8c3b      	ldrh	r3, [r7, #32]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b46      	ldr	r3, [pc, #280]	@ (80014dc <sensorTask+0x1b8>)
 80013c4:	721a      	strb	r2, [r3, #8]
	    data = readADCValue2(returnAvgData(TEMP_PIN,Temp_index));  // Sensor de Temperatura Interno
 80013c6:	4b47      	ldr	r3, [pc, #284]	@ (80014e4 <sensorTask+0x1c0>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4619      	mov	r1, r3
 80013cc:	2006      	movs	r0, #6
 80013ce:	f7ff fcf9 	bl	8000dc4 <returnAvgData>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fbf6 	bl	8000bc8 <readADCValue2>
 80013dc:	4603      	mov	r3, r0
 80013de:	843b      	strh	r3, [r7, #32]
	    DATA_01.data[1]|=(data&0x0F)<<4;
 80013e0:	4b3e      	ldr	r3, [pc, #248]	@ (80014dc <sensorTask+0x1b8>)
 80013e2:	7a1b      	ldrb	r3, [r3, #8]
 80013e4:	b25a      	sxtb	r2, r3
 80013e6:	8c3b      	ldrh	r3, [r7, #32]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b39      	ldr	r3, [pc, #228]	@ (80014dc <sensorTask+0x1b8>)
 80013f6:	721a      	strb	r2, [r3, #8]
	    DATA_01.data[2] = (data>>4)&0xFF;
 80013f8:	8c3b      	ldrh	r3, [r7, #32]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b36      	ldr	r3, [pc, #216]	@ (80014dc <sensorTask+0x1b8>)
 8001402:	725a      	strb	r2, [r3, #9]
	    DATA_01.data[3] = v_ref&0xFF;    // Tensao Referencia
 8001404:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <sensorTask+0x1b8>)
 800140a:	729a      	strb	r2, [r3, #10]
	    DATA_01.data[4] = (v_ref>>8)&0x0F;
 800140c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	b29b      	uxth	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <sensorTask+0x1b8>)
 800141c:	72da      	strb	r2, [r3, #11]
	    data = readADCValue2(returnAvgData(GEAR_PIN,Gear_index));  // Sensor de Marcha
 800141e:	4b32      	ldr	r3, [pc, #200]	@ (80014e8 <sensorTask+0x1c4>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	2005      	movs	r0, #5
 8001426:	f7ff fccd 	bl	8000dc4 <returnAvgData>
 800142a:	4603      	mov	r3, r0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fbca 	bl	8000bc8 <readADCValue2>
 8001434:	4603      	mov	r3, r0
 8001436:	843b      	strh	r3, [r7, #32]
	    if (data>3682){
 8001438:	8c3b      	ldrh	r3, [r7, #32]
 800143a:	f640 6262 	movw	r2, #3682	@ 0xe62
 800143e:	4293      	cmp	r3, r2
 8001440:	d907      	bls.n	8001452 <sensorTask+0x12e>
	    	DATA_01.data[4] |= (7<<4);
 8001442:	4b26      	ldr	r3, [pc, #152]	@ (80014dc <sensorTask+0x1b8>)
 8001444:	7adb      	ldrb	r3, [r3, #11]
 8001446:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <sensorTask+0x1b8>)
 800144e:	72da      	strb	r2, [r3, #11]
 8001450:	e053      	b.n	80014fa <sensorTask+0x1d6>
	    	}
	    else if (data>2995){
 8001452:	8c3b      	ldrh	r3, [r7, #32]
 8001454:	f640 32b3 	movw	r2, #2995	@ 0xbb3
 8001458:	4293      	cmp	r3, r2
 800145a:	d907      	bls.n	800146c <sensorTask+0x148>
	    	DATA_01.data[4] |= (1<<4);
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <sensorTask+0x1b8>)
 800145e:	7adb      	ldrb	r3, [r3, #11]
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <sensorTask+0x1b8>)
 8001468:	72da      	strb	r2, [r3, #11]
 800146a:	e046      	b.n	80014fa <sensorTask+0x1d6>
	    }
	    else if (data>2432){
 800146c:	8c3b      	ldrh	r3, [r7, #32]
 800146e:	f5b3 6f18 	cmp.w	r3, #2432	@ 0x980
 8001472:	d907      	bls.n	8001484 <sensorTask+0x160>
	    	DATA_01.data[4] |= (2<<4);
 8001474:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <sensorTask+0x1b8>)
 8001476:	7adb      	ldrb	r3, [r3, #11]
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <sensorTask+0x1b8>)
 8001480:	72da      	strb	r2, [r3, #11]
 8001482:	e03a      	b.n	80014fa <sensorTask+0x1d6>
	    }
	    else if (data>1852){
 8001484:	8c3b      	ldrh	r3, [r7, #32]
 8001486:	f240 723c 	movw	r2, #1852	@ 0x73c
 800148a:	4293      	cmp	r3, r2
 800148c:	d907      	bls.n	800149e <sensorTask+0x17a>
	    	DATA_01.data[4] |= (3<<4);
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <sensorTask+0x1b8>)
 8001490:	7adb      	ldrb	r3, [r3, #11]
 8001492:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <sensorTask+0x1b8>)
 800149a:	72da      	strb	r2, [r3, #11]
 800149c:	e02d      	b.n	80014fa <sensorTask+0x1d6>
	    }
	    else if (data>1249){
 800149e:	8c3b      	ldrh	r3, [r7, #32]
 80014a0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d907      	bls.n	80014b8 <sensorTask+0x194>
	    	DATA_01.data[4] |= (4<<4);
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <sensorTask+0x1b8>)
 80014aa:	7adb      	ldrb	r3, [r3, #11]
 80014ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <sensorTask+0x1b8>)
 80014b4:	72da      	strb	r2, [r3, #11]
 80014b6:	e020      	b.n	80014fa <sensorTask+0x1d6>
	    }
	    else if (data>672){
 80014b8:	8c3b      	ldrh	r3, [r7, #32]
 80014ba:	f5b3 7f28 	cmp.w	r3, #672	@ 0x2a0
 80014be:	d915      	bls.n	80014ec <sensorTask+0x1c8>
	    	DATA_01.data[4] |= (5<<4);
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <sensorTask+0x1b8>)
 80014c2:	7adb      	ldrb	r3, [r3, #11]
 80014c4:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <sensorTask+0x1b8>)
 80014cc:	72da      	strb	r2, [r3, #11]
 80014ce:	e014      	b.n	80014fa <sensorTask+0x1d6>
 80014d0:	080073ef 	.word	0x080073ef
 80014d4:	200002a0 	.word	0x200002a0
 80014d8:	080073e2 	.word	0x080073e2
 80014dc:	200002a4 	.word	0x200002a4
 80014e0:	080073f0 	.word	0x080073f0
 80014e4:	080073f1 	.word	0x080073f1
 80014e8:	080073f2 	.word	0x080073f2
	    }
	    else {
	    	DATA_01.data[4] |= (6<<4);
 80014ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001764 <sensorTask+0x440>)
 80014ee:	7adb      	ldrb	r3, [r3, #11]
 80014f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b9b      	ldr	r3, [pc, #620]	@ (8001764 <sensorTask+0x440>)
 80014f8:	72da      	strb	r2, [r3, #11]
	    }
	    hal_message = sendCANData(DATA_01.data,DATA_01.id,DATA_01.dlc);
 80014fa:	4b9a      	ldr	r3, [pc, #616]	@ (8001764 <sensorTask+0x440>)
 80014fc:	795b      	ldrb	r3, [r3, #5]
 80014fe:	4a99      	ldr	r2, [pc, #612]	@ (8001764 <sensorTask+0x440>)
 8001500:	7992      	ldrb	r2, [r2, #6]
 8001502:	4619      	mov	r1, r3
 8001504:	4898      	ldr	r0, [pc, #608]	@ (8001768 <sensorTask+0x444>)
 8001506:	f7ff fe71 	bl	80011ec <sendCANData>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b97      	ldr	r3, [pc, #604]	@ (800176c <sensorTask+0x448>)
 8001510:	701a      	strb	r2, [r3, #0]
	}

	if (RTOS_Time - DATA_02.time >= DATA_02.refresh_rate) {
 8001512:	4b97      	ldr	r3, [pc, #604]	@ (8001770 <sensorTask+0x44c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	4a95      	ldr	r2, [pc, #596]	@ (8001770 <sensorTask+0x44c>)
 800151c:	7912      	ldrb	r2, [r2, #4]
 800151e:	4293      	cmp	r3, r2
 8001520:	f0c0 808c 	bcc.w	800163c <sensorTask+0x318>
	    DATA_02.time = RTOS_Time;
 8001524:	4a92      	ldr	r2, [pc, #584]	@ (8001770 <sensorTask+0x44c>)
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	6013      	str	r3, [r2, #0]

	    data = readSensor(FR_Susp_Angle,FR_Susp_Angle_index);
 800152a:	4b92      	ldr	r3, [pc, #584]	@ (8001774 <sensorTask+0x450>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4a92      	ldr	r2, [pc, #584]	@ (8001778 <sensorTask+0x454>)
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fb91 	bl	8000c5c <readSensor>
 800153a:	4603      	mov	r3, r0
 800153c:	843b      	strh	r3, [r7, #32]
	    DATA_02.data[0] = data&0xFF;;
 800153e:	8c3b      	ldrh	r3, [r7, #32]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b8b      	ldr	r3, [pc, #556]	@ (8001770 <sensorTask+0x44c>)
 8001544:	71da      	strb	r2, [r3, #7]
	    DATA_02.data[1] = (data>>8)&0xF;
 8001546:	8c3b      	ldrh	r3, [r7, #32]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b29b      	uxth	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b86      	ldr	r3, [pc, #536]	@ (8001770 <sensorTask+0x44c>)
 8001556:	721a      	strb	r2, [r3, #8]

	    data = readSensor(FL_Susp_Angle,FL_Susp_Angle_index);
 8001558:	4b88      	ldr	r3, [pc, #544]	@ (800177c <sensorTask+0x458>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4a88      	ldr	r2, [pc, #544]	@ (8001780 <sensorTask+0x45c>)
 800155e:	7812      	ldrb	r2, [r2, #0]
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb7a 	bl	8000c5c <readSensor>
 8001568:	4603      	mov	r3, r0
 800156a:	843b      	strh	r3, [r7, #32]
	    DATA_02.data[1] |= (data&0xF)<<4;
 800156c:	4b80      	ldr	r3, [pc, #512]	@ (8001770 <sensorTask+0x44c>)
 800156e:	7a1b      	ldrb	r3, [r3, #8]
 8001570:	b25a      	sxtb	r2, r3
 8001572:	8c3b      	ldrh	r3, [r7, #32]
 8001574:	b25b      	sxtb	r3, r3
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	b25b      	sxtb	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b25b      	sxtb	r3, r3
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b7b      	ldr	r3, [pc, #492]	@ (8001770 <sensorTask+0x44c>)
 8001582:	721a      	strb	r2, [r3, #8]
	    DATA_02.data[2] = (data>>4)&0xFF;
 8001584:	8c3b      	ldrh	r3, [r7, #32]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	b29b      	uxth	r3, r3
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b78      	ldr	r3, [pc, #480]	@ (8001770 <sensorTask+0x44c>)
 800158e:	725a      	strb	r2, [r3, #9]

	    data = readSensor(RR_Susp_Angle,RR_Susp_Angle_index);
 8001590:	4b7c      	ldr	r3, [pc, #496]	@ (8001784 <sensorTask+0x460>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4a7c      	ldr	r2, [pc, #496]	@ (8001788 <sensorTask+0x464>)
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb5e 	bl	8000c5c <readSensor>
 80015a0:	4603      	mov	r3, r0
 80015a2:	843b      	strh	r3, [r7, #32]
	    DATA_02.data[3] = data&0xFF;;
 80015a4:	8c3b      	ldrh	r3, [r7, #32]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b71      	ldr	r3, [pc, #452]	@ (8001770 <sensorTask+0x44c>)
 80015aa:	729a      	strb	r2, [r3, #10]
	    DATA_02.data[4] = (data>>8)&0xF;
 80015ac:	8c3b      	ldrh	r3, [r7, #32]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001770 <sensorTask+0x44c>)
 80015bc:	72da      	strb	r2, [r3, #11]

	    data = readSensor(RL_Susp_Angle,RL_Susp_Angle_index);
 80015be:	4b73      	ldr	r3, [pc, #460]	@ (800178c <sensorTask+0x468>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4a73      	ldr	r2, [pc, #460]	@ (8001790 <sensorTask+0x46c>)
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fb47 	bl	8000c5c <readSensor>
 80015ce:	4603      	mov	r3, r0
 80015d0:	843b      	strh	r3, [r7, #32]
	    DATA_02.data[4] |= (data&0xF)<<4;
 80015d2:	4b67      	ldr	r3, [pc, #412]	@ (8001770 <sensorTask+0x44c>)
 80015d4:	7adb      	ldrb	r3, [r3, #11]
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	8c3b      	ldrh	r3, [r7, #32]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b62      	ldr	r3, [pc, #392]	@ (8001770 <sensorTask+0x44c>)
 80015e8:	72da      	strb	r2, [r3, #11]
	    DATA_02.data[5] = (data>>4)&0xFF;
 80015ea:	8c3b      	ldrh	r3, [r7, #32]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001770 <sensorTask+0x44c>)
 80015f4:	731a      	strb	r2, [r3, #12]

	    data = readSensor(Wheel_Angle,Wheel_Angle_index);
 80015f6:	4b67      	ldr	r3, [pc, #412]	@ (8001794 <sensorTask+0x470>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	4a67      	ldr	r2, [pc, #412]	@ (8001798 <sensorTask+0x474>)
 80015fc:	7812      	ldrb	r2, [r2, #0]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fb2b 	bl	8000c5c <readSensor>
 8001606:	4603      	mov	r3, r0
 8001608:	843b      	strh	r3, [r7, #32]
	    DATA_02.data[6] = data&0xFF;;
 800160a:	8c3b      	ldrh	r3, [r7, #32]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b58      	ldr	r3, [pc, #352]	@ (8001770 <sensorTask+0x44c>)
 8001610:	735a      	strb	r2, [r3, #13]
	    DATA_02.data[7] = (data>>8)&0xF;
 8001612:	8c3b      	ldrh	r3, [r7, #32]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	b29b      	uxth	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b53      	ldr	r3, [pc, #332]	@ (8001770 <sensorTask+0x44c>)
 8001622:	739a      	strb	r2, [r3, #14]

	    hal_message = sendCANData(DATA_02.data,DATA_02.id,DATA_02.dlc);
 8001624:	4b52      	ldr	r3, [pc, #328]	@ (8001770 <sensorTask+0x44c>)
 8001626:	795b      	ldrb	r3, [r3, #5]
 8001628:	4a51      	ldr	r2, [pc, #324]	@ (8001770 <sensorTask+0x44c>)
 800162a:	7992      	ldrb	r2, [r2, #6]
 800162c:	4619      	mov	r1, r3
 800162e:	485b      	ldr	r0, [pc, #364]	@ (800179c <sensorTask+0x478>)
 8001630:	f7ff fddc 	bl	80011ec <sendCANData>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	4b4c      	ldr	r3, [pc, #304]	@ (800176c <sensorTask+0x448>)
 800163a:	701a      	strb	r2, [r3, #0]
	}

	if (RTOS_Time - DATA_03.time >= DATA_03.refresh_rate) {
 800163c:	4b58      	ldr	r3, [pc, #352]	@ (80017a0 <sensorTask+0x47c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	4a56      	ldr	r2, [pc, #344]	@ (80017a0 <sensorTask+0x47c>)
 8001646:	7912      	ldrb	r2, [r2, #4]
 8001648:	4293      	cmp	r3, r2
 800164a:	d374      	bcc.n	8001736 <sensorTask+0x412>
	    DATA_03.time = RTOS_Time;
 800164c:	4a54      	ldr	r2, [pc, #336]	@ (80017a0 <sensorTask+0x47c>)
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	6013      	str	r3, [r2, #0]

	    data = readSensor(FR_Hall,FR_Hall_index);
 8001652:	4b54      	ldr	r3, [pc, #336]	@ (80017a4 <sensorTask+0x480>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4a54      	ldr	r2, [pc, #336]	@ (80017a8 <sensorTask+0x484>)
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fafd 	bl	8000c5c <readSensor>
 8001662:	4603      	mov	r3, r0
 8001664:	843b      	strh	r3, [r7, #32]
	    DATA_03.data[0] = data&0xFF;;
 8001666:	8c3b      	ldrh	r3, [r7, #32]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b4d      	ldr	r3, [pc, #308]	@ (80017a0 <sensorTask+0x47c>)
 800166c:	71da      	strb	r2, [r3, #7]
	    DATA_03.data[1] = (data>>8)&0xF;
 800166e:	8c3b      	ldrh	r3, [r7, #32]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b29b      	uxth	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b48      	ldr	r3, [pc, #288]	@ (80017a0 <sensorTask+0x47c>)
 800167e:	721a      	strb	r2, [r3, #8]

	    data = readSensor(FL_Hall,FL_Hall_index);
 8001680:	4b4a      	ldr	r3, [pc, #296]	@ (80017ac <sensorTask+0x488>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4a4a      	ldr	r2, [pc, #296]	@ (80017b0 <sensorTask+0x48c>)
 8001686:	7812      	ldrb	r2, [r2, #0]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fae6 	bl	8000c5c <readSensor>
 8001690:	4603      	mov	r3, r0
 8001692:	843b      	strh	r3, [r7, #32]
	    DATA_03.data[1] |= (data&0xF)<<4;
 8001694:	4b42      	ldr	r3, [pc, #264]	@ (80017a0 <sensorTask+0x47c>)
 8001696:	7a1b      	ldrb	r3, [r3, #8]
 8001698:	b25a      	sxtb	r2, r3
 800169a:	8c3b      	ldrh	r3, [r7, #32]
 800169c:	b25b      	sxtb	r3, r3
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b3d      	ldr	r3, [pc, #244]	@ (80017a0 <sensorTask+0x47c>)
 80016aa:	721a      	strb	r2, [r3, #8]
	    DATA_03.data[2] = (data>>4)&0xFF;
 80016ac:	8c3b      	ldrh	r3, [r7, #32]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <sensorTask+0x47c>)
 80016b6:	725a      	strb	r2, [r3, #9]

	    data = readSensor(RR_Hall,FL_Hall_index);
 80016b8:	4b3e      	ldr	r3, [pc, #248]	@ (80017b4 <sensorTask+0x490>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4a3c      	ldr	r2, [pc, #240]	@ (80017b0 <sensorTask+0x48c>)
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff faca 	bl	8000c5c <readSensor>
 80016c8:	4603      	mov	r3, r0
 80016ca:	843b      	strh	r3, [r7, #32]
	    DATA_03.data[3] = data&0xFF;;
 80016cc:	8c3b      	ldrh	r3, [r7, #32]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <sensorTask+0x47c>)
 80016d2:	729a      	strb	r2, [r3, #10]
	    DATA_03.data[4] = (data>>8)&0xF;
 80016d4:	8c3b      	ldrh	r3, [r7, #32]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <sensorTask+0x47c>)
 80016e4:	72da      	strb	r2, [r3, #11]

	    data = readSensor(RL_Hall,RL_Hall_index);
 80016e6:	4b34      	ldr	r3, [pc, #208]	@ (80017b8 <sensorTask+0x494>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4a34      	ldr	r2, [pc, #208]	@ (80017bc <sensorTask+0x498>)
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fab3 	bl	8000c5c <readSensor>
 80016f6:	4603      	mov	r3, r0
 80016f8:	843b      	strh	r3, [r7, #32]
	    DATA_03.data[4] |= (data&0xF)<<4;
 80016fa:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <sensorTask+0x47c>)
 80016fc:	7adb      	ldrb	r3, [r3, #11]
 80016fe:	b25a      	sxtb	r2, r3
 8001700:	8c3b      	ldrh	r3, [r7, #32]
 8001702:	b25b      	sxtb	r3, r3
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	b25b      	sxtb	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b25b      	sxtb	r3, r3
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <sensorTask+0x47c>)
 8001710:	72da      	strb	r2, [r3, #11]
	    DATA_03.data[5] = (data>>4)&0xFF;
 8001712:	8c3b      	ldrh	r3, [r7, #32]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	b29b      	uxth	r3, r3
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <sensorTask+0x47c>)
 800171c:	731a      	strb	r2, [r3, #12]

	    hal_message = sendCANData(DATA_03.data,DATA_03.id,DATA_03.dlc);
 800171e:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <sensorTask+0x47c>)
 8001720:	795b      	ldrb	r3, [r3, #5]
 8001722:	4a1f      	ldr	r2, [pc, #124]	@ (80017a0 <sensorTask+0x47c>)
 8001724:	7992      	ldrb	r2, [r2, #6]
 8001726:	4619      	mov	r1, r3
 8001728:	4825      	ldr	r0, [pc, #148]	@ (80017c0 <sensorTask+0x49c>)
 800172a:	f7ff fd5f 	bl	80011ec <sendCANData>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <sensorTask+0x448>)
 8001734:	701a      	strb	r2, [r3, #0]
	    DATA_05.data[5] = (data>>4)&0xFF;

	    hal_message = sendCANData(DATA_05.data,DATA_05.id,DATA_05.dlc);
	}*/

	if (RTOS_Time - DATA_06.time >= DATA_06.refresh_rate) {
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <sensorTask+0x4a0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	4a21      	ldr	r2, [pc, #132]	@ (80017c4 <sensorTask+0x4a0>)
 8001740:	7912      	ldrb	r2, [r2, #4]
 8001742:	4293      	cmp	r3, r2
 8001744:	d37f      	bcc.n	8001846 <sensorTask+0x522>
	    DATA_06.time = RTOS_Time;
 8001746:	4a1f      	ldr	r2, [pc, #124]	@ (80017c4 <sensorTask+0x4a0>)
 8001748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174a:	6013      	str	r3, [r2, #0]

	    data = readSensor(Brake_Pedal_Angle,Brake_Pedal_Angle_index);
	    DATA_06.data[1] |= (data&0xF)<<4;
	    DATA_06.data[2] = (data>>4)&0xFF;*/

	    DATA_06.data[0] = 0;
 800174c:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <sensorTask+0x4a0>)
 800174e:	2200      	movs	r2, #0
 8001750:	71da      	strb	r2, [r3, #7]
	    DATA_06.data[1] = 0;
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <sensorTask+0x4a0>)
 8001754:	2200      	movs	r2, #0
 8001756:	721a      	strb	r2, [r3, #8]
	    DATA_06.data[2] = 0;
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <sensorTask+0x4a0>)
 800175a:	2200      	movs	r2, #0
 800175c:	725a      	strb	r2, [r3, #9]

	    data = readSensor(F_Brakeline_Pressure,F_Brakeline_Pressure_index);
 800175e:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <sensorTask+0x4a4>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	e033      	b.n	80017cc <sensorTask+0x4a8>
 8001764:	200002a4 	.word	0x200002a4
 8001768:	200002ab 	.word	0x200002ab
 800176c:	20000294 	.word	0x20000294
 8001770:	200002b4 	.word	0x200002b4
 8001774:	080073eb 	.word	0x080073eb
 8001778:	080073f9 	.word	0x080073f9
 800177c:	080073ec 	.word	0x080073ec
 8001780:	080073fa 	.word	0x080073fa
 8001784:	080073ed 	.word	0x080073ed
 8001788:	080073fb 	.word	0x080073fb
 800178c:	080073ee 	.word	0x080073ee
 8001790:	080073fc 	.word	0x080073fc
 8001794:	080073e4 	.word	0x080073e4
 8001798:	080073f3 	.word	0x080073f3
 800179c:	200002bb 	.word	0x200002bb
 80017a0:	200002c4 	.word	0x200002c4
 80017a4:	080073e5 	.word	0x080073e5
 80017a8:	080073f4 	.word	0x080073f4
 80017ac:	080073e6 	.word	0x080073e6
 80017b0:	080073f5 	.word	0x080073f5
 80017b4:	080073e7 	.word	0x080073e7
 80017b8:	080073e8 	.word	0x080073e8
 80017bc:	080073f6 	.word	0x080073f6
 80017c0:	200002cb 	.word	0x200002cb
 80017c4:	200002f4 	.word	0x200002f4
 80017c8:	080073e9 	.word	0x080073e9
 80017cc:	4a34      	ldr	r2, [pc, #208]	@ (80018a0 <sensorTask+0x57c>)
 80017ce:	7812      	ldrb	r2, [r2, #0]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fa42 	bl	8000c5c <readSensor>
 80017d8:	4603      	mov	r3, r0
 80017da:	843b      	strh	r3, [r7, #32]
	    DATA_06.data[3] = data&0xFF;;
 80017dc:	8c3b      	ldrh	r3, [r7, #32]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b30      	ldr	r3, [pc, #192]	@ (80018a4 <sensorTask+0x580>)
 80017e2:	729a      	strb	r2, [r3, #10]
	    DATA_06.data[4] = (data>>8)&0xF;
 80017e4:	8c3b      	ldrh	r3, [r7, #32]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b2c      	ldr	r3, [pc, #176]	@ (80018a4 <sensorTask+0x580>)
 80017f4:	72da      	strb	r2, [r3, #11]

	    data = readSensor(R_Brakeline_Pressure,R_Brakeline_Pressure_index);
 80017f6:	4b2c      	ldr	r3, [pc, #176]	@ (80018a8 <sensorTask+0x584>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	4a2c      	ldr	r2, [pc, #176]	@ (80018ac <sensorTask+0x588>)
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fa2b 	bl	8000c5c <readSensor>
 8001806:	4603      	mov	r3, r0
 8001808:	843b      	strh	r3, [r7, #32]
	    DATA_06.data[4] |= (data&0xF)<<4;
 800180a:	4b26      	ldr	r3, [pc, #152]	@ (80018a4 <sensorTask+0x580>)
 800180c:	7adb      	ldrb	r3, [r3, #11]
 800180e:	b25a      	sxtb	r2, r3
 8001810:	8c3b      	ldrh	r3, [r7, #32]
 8001812:	b25b      	sxtb	r3, r3
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	b25b      	sxtb	r3, r3
 8001818:	4313      	orrs	r3, r2
 800181a:	b25b      	sxtb	r3, r3
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <sensorTask+0x580>)
 8001820:	72da      	strb	r2, [r3, #11]
	    DATA_06.data[5] = (data>>4)&0xFF;
 8001822:	8c3b      	ldrh	r3, [r7, #32]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	b29b      	uxth	r3, r3
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <sensorTask+0x580>)
 800182c:	731a      	strb	r2, [r3, #12]

	    hal_message = sendCANData(DATA_06.data,DATA_06.id,DATA_06.dlc);
 800182e:	4b1d      	ldr	r3, [pc, #116]	@ (80018a4 <sensorTask+0x580>)
 8001830:	795b      	ldrb	r3, [r3, #5]
 8001832:	4a1c      	ldr	r2, [pc, #112]	@ (80018a4 <sensorTask+0x580>)
 8001834:	7992      	ldrb	r2, [r2, #6]
 8001836:	4619      	mov	r1, r3
 8001838:	481d      	ldr	r0, [pc, #116]	@ (80018b0 <sensorTask+0x58c>)
 800183a:	f7ff fcd7 	bl	80011ec <sendCANData>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <sensorTask+0x590>)
 8001844:	701a      	strb	r2, [r3, #0]
	if (RTOS_Time - DATA_09.time >= DATA_09.refresh_rate) {
	    DATA_09.time = RTOS_Time;
	}*/


	if (RTOS_Time - BUFFER_ACK.time >= BUFFER_ACK.refresh_rate) {
 8001846:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <sensorTask+0x594>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	4a1a      	ldr	r2, [pc, #104]	@ (80018b8 <sensorTask+0x594>)
 8001850:	7912      	ldrb	r2, [r2, #4]
 8001852:	4293      	cmp	r3, r2
 8001854:	d311      	bcc.n	800187a <sensorTask+0x556>
		BUFFER_ACK.time = RTOS_Time;
 8001856:	4a18      	ldr	r2, [pc, #96]	@ (80018b8 <sensorTask+0x594>)
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	6013      	str	r3, [r2, #0]
		BUFFER_ACK.data[0]='1';
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <sensorTask+0x594>)
 800185e:	2231      	movs	r2, #49	@ 0x31
 8001860:	71da      	strb	r2, [r3, #7]
		hal_message = sendCANData(BUFFER_ACK.data,BUFFER_ACK.id,BUFFER_ACK.dlc);
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <sensorTask+0x594>)
 8001864:	795b      	ldrb	r3, [r3, #5]
 8001866:	4a14      	ldr	r2, [pc, #80]	@ (80018b8 <sensorTask+0x594>)
 8001868:	7992      	ldrb	r2, [r2, #6]
 800186a:	4619      	mov	r1, r3
 800186c:	4813      	ldr	r0, [pc, #76]	@ (80018bc <sensorTask+0x598>)
 800186e:	f7ff fcbd 	bl	80011ec <sendCANData>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <sensorTask+0x590>)
 8001878:	701a      	strb	r2, [r3, #0]
	}
	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(Time_Mult));
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <sensorTask+0x59c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	4a0e      	ldr	r2, [pc, #56]	@ (80018c4 <sensorTask+0x5a0>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	099a      	lsrs	r2, r3, #6
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f003 ff84 	bl	80057a4 <vTaskDelayUntil>
  {
 800189c:	e54a      	b.n	8001334 <sensorTask+0x10>
 800189e:	bf00      	nop
 80018a0:	080073f7 	.word	0x080073f7
 80018a4:	200002f4 	.word	0x200002f4
 80018a8:	080073ea 	.word	0x080073ea
 80018ac:	080073f8 	.word	0x080073f8
 80018b0:	200002fb 	.word	0x200002fb
 80018b4:	20000294 	.word	0x20000294
 80018b8:	20000334 	.word	0x20000334
 80018bc:	2000033b 	.word	0x2000033b
 80018c0:	080073e0 	.word	0x080073e0
 80018c4:	10624dd3 	.word	0x10624dd3

080018c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018dc:	4b28      	ldr	r3, [pc, #160]	@ (8001980 <MX_GPIO_Init+0xb8>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a27      	ldr	r2, [pc, #156]	@ (8001980 <MX_GPIO_Init+0xb8>)
 80018e2:	f043 0320 	orr.w	r3, r3, #32
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b25      	ldr	r3, [pc, #148]	@ (8001980 <MX_GPIO_Init+0xb8>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <MX_GPIO_Init+0xb8>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a21      	ldr	r2, [pc, #132]	@ (8001980 <MX_GPIO_Init+0xb8>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <MX_GPIO_Init+0xb8>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <MX_GPIO_Init+0xb8>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a1b      	ldr	r2, [pc, #108]	@ (8001980 <MX_GPIO_Init+0xb8>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <MX_GPIO_Init+0xb8>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 800192a:	4816      	ldr	r0, [pc, #88]	@ (8001984 <MX_GPIO_Init+0xbc>)
 800192c:	f001 fc5e 	bl	80031ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 8001936:	4814      	ldr	r0, [pc, #80]	@ (8001988 <MX_GPIO_Init+0xc0>)
 8001938:	f001 fc58 	bl	80031ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800193c:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2302      	movs	r3, #2
 800194c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4619      	mov	r1, r3
 8001954:	480b      	ldr	r0, [pc, #44]	@ (8001984 <MX_GPIO_Init+0xbc>)
 8001956:	f001 fac5 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800195a:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 800195e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2302      	movs	r3, #2
 800196a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_GPIO_Init+0xc0>)
 8001974:	f001 fab6 	bl	8002ee4 <HAL_GPIO_Init>

}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000
 8001984:	40010800 	.word	0x40010800
 8001988:	40010c00 	.word	0x40010c00

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001990:	f000 fb0e 	bl	8001fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001994:	f000 f822 	bl	80019dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001998:	f7ff ff96 	bl	80018c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800199c:	f7fe fecc 	bl	8000738 <MX_ADC1_Init>
  MX_CAN_Init();
 80019a0:	f7ff fb0c 	bl	8000fbc <MX_CAN_Init>
  MX_ADC2_Init();
 80019a4:	f7fe ff06 	bl	80007b4 <MX_ADC2_Init>
  MX_TIM1_Init();
 80019a8:	f000 fa6e 	bl	8001e88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 80019ac:	4808      	ldr	r0, [pc, #32]	@ (80019d0 <main+0x44>)
 80019ae:	f001 f883 	bl	8002ab8 <HAL_CAN_Start>
  can_msg = sendCANString("CAN Started");
 80019b2:	4808      	ldr	r0, [pc, #32]	@ (80019d4 <main+0x48>)
 80019b4:	f7ff fb84 	bl	80010c0 <sendCANString>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <main+0x4c>)
 80019be:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019c0:	f002 fe7e 	bl	80046c0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80019c4:	f7ff fc4c 	bl	8001260 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019c8:	f002 fe9c 	bl	8004704 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <main+0x40>
 80019d0:	2000026c 	.word	0x2000026c
 80019d4:	08007398 	.word	0x08007398
 80019d8:	2000029c 	.word	0x2000029c

080019dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b094      	sub	sp, #80	@ 0x50
 80019e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e6:	2228      	movs	r2, #40	@ 0x28
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f005 fbd4 	bl	8007198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a28:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 fbf2 	bl	800321c <HAL_RCC_OscConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a3e:	f000 f83b 	bl	8001ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a42:	230f      	movs	r3, #15
 8001a44:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a52:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f001 fe5e 	bl	8003720 <HAL_RCC_ClockConfig>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a6a:	f000 f825 	bl	8001ab8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a76:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 f80e 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a86:	f000 f817 	bl	8001ab8 <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3750      	adds	r7, #80	@ 0x50
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a04      	ldr	r2, [pc, #16]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001aa6:	f000 fa99 	bl	8001fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40000800 	.word	0x40000800

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <Error_Handler+0x8>

08001ac4 <setupSensors>:
Sensor DATA_08;
Sensor DATA_09;
Sensor BUFFER_ACK;


HAL_StatusTypeDef setupSensors(){
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	DATA_01.refresh_rate = Time_Mult;
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4b45      	ldr	r3, [pc, #276]	@ (8001be0 <setupSensors+0x11c>)
 8001acc:	711a      	strb	r2, [r3, #4]
	DATA_01.id = 0x02;
 8001ace:	4b44      	ldr	r3, [pc, #272]	@ (8001be0 <setupSensors+0x11c>)
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	715a      	strb	r2, [r3, #5]
	DATA_01.dlc = 5;
 8001ad4:	4b42      	ldr	r3, [pc, #264]	@ (8001be0 <setupSensors+0x11c>)
 8001ad6:	2205      	movs	r2, #5
 8001ad8:	719a      	strb	r2, [r3, #6]

	DATA_02.refresh_rate = Time_Mult;
 8001ada:	2202      	movs	r2, #2
 8001adc:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <setupSensors+0x120>)
 8001ade:	711a      	strb	r2, [r3, #4]
	DATA_02.id = 0x03;
 8001ae0:	4b40      	ldr	r3, [pc, #256]	@ (8001be4 <setupSensors+0x120>)
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	715a      	strb	r2, [r3, #5]
	DATA_02.dlc = 8;
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8001be4 <setupSensors+0x120>)
 8001ae8:	2208      	movs	r2, #8
 8001aea:	719a      	strb	r2, [r3, #6]

	DATA_03.refresh_rate = Time_Mult;
 8001aec:	2202      	movs	r2, #2
 8001aee:	4b3e      	ldr	r3, [pc, #248]	@ (8001be8 <setupSensors+0x124>)
 8001af0:	711a      	strb	r2, [r3, #4]
	DATA_03.id = 0x04;
 8001af2:	4b3d      	ldr	r3, [pc, #244]	@ (8001be8 <setupSensors+0x124>)
 8001af4:	2204      	movs	r2, #4
 8001af6:	715a      	strb	r2, [r3, #5]
	DATA_03.dlc = 8;
 8001af8:	4b3b      	ldr	r3, [pc, #236]	@ (8001be8 <setupSensors+0x124>)
 8001afa:	2208      	movs	r2, #8
 8001afc:	719a      	strb	r2, [r3, #6]

	DATA_04.refresh_rate = 25*Time_Mult;
 8001afe:	2302      	movs	r3, #2
 8001b00:	461a      	mov	r2, r3
 8001b02:	0092      	lsls	r2, r2, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	461a      	mov	r2, r3
 8001b08:	0091      	lsls	r1, r2, #2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b36      	ldr	r3, [pc, #216]	@ (8001bec <setupSensors+0x128>)
 8001b14:	711a      	strb	r2, [r3, #4]
	DATA_04.id = 0x05;
 8001b16:	4b35      	ldr	r3, [pc, #212]	@ (8001bec <setupSensors+0x128>)
 8001b18:	2205      	movs	r2, #5
 8001b1a:	715a      	strb	r2, [r3, #5]
	DATA_04.dlc = 8;
 8001b1c:	4b33      	ldr	r3, [pc, #204]	@ (8001bec <setupSensors+0x128>)
 8001b1e:	2208      	movs	r2, #8
 8001b20:	719a      	strb	r2, [r3, #6]

	DATA_05.refresh_rate = 25*Time_Mult;
 8001b22:	2302      	movs	r3, #2
 8001b24:	461a      	mov	r2, r3
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	0091      	lsls	r1, r2, #2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	460b      	mov	r3, r1
 8001b32:	4413      	add	r3, r2
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf0 <setupSensors+0x12c>)
 8001b38:	711a      	strb	r2, [r3, #4]
	DATA_05.id = 0x06;
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <setupSensors+0x12c>)
 8001b3c:	2206      	movs	r2, #6
 8001b3e:	715a      	strb	r2, [r3, #5]
	DATA_05.dlc = 6;
 8001b40:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf0 <setupSensors+0x12c>)
 8001b42:	2206      	movs	r2, #6
 8001b44:	719a      	strb	r2, [r3, #6]

	DATA_06.refresh_rate = Time_Mult;
 8001b46:	2202      	movs	r2, #2
 8001b48:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <setupSensors+0x130>)
 8001b4a:	711a      	strb	r2, [r3, #4]
	DATA_06.id = 0x07;
 8001b4c:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <setupSensors+0x130>)
 8001b4e:	2207      	movs	r2, #7
 8001b50:	715a      	strb	r2, [r3, #5]
	DATA_06.dlc = 6;
 8001b52:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <setupSensors+0x130>)
 8001b54:	2206      	movs	r2, #6
 8001b56:	719a      	strb	r2, [r3, #6]

	DATA_07.refresh_rate = 25*Time_Mult;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	0092      	lsls	r2, r2, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	0091      	lsls	r1, r2, #2
 8001b64:	461a      	mov	r2, r3
 8001b66:	460b      	mov	r3, r1
 8001b68:	4413      	add	r3, r2
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <setupSensors+0x134>)
 8001b6e:	711a      	strb	r2, [r3, #4]
	DATA_07.id = 0x08;
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <setupSensors+0x134>)
 8001b72:	2208      	movs	r2, #8
 8001b74:	715a      	strb	r2, [r3, #5]
	DATA_07.dlc = 8;
 8001b76:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <setupSensors+0x134>)
 8001b78:	2208      	movs	r2, #8
 8001b7a:	719a      	strb	r2, [r3, #6]

	DATA_08.refresh_rate = 25*Time_Mult;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	0092      	lsls	r2, r2, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	0091      	lsls	r1, r2, #2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <setupSensors+0x138>)
 8001b92:	711a      	strb	r2, [r3, #4]
	DATA_08.id = 0x09;
 8001b94:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <setupSensors+0x138>)
 8001b96:	2209      	movs	r2, #9
 8001b98:	715a      	strb	r2, [r3, #5]
	DATA_08.dlc = 8;
 8001b9a:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <setupSensors+0x138>)
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	719a      	strb	r2, [r3, #6]

	DATA_09.refresh_rate = 25*Time_Mult;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	0091      	lsls	r1, r2, #2
 8001bac:	461a      	mov	r2, r3
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <setupSensors+0x13c>)
 8001bb6:	711a      	strb	r2, [r3, #4]
	DATA_09.id = 0x0A;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <setupSensors+0x13c>)
 8001bba:	220a      	movs	r2, #10
 8001bbc:	715a      	strb	r2, [r3, #5]
	DATA_09.dlc = 6;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <setupSensors+0x13c>)
 8001bc0:	2206      	movs	r2, #6
 8001bc2:	719a      	strb	r2, [r3, #6]

	BUFFER_ACK.refresh_rate = Time_Mult;
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <setupSensors+0x140>)
 8001bc8:	711a      	strb	r2, [r3, #4]
	BUFFER_ACK.id = 0x0B;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <setupSensors+0x140>)
 8001bcc:	220b      	movs	r2, #11
 8001bce:	715a      	strb	r2, [r3, #5]
	BUFFER_ACK.dlc = 1;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <setupSensors+0x140>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	200002a4 	.word	0x200002a4
 8001be4:	200002b4 	.word	0x200002b4
 8001be8:	200002c4 	.word	0x200002c4
 8001bec:	200002d4 	.word	0x200002d4
 8001bf0:	200002e4 	.word	0x200002e4
 8001bf4:	200002f4 	.word	0x200002f4
 8001bf8:	20000304 	.word	0x20000304
 8001bfc:	20000314 	.word	0x20000314
 8001c00:	20000324 	.word	0x20000324
 8001c04:	20000334 	.word	0x20000334

08001c08 <vBatValue>:

unsigned short vBatValue(unsigned short ADC_Value){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
	float vBat = ADC_Value*(VBAT_R1 + VBAT_R2)/VBAT_R2;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	f645 525c 	movw	r2, #23900	@ 0x5d5c
 8001c18:	fb02 f303 	mul.w	r3, r2, r3
 8001c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c5c <vBatValue+0x54>)
 8001c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c22:	1252      	asrs	r2, r2, #9
 8001c24:	17db      	asrs	r3, r3, #31
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fb4b 	bl	80002c4 <__aeabi_i2f>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	60fb      	str	r3, [r7, #12]
	unsigned short vBat0 = vBat/A_20V * 4095;
 8001c32:	490b      	ldr	r1, [pc, #44]	@ (8001c60 <vBatValue+0x58>)
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f7fe fc4d 	bl	80004d4 <__aeabi_fdiv>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4909      	ldr	r1, [pc, #36]	@ (8001c64 <vBatValue+0x5c>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fb94 	bl	800036c <__aeabi_fmul>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fd56 	bl	80006f8 <__aeabi_f2uiz>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	817b      	strh	r3, [r7, #10]
	return vBat0;
 8001c50:	897b      	ldrh	r3, [r7, #10]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	219bb355 	.word	0x219bb355
 8001c60:	46c1e400 	.word	0x46c1e400
 8001c64:	457ff000 	.word	0x457ff000

08001c68 <vRefValue>:

unsigned short vRefValue(unsigned short ADC_Value){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
	float vRef = ADC_Value*(V_REF_R1 + V_REF_R2)/V_REF_R2;
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	f241 72d4 	movw	r2, #6100	@ 0x17d4
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001cbc <vRefValue+0x54>)
 8001c7e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c82:	1252      	asrs	r2, r2, #9
 8001c84:	17db      	asrs	r3, r3, #31
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fb1b 	bl	80002c4 <__aeabi_i2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	60fb      	str	r3, [r7, #12]
	unsigned short vRef0 = vRef/A_5_5V * 4095;
 8001c92:	490b      	ldr	r1, [pc, #44]	@ (8001cc0 <vRefValue+0x58>)
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7fe fc1d 	bl	80004d4 <__aeabi_fdiv>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4909      	ldr	r1, [pc, #36]	@ (8001cc4 <vRefValue+0x5c>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fb64 	bl	800036c <__aeabi_fmul>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fd26 	bl	80006f8 <__aeabi_f2uiz>
 8001cac:	4603      	mov	r3, r0
 8001cae:	817b      	strh	r3, [r7, #10]
	return vRef0;
 8001cb0:	897b      	ldrh	r3, [r7, #10]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	219bb355 	.word	0x219bb355
 8001cc0:	45d54800 	.word	0x45d54800
 8001cc4:	457ff000 	.word	0x457ff000

08001cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cce:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <HAL_MspInit+0x68>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	4a17      	ldr	r2, [pc, #92]	@ (8001d30 <HAL_MspInit+0x68>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6193      	str	r3, [r2, #24]
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <HAL_MspInit+0x68>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_MspInit+0x68>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a11      	ldr	r2, [pc, #68]	@ (8001d30 <HAL_MspInit+0x68>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <HAL_MspInit+0x68>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	210f      	movs	r1, #15
 8001d02:	f06f 0001 	mvn.w	r0, #1
 8001d06:	f001 f8c2 	bl	8002e8e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_MspInit+0x6c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <HAL_MspInit+0x6c>)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000

08001d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08e      	sub	sp, #56	@ 0x38
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001d4e:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <HAL_InitTick+0xe8>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a33      	ldr	r2, [pc, #204]	@ (8001e20 <HAL_InitTick+0xe8>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	61d3      	str	r3, [r2, #28]
 8001d5a:	4b31      	ldr	r3, [pc, #196]	@ (8001e20 <HAL_InitTick+0xe8>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d66:	f107 0210 	add.w	r2, r7, #16
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 fe45 	bl	8003a00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d103      	bne.n	8001d88 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d80:	f001 fe16 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8001d84:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d86:	e004      	b.n	8001d92 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d88:	f001 fe12 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d94:	4a23      	ldr	r2, [pc, #140]	@ (8001e24 <HAL_InitTick+0xec>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0c9b      	lsrs	r3, r3, #18
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001da0:	4b21      	ldr	r3, [pc, #132]	@ (8001e28 <HAL_InitTick+0xf0>)
 8001da2:	4a22      	ldr	r2, [pc, #136]	@ (8001e2c <HAL_InitTick+0xf4>)
 8001da4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001da6:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <HAL_InitTick+0xf0>)
 8001da8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001dae:	4a1e      	ldr	r2, [pc, #120]	@ (8001e28 <HAL_InitTick+0xf0>)
 8001db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001db4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <HAL_InitTick+0xf0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b1b      	ldr	r3, [pc, #108]	@ (8001e28 <HAL_InitTick+0xf0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_InitTick+0xf0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001dc6:	4818      	ldr	r0, [pc, #96]	@ (8001e28 <HAL_InitTick+0xf0>)
 8001dc8:	f001 ffd4 	bl	8003d74 <HAL_TIM_Base_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001dd2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d11b      	bne.n	8001e12 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001dda:	4813      	ldr	r0, [pc, #76]	@ (8001e28 <HAL_InitTick+0xf0>)
 8001ddc:	f002 f88a 	bl	8003ef4 <HAL_TIM_Base_Start_IT>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001de6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d111      	bne.n	8001e12 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dee:	201e      	movs	r0, #30
 8001df0:	f001 f869 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	d808      	bhi.n	8001e0c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	201e      	movs	r0, #30
 8001e00:	f001 f845 	bl	8002e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e04:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <HAL_InitTick+0xf8>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e002      	b.n	8001e12 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e12:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3738      	adds	r7, #56	@ 0x38
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	431bde83 	.word	0x431bde83
 8001e28:	20000344 	.word	0x20000344
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	20000008 	.word	0x20000008

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <NMI_Handler+0x4>

08001e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <TIM4_IRQHandler+0x10>)
 8001e6e:	f002 f893 	bl	8003f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000344 	.word	0x20000344

08001e7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <MX_TIM1_Init+0x98>)
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f24 <MX_TIM1_Init+0x9c>)
 8001ea8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f20 <MX_TIM1_Init+0x98>)
 8001eac:	2247      	movs	r2, #71	@ 0x47
 8001eae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <MX_TIM1_Init+0x98>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <MX_TIM1_Init+0x98>)
 8001eb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ebc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <MX_TIM1_Init+0x98>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <MX_TIM1_Init+0x98>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <MX_TIM1_Init+0x98>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ed0:	4813      	ldr	r0, [pc, #76]	@ (8001f20 <MX_TIM1_Init+0x98>)
 8001ed2:	f001 ff4f 	bl	8003d74 <HAL_TIM_Base_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001edc:	f7ff fdec 	bl	8001ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	4619      	mov	r1, r3
 8001eec:	480c      	ldr	r0, [pc, #48]	@ (8001f20 <MX_TIM1_Init+0x98>)
 8001eee:	f002 f943 	bl	8004178 <HAL_TIM_ConfigClockSource>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ef8:	f7ff fdde 	bl	8001ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f04:	463b      	mov	r3, r7
 8001f06:	4619      	mov	r1, r3
 8001f08:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <MX_TIM1_Init+0x98>)
 8001f0a:	f002 fb25 	bl	8004558 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f14:	f7ff fdd0 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f18:	bf00      	nop
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000038c 	.word	0x2000038c
 8001f24:	40012c00 	.word	0x40012c00

08001f28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a09      	ldr	r2, [pc, #36]	@ (8001f5c <HAL_TIM_Base_MspInit+0x34>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d10b      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_TIM_Base_MspInit+0x38>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <HAL_TIM_Base_MspInit+0x38>)
 8001f40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f44:	6193      	str	r3, [r2, #24]
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_TIM_Base_MspInit+0x38>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40021000 	.word	0x40021000

08001f64 <Reset_Handler>:
 8001f64:	f7ff ff8a 	bl	8001e7c <SystemInit>
 8001f68:	480b      	ldr	r0, [pc, #44]	@ (8001f98 <LoopFillZerobss+0xe>)
 8001f6a:	490c      	ldr	r1, [pc, #48]	@ (8001f9c <LoopFillZerobss+0x12>)
 8001f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa0 <LoopFillZerobss+0x16>)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:
 8001f72:	58d4      	ldr	r4, [r2, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:
 8001f78:	18c4      	adds	r4, r0, r3
 8001f7a:	428c      	cmp	r4, r1
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
 8001f7e:	4a09      	ldr	r2, [pc, #36]	@ (8001fa4 <LoopFillZerobss+0x1a>)
 8001f80:	4c09      	ldr	r4, [pc, #36]	@ (8001fa8 <LoopFillZerobss+0x1e>)
 8001f82:	2300      	movs	r3, #0
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:
 8001f8a:	42a2      	cmp	r2, r4
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>
 8001f8e:	f005 f969 	bl	8007264 <__libc_init_array>
 8001f92:	f7ff fcfb 	bl	800198c <main>
 8001f96:	4770      	bx	lr
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000064 	.word	0x20000064
 8001fa0:	08007448 	.word	0x08007448
 8001fa4:	20000064 	.word	0x20000064
 8001fa8:	20001f00 	.word	0x20001f00

08001fac <ADC1_2_IRQHandler>:
 8001fac:	e7fe      	b.n	8001fac <ADC1_2_IRQHandler>
	...

08001fb0 <HAL_Init>:
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <HAL_Init+0x28>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a07      	ldr	r2, [pc, #28]	@ (8001fd8 <HAL_Init+0x28>)
 8001fba:	f043 0310 	orr.w	r3, r3, #16
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f000 ff59 	bl	8002e78 <HAL_NVIC_SetPriorityGrouping>
 8001fc6:	200f      	movs	r0, #15
 8001fc8:	f7ff feb6 	bl	8001d38 <HAL_InitTick>
 8001fcc:	f7ff fe7c 	bl	8001cc8 <HAL_MspInit>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_IncTick>:
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <HAL_IncTick+0x1c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_IncTick+0x20>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a03      	ldr	r2, [pc, #12]	@ (8001ffc <HAL_IncTick+0x20>)
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	2000000c 	.word	0x2000000c
 8001ffc:	200003d4 	.word	0x200003d4

08002000 <HAL_GetTick>:
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
 8002004:	4b02      	ldr	r3, [pc, #8]	@ (8002010 <HAL_GetTick+0x10>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	200003d4 	.word	0x200003d4

08002014 <HAL_ADC_Init>:
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	2300      	movs	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_Init+0x22>
 8002032:	2301      	movs	r3, #1
 8002034:	e0be      	b.n	80021b4 <HAL_ADC_Init+0x1a0>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_ADC_Init+0x44>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	62da      	str	r2, [r3, #44]	@ 0x2c
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fbec 	bl	8000830 <HAL_ADC_MspInit>
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fbf1 	bl	8002840 <ADC_ConversionStop_Disable>
 800205e:	4603      	mov	r3, r0
 8002060:	75fb      	strb	r3, [r7, #23]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 8099 	bne.w	80021a2 <HAL_ADC_Init+0x18e>
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 8095 	bne.w	80021a2 <HAL_ADC_Init+0x18e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002080:	f023 0302 	bic.w	r3, r3, #2
 8002084:	f043 0202 	orr.w	r2, r3, #2
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	@ 0x28
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7b1b      	ldrb	r3, [r3, #12]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4313      	orrs	r3, r2
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020ac:	d003      	beq.n	80020b6 <HAL_ADC_Init+0xa2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d102      	bne.n	80020bc <HAL_ADC_Init+0xa8>
 80020b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020ba:	e000      	b.n	80020be <HAL_ADC_Init+0xaa>
 80020bc:	2300      	movs	r3, #0
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7d1b      	ldrb	r3, [r3, #20]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d119      	bne.n	8002100 <HAL_ADC_Init+0xec>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7b1b      	ldrb	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <HAL_ADC_Init+0xd4>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	3b01      	subs	r3, #1
 80020da:	035a      	lsls	r2, r3, #13
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	e00b      	b.n	8002100 <HAL_ADC_Init+0xec>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	f043 0220 	orr.w	r2, r3, #32
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <HAL_ADC_Init+0x1a8>)
 800211c:	4013      	ands	r3, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	430b      	orrs	r3, r1
 8002126:	6093      	str	r3, [r2, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002130:	d003      	beq.n	800213a <HAL_ADC_Init+0x126>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d104      	bne.n	8002144 <HAL_ADC_Init+0x130>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	3b01      	subs	r3, #1
 8002140:	051b      	lsls	r3, r3, #20
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	430a      	orrs	r2, r1
 8002156:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	4b18      	ldr	r3, [pc, #96]	@ (80021c0 <HAL_ADC_Init+0x1ac>)
 8002160:	4013      	ands	r3, r2
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	d10b      	bne.n	8002180 <HAL_ADC_Init+0x16c>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	629a      	str	r2, [r3, #40]	@ 0x28
 800217e:	e018      	b.n	80021b2 <HAL_ADC_Init+0x19e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002184:	f023 0312 	bic.w	r3, r3, #18
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800219c:	2301      	movs	r3, #1
 800219e:	75fb      	strb	r3, [r7, #23]
 80021a0:	e007      	b.n	80021b2 <HAL_ADC_Init+0x19e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	ffe1f7fd 	.word	0xffe1f7fd
 80021c0:	ff1f0efe 	.word	0xff1f0efe

080021c4 <HAL_ADC_Start>:
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_ADC_Start+0x1a>
 80021da:	2302      	movs	r3, #2
 80021dc:	e098      	b.n	8002310 <HAL_ADC_Start+0x14c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fad0 	bl	800278c <ADC_Enable>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8087 	bne.w	8002306 <HAL_ADC_Start+0x142>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a41      	ldr	r2, [pc, #260]	@ (8002318 <HAL_ADC_Start+0x154>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d105      	bne.n	8002222 <HAL_ADC_Start+0x5e>
 8002216:	4b41      	ldr	r3, [pc, #260]	@ (800231c <HAL_ADC_Start+0x158>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_ADC_Start+0x8a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002226:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	629a      	str	r2, [r3, #40]	@ 0x28
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002238:	2b00      	cmp	r3, #0
 800223a:	d026      	beq.n	800228a <HAL_ADC_Start+0xc6>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002244:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28
 800224c:	e01d      	b.n	800228a <HAL_ADC_Start+0xc6>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	629a      	str	r2, [r3, #40]	@ 0x28
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a2f      	ldr	r2, [pc, #188]	@ (800231c <HAL_ADC_Start+0x158>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_ADC_Start+0xaa>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2b      	ldr	r2, [pc, #172]	@ (8002318 <HAL_ADC_Start+0x154>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10d      	bne.n	800228a <HAL_ADC_Start+0xc6>
 800226e:	4b2b      	ldr	r3, [pc, #172]	@ (800231c <HAL_ADC_Start+0x158>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <HAL_ADC_Start+0xc6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002282:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	629a      	str	r2, [r3, #40]	@ 0x28
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <HAL_ADC_Start+0xe0>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229a:	f023 0206 	bic.w	r2, r3, #6
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022a2:	e002      	b.n	80022aa <HAL_ADC_Start+0xe6>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f06f 0202 	mvn.w	r2, #2
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80022c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022ca:	d113      	bne.n	80022f4 <HAL_ADC_Start+0x130>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a11      	ldr	r2, [pc, #68]	@ (8002318 <HAL_ADC_Start+0x154>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d105      	bne.n	80022e2 <HAL_ADC_Start+0x11e>
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <HAL_ADC_Start+0x158>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d108      	bne.n	80022f4 <HAL_ADC_Start+0x130>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	e00c      	b.n	800230e <HAL_ADC_Start+0x14a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e003      	b.n	800230e <HAL_ADC_Start+0x14a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40012800 	.word	0x40012800
 800231c:	40012400 	.word	0x40012400

08002320 <HAL_ADC_Stop>:
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_ADC_Stop+0x1a>
 8002336:	2302      	movs	r3, #2
 8002338:	e01a      	b.n	8002370 <HAL_ADC_Stop+0x50>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fa7c 	bl	8002840 <ADC_ConversionStop_Disable>
 8002348:	4603      	mov	r3, r0
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_ADC_Stop+0x46>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002356:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	629a      	str	r2, [r3, #40]	@ 0x28
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_ADC_PollForConversion>:
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	f7ff fe37 	bl	8002000 <HAL_GetTick>
 8002392:	6178      	str	r0, [r7, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_ADC_PollForConversion+0x42>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	f043 0220 	orr.w	r2, r3, #32
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0d3      	b.n	8002562 <HAL_ADC_PollForConversion+0x1ea>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d131      	bne.n	800242c <HAL_ADC_PollForConversion+0xb4>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d12a      	bne.n	800242c <HAL_ADC_PollForConversion+0xb4>
 80023d6:	e021      	b.n	800241c <HAL_ADC_PollForConversion+0xa4>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023de:	d01d      	beq.n	800241c <HAL_ADC_PollForConversion+0xa4>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_ADC_PollForConversion+0x7e>
 80023e6:	f7ff fe0b 	bl	8002000 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d212      	bcs.n	800241c <HAL_ADC_PollForConversion+0xa4>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10b      	bne.n	800241c <HAL_ADC_PollForConversion+0xa4>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	f043 0204 	orr.w	r2, r3, #4
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002418:	2303      	movs	r3, #3
 800241a:	e0a2      	b.n	8002562 <HAL_ADC_PollForConversion+0x1ea>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0d6      	beq.n	80023d8 <HAL_ADC_PollForConversion+0x60>
 800242a:	e070      	b.n	800250e <HAL_ADC_PollForConversion+0x196>
 800242c:	4b4f      	ldr	r3, [pc, #316]	@ (800256c <HAL_ADC_PollForConversion+0x1f4>)
 800242e:	681c      	ldr	r4, [r3, #0]
 8002430:	2002      	movs	r0, #2
 8002432:	f001 fbe9 	bl	8003c08 <HAL_RCCEx_GetPeriphCLKFreq>
 8002436:	4603      	mov	r3, r0
 8002438:	fbb4 f2f3 	udiv	r2, r4, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6919      	ldr	r1, [r3, #16]
 8002442:	4b4b      	ldr	r3, [pc, #300]	@ (8002570 <HAL_ADC_PollForConversion+0x1f8>)
 8002444:	400b      	ands	r3, r1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d118      	bne.n	800247c <HAL_ADC_PollForConversion+0x104>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68d9      	ldr	r1, [r3, #12]
 8002450:	4b48      	ldr	r3, [pc, #288]	@ (8002574 <HAL_ADC_PollForConversion+0x1fc>)
 8002452:	400b      	ands	r3, r1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d111      	bne.n	800247c <HAL_ADC_PollForConversion+0x104>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6919      	ldr	r1, [r3, #16]
 800245e:	4b46      	ldr	r3, [pc, #280]	@ (8002578 <HAL_ADC_PollForConversion+0x200>)
 8002460:	400b      	ands	r3, r1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d108      	bne.n	8002478 <HAL_ADC_PollForConversion+0x100>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68d9      	ldr	r1, [r3, #12]
 800246c:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_ADC_PollForConversion+0x204>)
 800246e:	400b      	ands	r3, r1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_ADC_PollForConversion+0x100>
 8002474:	2314      	movs	r3, #20
 8002476:	e020      	b.n	80024ba <HAL_ADC_PollForConversion+0x142>
 8002478:	2329      	movs	r3, #41	@ 0x29
 800247a:	e01e      	b.n	80024ba <HAL_ADC_PollForConversion+0x142>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6919      	ldr	r1, [r3, #16]
 8002482:	4b3d      	ldr	r3, [pc, #244]	@ (8002578 <HAL_ADC_PollForConversion+0x200>)
 8002484:	400b      	ands	r3, r1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_ADC_PollForConversion+0x120>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68d9      	ldr	r1, [r3, #12]
 8002490:	4b3a      	ldr	r3, [pc, #232]	@ (800257c <HAL_ADC_PollForConversion+0x204>)
 8002492:	400b      	ands	r3, r1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00d      	beq.n	80024b4 <HAL_ADC_PollForConversion+0x13c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6919      	ldr	r1, [r3, #16]
 800249e:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <HAL_ADC_PollForConversion+0x208>)
 80024a0:	400b      	ands	r3, r1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d108      	bne.n	80024b8 <HAL_ADC_PollForConversion+0x140>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68d9      	ldr	r1, [r3, #12]
 80024ac:	4b34      	ldr	r3, [pc, #208]	@ (8002580 <HAL_ADC_PollForConversion+0x208>)
 80024ae:	400b      	ands	r3, r1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_PollForConversion+0x140>
 80024b4:	2354      	movs	r3, #84	@ 0x54
 80024b6:	e000      	b.n	80024ba <HAL_ADC_PollForConversion+0x142>
 80024b8:	23fc      	movs	r3, #252	@ 0xfc
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	e021      	b.n	8002506 <HAL_ADC_PollForConversion+0x18e>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d01a      	beq.n	8002500 <HAL_ADC_PollForConversion+0x188>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_ADC_PollForConversion+0x168>
 80024d0:	f7ff fd96 	bl	8002000 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d20f      	bcs.n	8002500 <HAL_ADC_PollForConversion+0x188>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d90b      	bls.n	8002500 <HAL_ADC_PollForConversion+0x188>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	f043 0204 	orr.w	r2, r3, #4
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024fc:	2303      	movs	r3, #3
 80024fe:	e030      	b.n	8002562 <HAL_ADC_PollForConversion+0x1ea>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3301      	adds	r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	429a      	cmp	r2, r3
 800250c:	d8d9      	bhi.n	80024c2 <HAL_ADC_PollForConversion+0x14a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f06f 0212 	mvn.w	r2, #18
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	629a      	str	r2, [r3, #40]	@ 0x28
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800252e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002532:	d115      	bne.n	8002560 <HAL_ADC_PollForConversion+0x1e8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7b1b      	ldrb	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d111      	bne.n	8002560 <HAL_ADC_PollForConversion+0x1e8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_ADC_PollForConversion+0x1e8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002560:	2300      	movs	r3, #0
 8002562:	4618      	mov	r0, r3
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	bf00      	nop
 800256c:	20000004 	.word	0x20000004
 8002570:	24924924 	.word	0x24924924
 8002574:	00924924 	.word	0x00924924
 8002578:	12492492 	.word	0x12492492
 800257c:	00492492 	.word	0x00492492
 8002580:	00249249 	.word	0x00249249

08002584 <HAL_ADC_GetValue>:
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_ADC_ConfigChannel>:
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x20>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e0dc      	b.n	8002776 <HAL_ADC_ConfigChannel+0x1da>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b06      	cmp	r3, #6
 80025ca:	d81c      	bhi.n	8002606 <HAL_ADC_ConfigChannel+0x6a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	3b05      	subs	r3, #5
 80025de:	221f      	movs	r2, #31
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	4019      	ands	r1, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	3b05      	subs	r3, #5
 80025f8:	fa00 f203 	lsl.w	r2, r0, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	635a      	str	r2, [r3, #52]	@ 0x34
 8002604:	e03c      	b.n	8002680 <HAL_ADC_ConfigChannel+0xe4>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d81c      	bhi.n	8002648 <HAL_ADC_ConfigChannel+0xac>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	3b23      	subs	r3, #35	@ 0x23
 8002620:	221f      	movs	r2, #31
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	4019      	ands	r1, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b23      	subs	r3, #35	@ 0x23
 800263a:	fa00 f203 	lsl.w	r2, r0, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	631a      	str	r2, [r3, #48]	@ 0x30
 8002646:	e01b      	b.n	8002680 <HAL_ADC_ConfigChannel+0xe4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	3b41      	subs	r3, #65	@ 0x41
 800265a:	221f      	movs	r2, #31
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	4019      	ands	r1, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	3b41      	subs	r3, #65	@ 0x41
 8002674:	fa00 f203 	lsl.w	r2, r0, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b09      	cmp	r3, #9
 8002686:	d91c      	bls.n	80026c2 <HAL_ADC_ConfigChannel+0x126>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68d9      	ldr	r1, [r3, #12]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	3b1e      	subs	r3, #30
 800269a:	2207      	movs	r2, #7
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	4019      	ands	r1, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6898      	ldr	r0, [r3, #8]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	3b1e      	subs	r3, #30
 80026b4:	fa00 f203 	lsl.w	r2, r0, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	e019      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x15a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6919      	ldr	r1, [r3, #16]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	2207      	movs	r2, #7
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	4019      	ands	r1, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6898      	ldr	r0, [r3, #8]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	fa00 f203 	lsl.w	r2, r0, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	611a      	str	r2, [r3, #16]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d003      	beq.n	8002706 <HAL_ADC_ConfigChannel+0x16a>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b11      	cmp	r3, #17
 8002704:	d132      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1d      	ldr	r2, [pc, #116]	@ (8002780 <HAL_ADC_ConfigChannel+0x1e4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d125      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1c0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d126      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b10      	cmp	r3, #16
 8002734:	d11a      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
 8002736:	4b13      	ldr	r3, [pc, #76]	@ (8002784 <HAL_ADC_ConfigChannel+0x1e8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a13      	ldr	r2, [pc, #76]	@ (8002788 <HAL_ADC_ConfigChannel+0x1ec>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	0c9a      	lsrs	r2, r3, #18
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	e002      	b.n	8002754 <HAL_ADC_ConfigChannel+0x1b8>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3b01      	subs	r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f9      	bne.n	800274e <HAL_ADC_ConfigChannel+0x1b2>
 800275a:	e007      	b.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	@ 0x28
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	40012400 	.word	0x40012400
 8002784:	20000004 	.word	0x20000004
 8002788:	431bde83 	.word	0x431bde83

0800278c <ADC_Enable>:
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d040      	beq.n	800282c <ADC_Enable+0xa0>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002838 <ADC_Enable+0xac>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1f      	ldr	r2, [pc, #124]	@ (800283c <ADC_Enable+0xb0>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	0c9b      	lsrs	r3, r3, #18
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	e002      	b.n	80027d0 <ADC_Enable+0x44>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f9      	bne.n	80027ca <ADC_Enable+0x3e>
 80027d6:	f7ff fc13 	bl	8002000 <HAL_GetTick>
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	e01f      	b.n	800281e <ADC_Enable+0x92>
 80027de:	f7ff fc0f 	bl	8002000 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d918      	bls.n	800281e <ADC_Enable+0x92>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d011      	beq.n	800281e <ADC_Enable+0x92>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fe:	f043 0210 	orr.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	629a      	str	r2, [r3, #40]	@ 0x28
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800281a:	2301      	movs	r3, #1
 800281c:	e007      	b.n	800282e <ADC_Enable+0xa2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d1d8      	bne.n	80027de <ADC_Enable+0x52>
 800282c:	2300      	movs	r3, #0
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000004 	.word	0x20000004
 800283c:	431bde83 	.word	0x431bde83

08002840 <ADC_ConversionStop_Disable>:
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d12e      	bne.n	80028b8 <ADC_ConversionStop_Disable+0x78>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	f7ff fbc9 	bl	8002000 <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	e01b      	b.n	80028aa <ADC_ConversionStop_Disable+0x6a>
 8002872:	f7ff fbc5 	bl	8002000 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d914      	bls.n	80028aa <ADC_ConversionStop_Disable+0x6a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b01      	cmp	r3, #1
 800288c:	d10d      	bne.n	80028aa <ADC_ConversionStop_Disable+0x6a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002892:	f043 0210 	orr.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	629a      	str	r2, [r3, #40]	@ 0x28
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028a6:	2301      	movs	r3, #1
 80028a8:	e007      	b.n	80028ba <ADC_ConversionStop_Disable+0x7a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d0dc      	beq.n	8002872 <ADC_ConversionStop_Disable+0x32>
 80028b8:	2300      	movs	r3, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_CAN_Init>:
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_CAN_Init+0x12>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0ed      	b.n	8002ab0 <HAL_CAN_Init+0x1ee>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_CAN_Init+0x24>
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7fe fba1 	bl	8001028 <HAL_CAN_MspInit>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f7ff fb83 	bl	8002000 <HAL_GetTick>
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	e012      	b.n	8002924 <HAL_CAN_Init+0x62>
 80028fe:	f7ff fb7f 	bl	8002000 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b0a      	cmp	r3, #10
 800290a:	d90b      	bls.n	8002924 <HAL_CAN_Init+0x62>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002910:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2205      	movs	r2, #5
 800291c:	f883 2020 	strb.w	r2, [r3, #32]
 8002920:	2301      	movs	r3, #1
 8002922:	e0c5      	b.n	8002ab0 <HAL_CAN_Init+0x1ee>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0e5      	beq.n	80028fe <HAL_CAN_Init+0x3c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0202 	bic.w	r2, r2, #2
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f7ff fb5d 	bl	8002000 <HAL_GetTick>
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	e012      	b.n	8002970 <HAL_CAN_Init+0xae>
 800294a:	f7ff fb59 	bl	8002000 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b0a      	cmp	r3, #10
 8002956:	d90b      	bls.n	8002970 <HAL_CAN_Init+0xae>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	625a      	str	r2, [r3, #36]	@ 0x24
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2205      	movs	r2, #5
 8002968:	f883 2020 	strb.w	r2, [r3, #32]
 800296c:	2301      	movs	r3, #1
 800296e:	e09f      	b.n	8002ab0 <HAL_CAN_Init+0x1ee>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1e5      	bne.n	800294a <HAL_CAN_Init+0x88>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7e1b      	ldrb	r3, [r3, #24]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d108      	bne.n	8002998 <HAL_CAN_Init+0xd6>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e007      	b.n	80029a8 <HAL_CAN_Init+0xe6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e5b      	ldrb	r3, [r3, #25]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d108      	bne.n	80029c2 <HAL_CAN_Init+0x100>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e007      	b.n	80029d2 <HAL_CAN_Init+0x110>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7e9b      	ldrb	r3, [r3, #26]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d108      	bne.n	80029ec <HAL_CAN_Init+0x12a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0220 	orr.w	r2, r2, #32
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e007      	b.n	80029fc <HAL_CAN_Init+0x13a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0220 	bic.w	r2, r2, #32
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7edb      	ldrb	r3, [r3, #27]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d108      	bne.n	8002a16 <HAL_CAN_Init+0x154>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0210 	bic.w	r2, r2, #16
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e007      	b.n	8002a26 <HAL_CAN_Init+0x164>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0210 	orr.w	r2, r2, #16
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7f1b      	ldrb	r3, [r3, #28]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d108      	bne.n	8002a40 <HAL_CAN_Init+0x17e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0208 	orr.w	r2, r2, #8
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e007      	b.n	8002a50 <HAL_CAN_Init+0x18e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0208 	bic.w	r2, r2, #8
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7f5b      	ldrb	r3, [r3, #29]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d108      	bne.n	8002a6a <HAL_CAN_Init+0x1a8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0204 	orr.w	r2, r2, #4
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e007      	b.n	8002a7a <HAL_CAN_Init+0x1b8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0204 	bic.w	r2, r2, #4
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	ea42 0103 	orr.w	r1, r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	61da      	str	r2, [r3, #28]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2020 	strb.w	r2, [r3, #32]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_CAN_Start>:
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d12e      	bne.n	8002b2a <HAL_CAN_Start+0x72>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2020 	strb.w	r2, [r3, #32]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f7ff fa8c 	bl	8002000 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	e012      	b.n	8002b12 <HAL_CAN_Start+0x5a>
 8002aec:	f7ff fa88 	bl	8002000 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b0a      	cmp	r3, #10
 8002af8:	d90b      	bls.n	8002b12 <HAL_CAN_Start+0x5a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2205      	movs	r2, #5
 8002b0a:	f883 2020 	strb.w	r2, [r3, #32]
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e012      	b.n	8002b38 <HAL_CAN_Start+0x80>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e5      	bne.n	8002aec <HAL_CAN_Start+0x34>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b26:	2300      	movs	r3, #0
 8002b28:	e006      	b.n	8002b38 <HAL_CAN_Start+0x80>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b36:	2301      	movs	r3, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_CAN_AddTxMessage>:
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	@ 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b54:	77fb      	strb	r3, [r7, #31]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	7ffb      	ldrb	r3, [r7, #31]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d003      	beq.n	8002b6c <HAL_CAN_AddTxMessage+0x2c>
 8002b64:	7ffb      	ldrb	r3, [r7, #31]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	f040 80ad 	bne.w	8002cc6 <HAL_CAN_AddTxMessage+0x186>
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10a      	bne.n	8002b8c <HAL_CAN_AddTxMessage+0x4c>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_CAN_AddTxMessage+0x4c>
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8095 	beq.w	8002cb6 <HAL_CAN_AddTxMessage+0x176>
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	0e1b      	lsrs	r3, r3, #24
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	2201      	movs	r2, #1
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_CAN_AddTxMessage+0x84>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	055a      	lsls	r2, r3, #21
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	68f9      	ldr	r1, [r7, #12]
 8002bb4:	6809      	ldr	r1, [r1, #0]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3318      	adds	r3, #24
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	440b      	add	r3, r1
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e00f      	b.n	8002be4 <HAL_CAN_AddTxMessage+0xa4>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	00da      	lsls	r2, r3, #3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	68f9      	ldr	r1, [r7, #12]
 8002bd6:	6809      	ldr	r1, [r1, #0]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3318      	adds	r3, #24
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	440b      	add	r3, r1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3318      	adds	r3, #24
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	7d1b      	ldrb	r3, [r3, #20]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d111      	bne.n	8002c24 <HAL_CAN_AddTxMessage+0xe4>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3318      	adds	r3, #24
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	6811      	ldr	r1, [r2, #0]
 8002c14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3318      	adds	r3, #24
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	440b      	add	r3, r1
 8002c20:	3304      	adds	r3, #4
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3307      	adds	r3, #7
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	061a      	lsls	r2, r3, #24
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3306      	adds	r3, #6
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	041b      	lsls	r3, r3, #16
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3305      	adds	r3, #5
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	3204      	adds	r2, #4
 8002c44:	7812      	ldrb	r2, [r2, #0]
 8002c46:	4610      	mov	r0, r2
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	6811      	ldr	r1, [r2, #0]
 8002c4c:	ea43 0200 	orr.w	r2, r3, r0
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	440b      	add	r3, r1
 8002c56:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3303      	adds	r3, #3
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	061a      	lsls	r2, r3, #24
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3302      	adds	r3, #2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3301      	adds	r3, #1
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	4313      	orrs	r3, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	7812      	ldrb	r2, [r2, #0]
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	6811      	ldr	r1, [r2, #0]
 8002c82:	ea43 0200 	orr.w	r2, r3, r0
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3318      	adds	r3, #24
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	4413      	add	r3, r2
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	6811      	ldr	r1, [r2, #0]
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	3318      	adds	r3, #24
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	440b      	add	r3, r1
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e00e      	b.n	8002cd4 <HAL_CAN_AddTxMessage+0x194>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e006      	b.n	8002cd4 <HAL_CAN_AddTxMessage+0x194>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3724      	adds	r7, #36	@ 0x24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <HAL_CAN_IsTxMessagePending>:
 8002cde:	b480      	push	{r7}
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf2:	72fb      	strb	r3, [r7, #11]
 8002cf4:	7afb      	ldrb	r3, [r7, #11]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d002      	beq.n	8002d00 <HAL_CAN_IsTxMessagePending+0x22>
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d10b      	bne.n	8002d18 <HAL_CAN_IsTxMessagePending+0x3a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	069b      	lsls	r3, r3, #26
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	069b      	lsls	r3, r3, #26
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_CAN_IsTxMessagePending+0x3a>
 8002d14:	2301      	movs	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <__NVIC_SetPriorityGrouping>:
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	4a04      	ldr	r2, [pc, #16]	@ (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_GetPriorityGrouping>:
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_EnableIRQ>:
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db0b      	blt.n	8002db2 <__NVIC_EnableIRQ+0x2a>
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4906      	ldr	r1, [pc, #24]	@ (8002dbc <__NVIC_EnableIRQ+0x34>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2001      	movs	r0, #1
 8002daa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	@ (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	@ (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	@ 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	@ 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_NVIC_SetPriorityGrouping>:
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff4f 	bl	8002d24 <__NVIC_SetPriorityGrouping>
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_NVIC_SetPriority>:
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	f7ff ff64 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002ea4:	6178      	str	r0, [r7, #20]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f7ff ffb2 	bl	8002e14 <NVIC_EncodePriority>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff81 	bl	8002dc0 <__NVIC_SetPriority>
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_NVIC_EnableIRQ>:
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	4603      	mov	r3, r0
 8002ece:	71fb      	strb	r3, [r7, #7]
 8002ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff57 	bl	8002d88 <__NVIC_EnableIRQ>
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_GPIO_Init>:
 8002ee4:	b480      	push	{r7}
 8002ee6:	b08b      	sub	sp, #44	@ 0x2c
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	623b      	str	r3, [r7, #32]
 8002ef6:	e169      	b.n	80031cc <HAL_GPIO_Init+0x2e8>
 8002ef8:	2201      	movs	r2, #1
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f040 8158 	bne.w	80031c6 <HAL_GPIO_Init+0x2e2>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4a9a      	ldr	r2, [pc, #616]	@ (8003184 <HAL_GPIO_Init+0x2a0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d05e      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
 8002f20:	4a98      	ldr	r2, [pc, #608]	@ (8003184 <HAL_GPIO_Init+0x2a0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d875      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f26:	4a98      	ldr	r2, [pc, #608]	@ (8003188 <HAL_GPIO_Init+0x2a4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d058      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
 8002f2c:	4a96      	ldr	r2, [pc, #600]	@ (8003188 <HAL_GPIO_Init+0x2a4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d86f      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f32:	4a96      	ldr	r2, [pc, #600]	@ (800318c <HAL_GPIO_Init+0x2a8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d052      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
 8002f38:	4a94      	ldr	r2, [pc, #592]	@ (800318c <HAL_GPIO_Init+0x2a8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d869      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f3e:	4a94      	ldr	r2, [pc, #592]	@ (8003190 <HAL_GPIO_Init+0x2ac>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d04c      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
 8002f44:	4a92      	ldr	r2, [pc, #584]	@ (8003190 <HAL_GPIO_Init+0x2ac>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d863      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f4a:	4a92      	ldr	r2, [pc, #584]	@ (8003194 <HAL_GPIO_Init+0x2b0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d046      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
 8002f50:	4a90      	ldr	r2, [pc, #576]	@ (8003194 <HAL_GPIO_Init+0x2b0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d85d      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f56:	2b12      	cmp	r3, #18
 8002f58:	d82a      	bhi.n	8002fb0 <HAL_GPIO_Init+0xcc>
 8002f5a:	2b12      	cmp	r3, #18
 8002f5c:	d859      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f64 <HAL_GPIO_Init+0x80>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002fdf 	.word	0x08002fdf
 8002f68:	08002fb9 	.word	0x08002fb9
 8002f6c:	08002fcb 	.word	0x08002fcb
 8002f70:	0800300d 	.word	0x0800300d
 8002f74:	08003013 	.word	0x08003013
 8002f78:	08003013 	.word	0x08003013
 8002f7c:	08003013 	.word	0x08003013
 8002f80:	08003013 	.word	0x08003013
 8002f84:	08003013 	.word	0x08003013
 8002f88:	08003013 	.word	0x08003013
 8002f8c:	08003013 	.word	0x08003013
 8002f90:	08003013 	.word	0x08003013
 8002f94:	08003013 	.word	0x08003013
 8002f98:	08003013 	.word	0x08003013
 8002f9c:	08003013 	.word	0x08003013
 8002fa0:	08003013 	.word	0x08003013
 8002fa4:	08003013 	.word	0x08003013
 8002fa8:	08002fc1 	.word	0x08002fc1
 8002fac:	08002fd5 	.word	0x08002fd5
 8002fb0:	4a79      	ldr	r2, [pc, #484]	@ (8003198 <HAL_GPIO_Init+0x2b4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
 8002fb6:	e02c      	b.n	8003012 <HAL_GPIO_Init+0x12e>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	623b      	str	r3, [r7, #32]
 8002fbe:	e029      	b.n	8003014 <HAL_GPIO_Init+0x130>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	623b      	str	r3, [r7, #32]
 8002fc8:	e024      	b.n	8003014 <HAL_GPIO_Init+0x130>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	3308      	adds	r3, #8
 8002fd0:	623b      	str	r3, [r7, #32]
 8002fd2:	e01f      	b.n	8003014 <HAL_GPIO_Init+0x130>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	623b      	str	r3, [r7, #32]
 8002fdc:	e01a      	b.n	8003014 <HAL_GPIO_Init+0x130>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_GPIO_Init+0x108>
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	623b      	str	r3, [r7, #32]
 8002fea:	e013      	b.n	8003014 <HAL_GPIO_Init+0x130>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_GPIO_Init+0x11c>
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	611a      	str	r2, [r3, #16]
 8002ffe:	e009      	b.n	8003014 <HAL_GPIO_Init+0x130>
 8003000:	2308      	movs	r3, #8
 8003002:	623b      	str	r3, [r7, #32]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	615a      	str	r2, [r3, #20]
 800300a:	e003      	b.n	8003014 <HAL_GPIO_Init+0x130>
 800300c:	2300      	movs	r3, #0
 800300e:	623b      	str	r3, [r7, #32]
 8003010:	e000      	b.n	8003014 <HAL_GPIO_Init+0x130>
 8003012:	bf00      	nop
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2bff      	cmp	r3, #255	@ 0xff
 8003018:	d801      	bhi.n	800301e <HAL_GPIO_Init+0x13a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	e001      	b.n	8003022 <HAL_GPIO_Init+0x13e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2bff      	cmp	r3, #255	@ 0xff
 8003028:	d802      	bhi.n	8003030 <HAL_GPIO_Init+0x14c>
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	e002      	b.n	8003036 <HAL_GPIO_Init+0x152>
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	3b08      	subs	r3, #8
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	210f      	movs	r1, #15
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	401a      	ands	r2, r3
 8003048:	6a39      	ldr	r1, [r7, #32]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	431a      	orrs	r2, r3
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80b1 	beq.w	80031c6 <HAL_GPIO_Init+0x2e2>
 8003064:	4b4d      	ldr	r3, [pc, #308]	@ (800319c <HAL_GPIO_Init+0x2b8>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	4a4c      	ldr	r2, [pc, #304]	@ (800319c <HAL_GPIO_Init+0x2b8>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6193      	str	r3, [r2, #24]
 8003070:	4b4a      	ldr	r3, [pc, #296]	@ (800319c <HAL_GPIO_Init+0x2b8>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4a48      	ldr	r2, [pc, #288]	@ (80031a0 <HAL_GPIO_Init+0x2bc>)
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	3302      	adds	r3, #2
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	220f      	movs	r2, #15
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4013      	ands	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a40      	ldr	r2, [pc, #256]	@ (80031a4 <HAL_GPIO_Init+0x2c0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <HAL_GPIO_Init+0x1ec>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a3f      	ldr	r2, [pc, #252]	@ (80031a8 <HAL_GPIO_Init+0x2c4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00d      	beq.n	80030cc <HAL_GPIO_Init+0x1e8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a3e      	ldr	r2, [pc, #248]	@ (80031ac <HAL_GPIO_Init+0x2c8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d007      	beq.n	80030c8 <HAL_GPIO_Init+0x1e4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a3d      	ldr	r2, [pc, #244]	@ (80031b0 <HAL_GPIO_Init+0x2cc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <HAL_GPIO_Init+0x1e0>
 80030c0:	2303      	movs	r3, #3
 80030c2:	e006      	b.n	80030d2 <HAL_GPIO_Init+0x1ee>
 80030c4:	2304      	movs	r3, #4
 80030c6:	e004      	b.n	80030d2 <HAL_GPIO_Init+0x1ee>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e002      	b.n	80030d2 <HAL_GPIO_Init+0x1ee>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_GPIO_Init+0x1ee>
 80030d0:	2300      	movs	r3, #0
 80030d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d4:	f002 0203 	and.w	r2, r2, #3
 80030d8:	0092      	lsls	r2, r2, #2
 80030da:	4093      	lsls	r3, r2
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	492f      	ldr	r1, [pc, #188]	@ (80031a0 <HAL_GPIO_Init+0x2bc>)
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_GPIO_Init+0x226>
 80030fc:	4b2d      	ldr	r3, [pc, #180]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	492c      	ldr	r1, [pc, #176]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x234>
 800310a:	4b2a      	ldr	r3, [pc, #168]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	43db      	mvns	r3, r3
 8003112:	4928      	ldr	r1, [pc, #160]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003114:	4013      	ands	r3, r2
 8003116:	608b      	str	r3, [r1, #8]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <HAL_GPIO_Init+0x24e>
 8003124:	4b23      	ldr	r3, [pc, #140]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	4922      	ldr	r1, [pc, #136]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	60cb      	str	r3, [r1, #12]
 8003130:	e006      	b.n	8003140 <HAL_GPIO_Init+0x25c>
 8003132:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	43db      	mvns	r3, r3
 800313a:	491e      	ldr	r1, [pc, #120]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800313c:	4013      	ands	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d006      	beq.n	800315a <HAL_GPIO_Init+0x276>
 800314c:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	4918      	ldr	r1, [pc, #96]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
 8003158:	e006      	b.n	8003168 <HAL_GPIO_Init+0x284>
 800315a:	4b16      	ldr	r3, [pc, #88]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	43db      	mvns	r3, r3
 8003162:	4914      	ldr	r1, [pc, #80]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003164:	4013      	ands	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d021      	beq.n	80031b8 <HAL_GPIO_Init+0x2d4>
 8003174:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	490e      	ldr	r1, [pc, #56]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	600b      	str	r3, [r1, #0]
 8003180:	e021      	b.n	80031c6 <HAL_GPIO_Init+0x2e2>
 8003182:	bf00      	nop
 8003184:	10320000 	.word	0x10320000
 8003188:	10310000 	.word	0x10310000
 800318c:	10220000 	.word	0x10220000
 8003190:	10210000 	.word	0x10210000
 8003194:	10120000 	.word	0x10120000
 8003198:	10110000 	.word	0x10110000
 800319c:	40021000 	.word	0x40021000
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40010800 	.word	0x40010800
 80031a8:	40010c00 	.word	0x40010c00
 80031ac:	40011000 	.word	0x40011000
 80031b0:	40011400 	.word	0x40011400
 80031b4:	40010400 	.word	0x40010400
 80031b8:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <HAL_GPIO_Init+0x304>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	43db      	mvns	r3, r3
 80031c0:	4909      	ldr	r1, [pc, #36]	@ (80031e8 <HAL_GPIO_Init+0x304>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	3301      	adds	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f47f ae8e 	bne.w	8002ef8 <HAL_GPIO_Init+0x14>
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	372c      	adds	r7, #44	@ 0x2c
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	40010400 	.word	0x40010400

080031ec <HAL_GPIO_WritePin>:
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	807b      	strh	r3, [r7, #2]
 80031f8:	4613      	mov	r3, r2
 80031fa:	707b      	strb	r3, [r7, #1]
 80031fc:	787b      	ldrb	r3, [r7, #1]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_WritePin+0x1e>
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	611a      	str	r2, [r3, #16]
 8003208:	e003      	b.n	8003212 <HAL_GPIO_WritePin+0x26>
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	041a      	lsls	r2, r3, #16
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	611a      	str	r2, [r3, #16]
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_RCC_OscConfig>:
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_OscConfig+0x12>
 800322a:	2301      	movs	r3, #1
 800322c:	e272      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8087 	beq.w	800334a <HAL_RCC_OscConfig+0x12e>
 800323c:	4b92      	ldr	r3, [pc, #584]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b04      	cmp	r3, #4
 8003246:	d00c      	beq.n	8003262 <HAL_RCC_OscConfig+0x46>
 8003248:	4b8f      	ldr	r3, [pc, #572]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b08      	cmp	r3, #8
 8003252:	d112      	bne.n	800327a <HAL_RCC_OscConfig+0x5e>
 8003254:	4b8c      	ldr	r3, [pc, #560]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003260:	d10b      	bne.n	800327a <HAL_RCC_OscConfig+0x5e>
 8003262:	4b89      	ldr	r3, [pc, #548]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d06c      	beq.n	8003348 <HAL_RCC_OscConfig+0x12c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d168      	bne.n	8003348 <HAL_RCC_OscConfig+0x12c>
 8003276:	2301      	movs	r3, #1
 8003278:	e24c      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003282:	d106      	bne.n	8003292 <HAL_RCC_OscConfig+0x76>
 8003284:	4b80      	ldr	r3, [pc, #512]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a7f      	ldr	r2, [pc, #508]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 800328a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e02e      	b.n	80032f0 <HAL_RCC_OscConfig+0xd4>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x98>
 800329a:	4b7b      	ldr	r3, [pc, #492]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a7a      	ldr	r2, [pc, #488]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	4b78      	ldr	r3, [pc, #480]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a77      	ldr	r2, [pc, #476]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e01d      	b.n	80032f0 <HAL_RCC_OscConfig+0xd4>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0xbc>
 80032be:	4b72      	ldr	r3, [pc, #456]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a71      	ldr	r2, [pc, #452]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e00b      	b.n	80032f0 <HAL_RCC_OscConfig+0xd4>
 80032d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a6a      	ldr	r2, [pc, #424]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4b68      	ldr	r3, [pc, #416]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a67      	ldr	r2, [pc, #412]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d013      	beq.n	8003320 <HAL_RCC_OscConfig+0x104>
 80032f8:	f7fe fe82 	bl	8002000 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0xf6>
 8003300:	f7fe fe7e 	bl	8002000 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	@ 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0xf6>
 800330e:	2303      	movs	r3, #3
 8003310:	e200      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 8003312:	4b5d      	ldr	r3, [pc, #372]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0xe4>
 800331e:	e014      	b.n	800334a <HAL_RCC_OscConfig+0x12e>
 8003320:	f7fe fe6e 	bl	8002000 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x11e>
 8003328:	f7fe fe6a 	bl	8002000 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	@ 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x11e>
 8003336:	2303      	movs	r3, #3
 8003338:	e1ec      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 800333a:	4b53      	ldr	r3, [pc, #332]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x10c>
 8003346:	e000      	b.n	800334a <HAL_RCC_OscConfig+0x12e>
 8003348:	bf00      	nop
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d063      	beq.n	800341e <HAL_RCC_OscConfig+0x202>
 8003356:	4b4c      	ldr	r3, [pc, #304]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_RCC_OscConfig+0x15e>
 8003362:	4b49      	ldr	r3, [pc, #292]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b08      	cmp	r3, #8
 800336c:	d11c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x18c>
 800336e:	4b46      	ldr	r3, [pc, #280]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d116      	bne.n	80033a8 <HAL_RCC_OscConfig+0x18c>
 800337a:	4b43      	ldr	r3, [pc, #268]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_RCC_OscConfig+0x176>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d001      	beq.n	8003392 <HAL_RCC_OscConfig+0x176>
 800338e:	2301      	movs	r3, #1
 8003390:	e1c0      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 8003392:	4b3d      	ldr	r3, [pc, #244]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4939      	ldr	r1, [pc, #228]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
 80033a6:	e03a      	b.n	800341e <HAL_RCC_OscConfig+0x202>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d020      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1d6>
 80033b0:	4b36      	ldr	r3, [pc, #216]	@ (800348c <HAL_RCC_OscConfig+0x270>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	f7fe fe23 	bl	8002000 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x1b4>
 80033be:	f7fe fe1f 	bl	8002000 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x1b4>
 80033cc:	2303      	movs	r3, #3
 80033ce:	e1a1      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 80033d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x1a2>
 80033dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4927      	ldr	r1, [pc, #156]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]
 80033f0:	e015      	b.n	800341e <HAL_RCC_OscConfig+0x202>
 80033f2:	4b26      	ldr	r3, [pc, #152]	@ (800348c <HAL_RCC_OscConfig+0x270>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f7fe fe02 	bl	8002000 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x1f6>
 8003400:	f7fe fdfe 	bl	8002000 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x1f6>
 800340e:	2303      	movs	r3, #3
 8003410:	e180      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 8003412:	4b1d      	ldr	r3, [pc, #116]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x1e4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d03a      	beq.n	80034a0 <HAL_RCC_OscConfig+0x284>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d019      	beq.n	8003466 <HAL_RCC_OscConfig+0x24a>
 8003432:	4b17      	ldr	r3, [pc, #92]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	f7fe fde2 	bl	8002000 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x236>
 8003440:	f7fe fdde 	bl	8002000 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x236>
 800344e:	2303      	movs	r3, #3
 8003450:	e160      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 8003452:	4b0d      	ldr	r3, [pc, #52]	@ (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x224>
 800345e:	2001      	movs	r0, #1
 8003460:	f000 fafe 	bl	8003a60 <RCC_Delay>
 8003464:	e01c      	b.n	80034a0 <HAL_RCC_OscConfig+0x284>
 8003466:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f7fe fdc8 	bl	8002000 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]
 8003472:	e00f      	b.n	8003494 <HAL_RCC_OscConfig+0x278>
 8003474:	f7fe fdc4 	bl	8002000 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d908      	bls.n	8003494 <HAL_RCC_OscConfig+0x278>
 8003482:	2303      	movs	r3, #3
 8003484:	e146      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000
 800348c:	42420000 	.word	0x42420000
 8003490:	42420480 	.word	0x42420480
 8003494:	4b92      	ldr	r3, [pc, #584]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e9      	bne.n	8003474 <HAL_RCC_OscConfig+0x258>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80a6 	beq.w	80035fa <HAL_RCC_OscConfig+0x3de>
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]
 80034b2:	4b8b      	ldr	r3, [pc, #556]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10d      	bne.n	80034da <HAL_RCC_OscConfig+0x2be>
 80034be:	4b88      	ldr	r3, [pc, #544]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	4a87      	ldr	r2, [pc, #540]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	61d3      	str	r3, [r2, #28]
 80034ca:	4b85      	ldr	r3, [pc, #532]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2301      	movs	r3, #1
 80034d8:	75fb      	strb	r3, [r7, #23]
 80034da:	4b82      	ldr	r3, [pc, #520]	@ (80036e4 <HAL_RCC_OscConfig+0x4c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d118      	bne.n	8003518 <HAL_RCC_OscConfig+0x2fc>
 80034e6:	4b7f      	ldr	r3, [pc, #508]	@ (80036e4 <HAL_RCC_OscConfig+0x4c8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a7e      	ldr	r2, [pc, #504]	@ (80036e4 <HAL_RCC_OscConfig+0x4c8>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	f7fe fd85 	bl	8002000 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x2f0>
 80034fa:	f7fe fd81 	bl	8002000 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b64      	cmp	r3, #100	@ 0x64
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x2f0>
 8003508:	2303      	movs	r3, #3
 800350a:	e103      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 800350c:	4b75      	ldr	r3, [pc, #468]	@ (80036e4 <HAL_RCC_OscConfig+0x4c8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x2de>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x312>
 8003520:	4b6f      	ldr	r3, [pc, #444]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	4a6e      	ldr	r2, [pc, #440]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6213      	str	r3, [r2, #32]
 800352c:	e02d      	b.n	800358a <HAL_RCC_OscConfig+0x36e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x334>
 8003536:	4b6a      	ldr	r3, [pc, #424]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a69      	ldr	r2, [pc, #420]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	4b67      	ldr	r3, [pc, #412]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4a66      	ldr	r2, [pc, #408]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	6213      	str	r3, [r2, #32]
 800354e:	e01c      	b.n	800358a <HAL_RCC_OscConfig+0x36e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b05      	cmp	r3, #5
 8003556:	d10c      	bne.n	8003572 <HAL_RCC_OscConfig+0x356>
 8003558:	4b61      	ldr	r3, [pc, #388]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4a60      	ldr	r2, [pc, #384]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	f043 0304 	orr.w	r3, r3, #4
 8003562:	6213      	str	r3, [r2, #32]
 8003564:	4b5e      	ldr	r3, [pc, #376]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	4a5d      	ldr	r2, [pc, #372]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6213      	str	r3, [r2, #32]
 8003570:	e00b      	b.n	800358a <HAL_RCC_OscConfig+0x36e>
 8003572:	4b5b      	ldr	r3, [pc, #364]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a5a      	ldr	r2, [pc, #360]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	6213      	str	r3, [r2, #32]
 800357e:	4b58      	ldr	r3, [pc, #352]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4a57      	ldr	r2, [pc, #348]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f023 0304 	bic.w	r3, r3, #4
 8003588:	6213      	str	r3, [r2, #32]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d015      	beq.n	80035be <HAL_RCC_OscConfig+0x3a2>
 8003592:	f7fe fd35 	bl	8002000 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x394>
 800359a:	f7fe fd31 	bl	8002000 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x394>
 80035ac:	2303      	movs	r3, #3
 80035ae:	e0b1      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 80035b0:	4b4b      	ldr	r3, [pc, #300]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0ee      	beq.n	800359a <HAL_RCC_OscConfig+0x37e>
 80035bc:	e014      	b.n	80035e8 <HAL_RCC_OscConfig+0x3cc>
 80035be:	f7fe fd1f 	bl	8002000 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]
 80035c4:	e00a      	b.n	80035dc <HAL_RCC_OscConfig+0x3c0>
 80035c6:	f7fe fd1b 	bl	8002000 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x3c0>
 80035d8:	2303      	movs	r3, #3
 80035da:	e09b      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 80035dc:	4b40      	ldr	r3, [pc, #256]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ee      	bne.n	80035c6 <HAL_RCC_OscConfig+0x3aa>
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <HAL_RCC_OscConfig+0x3de>
 80035ee:	4b3c      	ldr	r3, [pc, #240]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4a3b      	ldr	r2, [pc, #236]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	61d3      	str	r3, [r2, #28]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8087 	beq.w	8003712 <HAL_RCC_OscConfig+0x4f6>
 8003604:	4b36      	ldr	r3, [pc, #216]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	2b08      	cmp	r3, #8
 800360e:	d061      	beq.n	80036d4 <HAL_RCC_OscConfig+0x4b8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d146      	bne.n	80036a6 <HAL_RCC_OscConfig+0x48a>
 8003618:	4b33      	ldr	r3, [pc, #204]	@ (80036e8 <HAL_RCC_OscConfig+0x4cc>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	f7fe fcef 	bl	8002000 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x41c>
 8003626:	f7fe fceb 	bl	8002000 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x41c>
 8003634:	2303      	movs	r3, #3
 8003636:	e06d      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 8003638:	4b29      	ldr	r3, [pc, #164]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <HAL_RCC_OscConfig+0x40a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364c:	d108      	bne.n	8003660 <HAL_RCC_OscConfig+0x444>
 800364e:	4b24      	ldr	r3, [pc, #144]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4921      	ldr	r1, [pc, #132]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
 8003660:	4b1f      	ldr	r3, [pc, #124]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a19      	ldr	r1, [r3, #32]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	430b      	orrs	r3, r1
 8003672:	491b      	ldr	r1, [pc, #108]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
 8003678:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <HAL_RCC_OscConfig+0x4cc>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	f7fe fcbf 	bl	8002000 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x47c>
 8003686:	f7fe fcbb 	bl	8002000 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x47c>
 8003694:	2303      	movs	r3, #3
 8003696:	e03d      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 8003698:	4b11      	ldr	r3, [pc, #68]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x46a>
 80036a4:	e035      	b.n	8003712 <HAL_RCC_OscConfig+0x4f6>
 80036a6:	4b10      	ldr	r3, [pc, #64]	@ (80036e8 <HAL_RCC_OscConfig+0x4cc>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	f7fe fca8 	bl	8002000 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x4aa>
 80036b4:	f7fe fca4 	bl	8002000 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x4aa>
 80036c2:	2303      	movs	r3, #3
 80036c4:	e026      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 80036c6:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x498>
 80036d2:	e01e      	b.n	8003712 <HAL_RCC_OscConfig+0x4f6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d107      	bne.n	80036ec <HAL_RCC_OscConfig+0x4d0>
 80036dc:	2301      	movs	r3, #1
 80036de:	e019      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	42420060 	.word	0x42420060
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <HAL_RCC_OscConfig+0x500>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d106      	bne.n	800370e <HAL_RCC_OscConfig+0x4f2>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	429a      	cmp	r2, r3
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x4f6>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 8003712:	2300      	movs	r3, #0
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000

08003720 <HAL_RCC_ClockConfig>:
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
 8003730:	2301      	movs	r3, #1
 8003732:	e0d0      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
 8003734:	4b6a      	ldr	r3, [pc, #424]	@ (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d910      	bls.n	8003764 <HAL_RCC_ClockConfig+0x44>
 8003742:	4b67      	ldr	r3, [pc, #412]	@ (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 0207 	bic.w	r2, r3, #7
 800374a:	4965      	ldr	r1, [pc, #404]	@ (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
 8003752:	4b63      	ldr	r3, [pc, #396]	@ (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x44>
 8003760:	2301      	movs	r3, #1
 8003762:	e0b8      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d020      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x92>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_ClockConfig+0x68>
 800377c:	4b59      	ldr	r3, [pc, #356]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a58      	ldr	r2, [pc, #352]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003786:	6053      	str	r3, [r2, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x80>
 8003794:	4b53      	ldr	r3, [pc, #332]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a52      	ldr	r2, [pc, #328]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800379e:	6053      	str	r3, [r2, #4]
 80037a0:	4b50      	ldr	r3, [pc, #320]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	494d      	ldr	r1, [pc, #308]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d040      	beq.n	8003840 <HAL_RCC_ClockConfig+0x120>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xb6>
 80037c6:	4b47      	ldr	r3, [pc, #284]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d115      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e07f      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xce>
 80037de:	4b41      	ldr	r3, [pc, #260]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e073      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
 80037ee:	4b3d      	ldr	r3, [pc, #244]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06b      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
 80037fe:	4b39      	ldr	r3, [pc, #228]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f023 0203 	bic.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4936      	ldr	r1, [pc, #216]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
 8003810:	f7fe fbf6 	bl	8002000 <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	e00a      	b.n	800382e <HAL_RCC_ClockConfig+0x10e>
 8003818:	f7fe fbf2 	bl	8002000 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x10e>
 800382a:	2303      	movs	r3, #3
 800382c:	e053      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
 800382e:	4b2d      	ldr	r3, [pc, #180]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 020c 	and.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	429a      	cmp	r2, r3
 800383e:	d1eb      	bne.n	8003818 <HAL_RCC_ClockConfig+0xf8>
 8003840:	4b27      	ldr	r3, [pc, #156]	@ (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d210      	bcs.n	8003870 <HAL_RCC_ClockConfig+0x150>
 800384e:	4b24      	ldr	r3, [pc, #144]	@ (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 0207 	bic.w	r2, r3, #7
 8003856:	4922      	ldr	r1, [pc, #136]	@ (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]
 800385e:	4b20      	ldr	r3, [pc, #128]	@ (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x150>
 800386c:	2301      	movs	r3, #1
 800386e:	e032      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_RCC_ClockConfig+0x16e>
 800387c:	4b19      	ldr	r3, [pc, #100]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4916      	ldr	r1, [pc, #88]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_RCC_ClockConfig+0x18e>
 800389a:	4b12      	ldr	r3, [pc, #72]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	490e      	ldr	r1, [pc, #56]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	604b      	str	r3, [r1, #4]
 80038ae:	f000 f821 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	490a      	ldr	r1, [pc, #40]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c0:	5ccb      	ldrb	r3, [r1, r3]
 80038c2:	fa22 f303 	lsr.w	r3, r2, r3
 80038c6:	4a09      	ldr	r2, [pc, #36]	@ (80038ec <HAL_RCC_ClockConfig+0x1cc>)
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b09      	ldr	r3, [pc, #36]	@ (80038f0 <HAL_RCC_ClockConfig+0x1d0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fa32 	bl	8001d38 <HAL_InitTick>
 80038d4:	2300      	movs	r3, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
 80038e8:	08007400 	.word	0x08007400
 80038ec:	20000004 	.word	0x20000004
 80038f0:	20000008 	.word	0x20000008

080038f4 <HAL_RCC_GetSysClockFreq>:
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	4b1e      	ldr	r3, [pc, #120]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x94>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d002      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x30>
 800391e:	2b08      	cmp	r3, #8
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x36>
 8003922:	e027      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x80>
 8003924:	4b19      	ldr	r3, [pc, #100]	@ (800398c <HAL_RCC_GetSysClockFreq+0x98>)
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	e027      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x86>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	0c9b      	lsrs	r3, r3, #18
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	4a17      	ldr	r2, [pc, #92]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003934:	5cd3      	ldrb	r3, [r2, r3]
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x70>
 8003942:	4b11      	ldr	r3, [pc, #68]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x94>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	0c5b      	lsrs	r3, r3, #17
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	4a11      	ldr	r2, [pc, #68]	@ (8003994 <HAL_RCC_GetSysClockFreq+0xa0>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a0d      	ldr	r2, [pc, #52]	@ (800398c <HAL_RCC_GetSysClockFreq+0x98>)
 8003956:	fb03 f202 	mul.w	r2, r3, r2
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e004      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x7a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0c      	ldr	r2, [pc, #48]	@ (8003998 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	e002      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x86>
 8003974:	4b05      	ldr	r3, [pc, #20]	@ (800398c <HAL_RCC_GetSysClockFreq+0x98>)
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	bf00      	nop
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4618      	mov	r0, r3
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	007a1200 	.word	0x007a1200
 8003990:	08007418 	.word	0x08007418
 8003994:	08007428 	.word	0x08007428
 8003998:	003d0900 	.word	0x003d0900

0800399c <HAL_RCC_GetHCLKFreq>:
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
 80039a0:	4b02      	ldr	r3, [pc, #8]	@ (80039ac <HAL_RCC_GetHCLKFreq+0x10>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	20000004 	.word	0x20000004

080039b0 <HAL_RCC_GetPCLK1Freq>:
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	f7ff fff2 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4903      	ldr	r1, [pc, #12]	@ (80039d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	08007410 	.word	0x08007410

080039d8 <HAL_RCC_GetPCLK2Freq>:
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
 80039dc:	f7ff ffde 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b05      	ldr	r3, [pc, #20]	@ (80039f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	0adb      	lsrs	r3, r3, #11
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4903      	ldr	r1, [pc, #12]	@ (80039fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08007410 	.word	0x08007410

08003a00 <HAL_RCC_GetClockConfig>:
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	220f      	movs	r2, #15
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	4b11      	ldr	r3, [pc, #68]	@ (8003a58 <HAL_RCC_GetClockConfig+0x58>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0203 	and.w	r2, r3, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a58 <HAL_RCC_GetClockConfig+0x58>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <HAL_RCC_GetClockConfig+0x58>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60da      	str	r2, [r3, #12]
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <HAL_RCC_GetClockConfig+0x58>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	08db      	lsrs	r3, r3, #3
 8003a3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	611a      	str	r2, [r3, #16]
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <HAL_RCC_GetClockConfig+0x5c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0207 	and.w	r2, r3, #7
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40022000 	.word	0x40022000

08003a60 <RCC_Delay>:
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <RCC_Delay+0x34>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a98 <RCC_Delay+0x38>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0a5b      	lsrs	r3, r3, #9
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	bf00      	nop
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1e5a      	subs	r2, r3, #1
 8003a82:	60fa      	str	r2, [r7, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f9      	bne.n	8003a7c <RCC_Delay+0x1c>
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	20000004 	.word	0x20000004
 8003a98:	10624dd3 	.word	0x10624dd3

08003a9c <HAL_RCCEx_PeriphCLKConfig>:
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d07d      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	75fb      	strb	r3, [r7, #23]
 8003abc:	4b4f      	ldr	r3, [pc, #316]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10d      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4a4b      	ldr	r2, [pc, #300]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	61d3      	str	r3, [r2, #28]
 8003ad4:	4b49      	ldr	r3, [pc, #292]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
 8003ae4:	4b46      	ldr	r3, [pc, #280]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d118      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8003af0:	4b43      	ldr	r3, [pc, #268]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a42      	ldr	r2, [pc, #264]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	f7fe fa80 	bl	8002000 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]
 8003b02:	e008      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b04:	f7fe fa7c 	bl	8002000 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b12:	2303      	movs	r3, #3
 8003b14:	e06d      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8003b16:	4b3a      	ldr	r3, [pc, #232]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003b22:	4b36      	ldr	r3, [pc, #216]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d02e      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d027      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b40:	4b2e      	ldr	r3, [pc, #184]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	4b2c      	ldr	r3, [pc, #176]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	4a29      	ldr	r2, [pc, #164]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6213      	str	r3, [r2, #32]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d014      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b66:	f7fe fa4b 	bl	8002000 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003b6e:	f7fe fa47 	bl	8002000 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003b80:	2303      	movs	r3, #3
 8003b82:	e036      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8003b84:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ee      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8003b90:	4b1a      	ldr	r3, [pc, #104]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4917      	ldr	r1, [pc, #92]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	620b      	str	r3, [r1, #32]
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003ba8:	4b14      	ldr	r3, [pc, #80]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	4a13      	ldr	r2, [pc, #76]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb2:	61d3      	str	r3, [r2, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	490b      	ldr	r1, [pc, #44]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bde:	4b07      	ldr	r3, [pc, #28]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4904      	ldr	r1, [pc, #16]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40007000 	.word	0x40007000
 8003c04:	42420440 	.word	0x42420440

08003c08 <HAL_RCCEx_GetPeriphCLKFreq>:
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	2300      	movs	r3, #0
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	f200 808a 	bhi.w	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d045      	beq.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d075      	beq.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8003c3e:	e082      	b.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003c40:	4b46      	ldr	r3, [pc, #280]	@ (8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	4b45      	ldr	r3, [pc, #276]	@ (8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d07b      	beq.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	0c9b      	lsrs	r3, r3, #18
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	4a41      	ldr	r2, [pc, #260]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003c5c:	5cd3      	ldrb	r3, [r2, r3]
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d015      	beq.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 8003c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	0c5b      	lsrs	r3, r3, #17
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	4a3b      	ldr	r2, [pc, #236]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003c76:	5cd3      	ldrb	r3, [r2, r3]
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00d      	beq.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003c84:	4a38      	ldr	r2, [pc, #224]	@ (8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	e004      	b.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4a34      	ldr	r2, [pc, #208]	@ (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e04a      	b.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	e042      	b.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003cc4:	4b25      	ldr	r3, [pc, #148]	@ (8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cd4:	d108      	bne.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003ce0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	e01f      	b.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cf2:	d109      	bne.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003cf4:	4b19      	ldr	r3, [pc, #100]	@ (8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d00:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e00f      	b.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d12:	d11c      	bne.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d14:	4b11      	ldr	r3, [pc, #68]	@ (8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d016      	beq.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d20:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	e012      	b.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d28:	e011      	b.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d2a:	f7ff fe55 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	0b9b      	lsrs	r3, r3, #14
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	e004      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003d46:	bf00      	nop
 8003d48:	e002      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003d4e:	bf00      	nop
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	0800742c 	.word	0x0800742c
 8003d64:	0800743c 	.word	0x0800743c
 8003d68:	007a1200 	.word	0x007a1200
 8003d6c:	003d0900 	.word	0x003d0900
 8003d70:	aaaaaaab 	.word	0xaaaaaaab

08003d74 <HAL_TIM_Base_Init>:
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_Base_Init+0x12>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e041      	b.n	8003e0a <HAL_TIM_Base_Init+0x96>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_TIM_Base_Init+0x2c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fe f8c4 	bl	8001f28 <HAL_TIM_Base_MspInit>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f000 facc 	bl	8004350 <TIM_Base_SetConfig>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_TIM_Base_Start>:
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d001      	beq.n	8003e2c <HAL_TIM_Base_Start+0x18>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e032      	b.n	8003e92 <HAL_TIM_Base_Start+0x7e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a18      	ldr	r2, [pc, #96]	@ (8003e9c <HAL_TIM_Base_Start+0x88>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00e      	beq.n	8003e5c <HAL_TIM_Base_Start+0x48>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e46:	d009      	beq.n	8003e5c <HAL_TIM_Base_Start+0x48>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ea0 <HAL_TIM_Base_Start+0x8c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_TIM_Base_Start+0x48>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a13      	ldr	r2, [pc, #76]	@ (8003ea4 <HAL_TIM_Base_Start+0x90>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d111      	bne.n	8003e80 <HAL_TIM_Base_Start+0x6c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d010      	beq.n	8003e90 <HAL_TIM_Base_Start+0x7c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e007      	b.n	8003e90 <HAL_TIM_Base_Start+0x7c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	2300      	movs	r3, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800

08003ea8 <HAL_TIM_Base_Stop>:
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a1a      	ldr	r2, [r3, #32]
 8003eb6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10f      	bne.n	8003ee0 <HAL_TIM_Base_Stop+0x38>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6a1a      	ldr	r2, [r3, #32]
 8003ec6:	f240 4344 	movw	r3, #1092	@ 0x444
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d107      	bne.n	8003ee0 <HAL_TIM_Base_Stop+0x38>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ee8:	2300      	movs	r3, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIM_Base_Start_IT>:
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d001      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x18>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e03a      	b.n	8003f82 <HAL_TIM_Base_Start_IT+0x8e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a18      	ldr	r2, [pc, #96]	@ (8003f8c <HAL_TIM_Base_Start_IT+0x98>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00e      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x58>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f36:	d009      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x58>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a14      	ldr	r2, [pc, #80]	@ (8003f90 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d004      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x58>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a13      	ldr	r2, [pc, #76]	@ (8003f94 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d111      	bne.n	8003f70 <HAL_TIM_Base_Start_IT+0x7c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b06      	cmp	r3, #6
 8003f5c:	d010      	beq.n	8003f80 <HAL_TIM_Base_Start_IT+0x8c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0201 	orr.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e007      	b.n	8003f80 <HAL_TIM_Base_Start_IT+0x8c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	2300      	movs	r3, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800

08003f98 <HAL_TIM_IRQHandler>:
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d020      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x64>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x64>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0202 	mvn.w	r2, #2
 8003fcc:	611a      	str	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	771a      	strb	r2, [r3, #28]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0x52>
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f998 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0x5e>
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f98b 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f99a 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d020      	beq.n	8004048 <HAL_TIM_IRQHandler+0xb0>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01b      	beq.n	8004048 <HAL_TIM_IRQHandler+0xb0>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0204 	mvn.w	r2, #4
 8004018:	611a      	str	r2, [r3, #16]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2202      	movs	r2, #2
 800401e:	771a      	strb	r2, [r3, #28]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x9e>
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f972 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xaa>
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f965 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f974 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d020      	beq.n	8004094 <HAL_TIM_IRQHandler+0xfc>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <HAL_TIM_IRQHandler+0xfc>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0208 	mvn.w	r2, #8
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2204      	movs	r2, #4
 800406a:	771a      	strb	r2, [r3, #28]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0xea>
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f94c 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0xf6>
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f93f 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f94e 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	d020      	beq.n	80040e0 <HAL_TIM_IRQHandler+0x148>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01b      	beq.n	80040e0 <HAL_TIM_IRQHandler+0x148>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0210 	mvn.w	r2, #16
 80040b0:	611a      	str	r2, [r3, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2208      	movs	r2, #8
 80040b6:	771a      	strb	r2, [r3, #28]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_TIM_IRQHandler+0x136>
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f926 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 80040cc:	e005      	b.n	80040da <HAL_TIM_IRQHandler+0x142>
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f919 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f928 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00c      	beq.n	8004104 <HAL_TIM_IRQHandler+0x16c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d007      	beq.n	8004104 <HAL_TIM_IRQHandler+0x16c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0201 	mvn.w	r2, #1
 80040fc:	611a      	str	r2, [r3, #16]
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fd fcc8 	bl	8001a94 <HAL_TIM_PeriodElapsedCallback>
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00c      	beq.n	8004128 <HAL_TIM_IRQHandler+0x190>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <HAL_TIM_IRQHandler+0x190>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004120:	611a      	str	r2, [r3, #16]
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa7f 	bl	8004626 <HAL_TIMEx_BreakCallback>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00c      	beq.n	800414c <HAL_TIM_IRQHandler+0x1b4>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <HAL_TIM_IRQHandler+0x1b4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004144:	611a      	str	r2, [r3, #16]
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f8f8 	bl	800433c <HAL_TIM_TriggerCallback>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00c      	beq.n	8004170 <HAL_TIM_IRQHandler+0x1d8>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <HAL_TIM_IRQHandler+0x1d8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0220 	mvn.w	r2, #32
 8004168:	611a      	str	r2, [r3, #16]
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fa52 	bl	8004614 <HAL_TIMEx_CommutCallback>
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_TIM_ConfigClockSource>:
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_TIM_ConfigClockSource+0x1c>
 8004190:	2302      	movs	r3, #2
 8004192:	e0b4      	b.n	80042fe <HAL_TIM_ConfigClockSource+0x186>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041cc:	d03e      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xd4>
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041d2:	f200 8087 	bhi.w	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041da:	f000 8086 	beq.w	80042ea <HAL_TIM_ConfigClockSource+0x172>
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e2:	d87f      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041e4:	2b70      	cmp	r3, #112	@ 0x70
 80041e6:	d01a      	beq.n	800421e <HAL_TIM_ConfigClockSource+0xa6>
 80041e8:	2b70      	cmp	r3, #112	@ 0x70
 80041ea:	d87b      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041ec:	2b60      	cmp	r3, #96	@ 0x60
 80041ee:	d050      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0x11a>
 80041f0:	2b60      	cmp	r3, #96	@ 0x60
 80041f2:	d877      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b50      	cmp	r3, #80	@ 0x50
 80041f6:	d03c      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0xfa>
 80041f8:	2b50      	cmp	r3, #80	@ 0x50
 80041fa:	d873      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b40      	cmp	r3, #64	@ 0x40
 80041fe:	d058      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004200:	2b40      	cmp	r3, #64	@ 0x40
 8004202:	d86f      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b30      	cmp	r3, #48	@ 0x30
 8004206:	d064      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004208:	2b30      	cmp	r3, #48	@ 0x30
 800420a:	d86b      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d060      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004210:	2b20      	cmp	r3, #32
 8004212:	d867      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d05c      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004218:	2b10      	cmp	r3, #16
 800421a:	d05a      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 800421c:	e062      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6899      	ldr	r1, [r3, #8]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f000 f974 	bl	800451a <TIM_ETR_SetConfig>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	e04f      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6899      	ldr	r1, [r3, #8]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f000 f95d 	bl	800451a <TIM_ETR_SetConfig>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	e03c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6859      	ldr	r1, [r3, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	461a      	mov	r2, r3
 8004280:	f000 f8d4 	bl	800442c <TIM_TI1_ConfigInputStage>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2150      	movs	r1, #80	@ 0x50
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f92b 	bl	80044e6 <TIM_ITRx_SetConfig>
 8004290:	e02c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6859      	ldr	r1, [r3, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	461a      	mov	r2, r3
 80042a0:	f000 f8f2 	bl	8004488 <TIM_TI2_ConfigInputStage>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2160      	movs	r1, #96	@ 0x60
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f91b 	bl	80044e6 <TIM_ITRx_SetConfig>
 80042b0:	e01c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6859      	ldr	r1, [r3, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	461a      	mov	r2, r3
 80042c0:	f000 f8b4 	bl	800442c <TIM_TI1_ConfigInputStage>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2140      	movs	r1, #64	@ 0x40
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f90b 	bl	80044e6 <TIM_ITRx_SetConfig>
 80042d0:	e00c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4619      	mov	r1, r3
 80042dc:	4610      	mov	r0, r2
 80042de:	f000 f902 	bl	80044e6 <TIM_ITRx_SetConfig>
 80042e2:	e003      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
 80042e8:	e000      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
 80042ea:	bf00      	nop
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_TIM_OC_DelayElapsedCallback>:
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_IC_CaptureCallback>:
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_PWM_PulseFinishedCallback>:
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <HAL_TIM_TriggerCallback>:
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr
	...

08004350 <TIM_Base_SetConfig>:
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a2f      	ldr	r2, [pc, #188]	@ (8004420 <TIM_Base_SetConfig+0xd0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00b      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436e:	d007      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a2c      	ldr	r2, [pc, #176]	@ (8004424 <TIM_Base_SetConfig+0xd4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a2b      	ldr	r2, [pc, #172]	@ (8004428 <TIM_Base_SetConfig+0xd8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d108      	bne.n	8004392 <TIM_Base_SetConfig+0x42>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a22      	ldr	r2, [pc, #136]	@ (8004420 <TIM_Base_SetConfig+0xd0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a0:	d007      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004424 <TIM_Base_SetConfig+0xd4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004428 <TIM_Base_SetConfig+0xd8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <TIM_Base_SetConfig+0x74>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004420 <TIM_Base_SetConfig+0xd0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d103      	bne.n	80043f8 <TIM_Base_SetConfig+0xa8>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	615a      	str	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <TIM_Base_SetConfig+0xc6>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f023 0201 	bic.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	611a      	str	r2, [r3, #16]
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800

0800442c <TIM_TI1_ConfigInputStage>:
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f023 030a 	bic.w	r3, r3, #10
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	619a      	str	r2, [r3, #24]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	621a      	str	r2, [r3, #32]
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <TIM_TI2_ConfigInputStage>:
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0210 	bic.w	r2, r3, #16
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	031b      	lsls	r3, r3, #12
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	619a      	str	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	621a      	str	r2, [r3, #32]
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <TIM_ITRx_SetConfig>:
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	f043 0307 	orr.w	r3, r3, #7
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <TIM_ETR_SetConfig>:
 800451a:	b480      	push	{r7}
 800451c:	b087      	sub	sp, #28
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	021a      	lsls	r2, r3, #8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	431a      	orrs	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4313      	orrs	r3, r2
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	609a      	str	r2, [r3, #8]
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_MasterConfigSynchronization>:
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800456c:	2302      	movs	r3, #2
 800456e:	e046      	b.n	80045fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a16      	ldr	r2, [pc, #88]	@ (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00e      	beq.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045bc:	d009      	beq.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a12      	ldr	r2, [pc, #72]	@ (800460c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a10      	ldr	r2, [pc, #64]	@ (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d10c      	bne.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60bb      	str	r3, [r7, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80045fc:	2300      	movs	r3, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40000400 	.word	0x40000400
 8004610:	40000800 	.word	0x40000800

08004614 <HAL_TIMEx_CommutCallback>:
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <HAL_TIMEx_BreakCallback>:
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <__NVIC_SetPriority>:
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	71fb      	strb	r3, [r7, #7]
 8004644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004648:	2b00      	cmp	r3, #0
 800464a:	db0a      	blt.n	8004662 <__NVIC_SetPriority+0x2a>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	490c      	ldr	r1, [pc, #48]	@ (8004684 <__NVIC_SetPriority+0x4c>)
 8004652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004656:	0112      	lsls	r2, r2, #4
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	440b      	add	r3, r1
 800465c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8004660:	e00a      	b.n	8004678 <__NVIC_SetPriority+0x40>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	4908      	ldr	r1, [pc, #32]	@ (8004688 <__NVIC_SetPriority+0x50>)
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	3b04      	subs	r3, #4
 8004670:	0112      	lsls	r2, r2, #4
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	440b      	add	r3, r1
 8004676:	761a      	strb	r2, [r3, #24]
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	e000e100 	.word	0xe000e100
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <SysTick_Handler>:
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
 8004690:	4b05      	ldr	r3, [pc, #20]	@ (80046a8 <SysTick_Handler+0x1c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f001 fd66 	bl	8006164 <xTaskGetSchedulerState>
 8004698:	4603      	mov	r3, r0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d001      	beq.n	80046a2 <SysTick_Handler+0x16>
 800469e:	f002 fb0b 	bl	8006cb8 <xPortSysTickHandler>
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	e000e010 	.word	0xe000e010

080046ac <SVC_Setup>:
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	2100      	movs	r1, #0
 80046b2:	f06f 0004 	mvn.w	r0, #4
 80046b6:	f7ff ffbf 	bl	8004638 <__NVIC_SetPriority>
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <osKernelInitialize>:
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	f3ef 8305 	mrs	r3, IPSR
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <osKernelInitialize+0x1a>
 80046d2:	f06f 0305 	mvn.w	r3, #5
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	e00c      	b.n	80046f4 <osKernelInitialize+0x34>
 80046da:	4b09      	ldr	r3, [pc, #36]	@ (8004700 <osKernelInitialize+0x40>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d105      	bne.n	80046ee <osKernelInitialize+0x2e>
 80046e2:	4b07      	ldr	r3, [pc, #28]	@ (8004700 <osKernelInitialize+0x40>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	607b      	str	r3, [r7, #4]
 80046ec:	e002      	b.n	80046f4 <osKernelInitialize+0x34>
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	200003d8 	.word	0x200003d8

08004704 <osKernelStart>:
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	f3ef 8305 	mrs	r3, IPSR
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <osKernelStart+0x1a>
 8004716:	f06f 0305 	mvn.w	r3, #5
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	e010      	b.n	8004740 <osKernelStart+0x3c>
 800471e:	4b0b      	ldr	r3, [pc, #44]	@ (800474c <osKernelStart+0x48>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d109      	bne.n	800473a <osKernelStart+0x36>
 8004726:	f7ff ffc1 	bl	80046ac <SVC_Setup>
 800472a:	4b08      	ldr	r3, [pc, #32]	@ (800474c <osKernelStart+0x48>)
 800472c:	2202      	movs	r2, #2
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f001 f8b8 	bl	80058a4 <vTaskStartScheduler>
 8004734:	2300      	movs	r3, #0
 8004736:	607b      	str	r3, [r7, #4]
 8004738:	e002      	b.n	8004740 <osKernelStart+0x3c>
 800473a:	f04f 33ff 	mov.w	r3, #4294967295
 800473e:	607b      	str	r3, [r7, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	200003d8 	.word	0x200003d8

08004750 <osThreadNew>:
 8004750:	b580      	push	{r7, lr}
 8004752:	b08e      	sub	sp, #56	@ 0x38
 8004754:	af04      	add	r7, sp, #16
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	f3ef 8305 	mrs	r3, IPSR
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d17e      	bne.n	800486a <osThreadNew+0x11a>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d07b      	beq.n	800486a <osThreadNew+0x11a>
 8004772:	2380      	movs	r3, #128	@ 0x80
 8004774:	623b      	str	r3, [r7, #32]
 8004776:	2318      	movs	r3, #24
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	@ 0x24
 800477e:	f04f 33ff 	mov.w	r3, #4294967295
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d045      	beq.n	8004816 <osThreadNew+0xc6>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <osThreadNew+0x48>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	627b      	str	r3, [r7, #36]	@ 0x24
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <osThreadNew+0x56>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <osThreadNew+0x6e>
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b38      	cmp	r3, #56	@ 0x38
 80047b0:	d805      	bhi.n	80047be <osThreadNew+0x6e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <osThreadNew+0x72>
 80047be:	2300      	movs	r3, #0
 80047c0:	e054      	b.n	800486c <osThreadNew+0x11c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <osThreadNew+0x82>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00e      	beq.n	80047f8 <osThreadNew+0xa8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2ba7      	cmp	r3, #167	@ 0xa7
 80047e0:	d90a      	bls.n	80047f8 <osThreadNew+0xa8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d006      	beq.n	80047f8 <osThreadNew+0xa8>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <osThreadNew+0xa8>
 80047f2:	2301      	movs	r3, #1
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	e010      	b.n	800481a <osThreadNew+0xca>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10c      	bne.n	800481a <osThreadNew+0xca>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d108      	bne.n	800481a <osThreadNew+0xca>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d104      	bne.n	800481a <osThreadNew+0xca>
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	e001      	b.n	800481a <osThreadNew+0xca>
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d110      	bne.n	8004842 <osThreadNew+0xf2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6892      	ldr	r2, [r2, #8]
 8004828:	9202      	str	r2, [sp, #8]
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6a3a      	ldr	r2, [r7, #32]
 8004834:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fdf6 	bl	8005428 <xTaskCreateStatic>
 800483c:	4603      	mov	r3, r0
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	e013      	b.n	800486a <osThreadNew+0x11a>
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d110      	bne.n	800486a <osThreadNew+0x11a>
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	b29a      	uxth	r2, r3
 800484c:	f107 0310 	add.w	r3, r7, #16
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fe44 	bl	80054e8 <xTaskCreate>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d001      	beq.n	800486a <osThreadNew+0x11a>
 8004866:	2300      	movs	r3, #0
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4618      	mov	r0, r3
 800486e:	3728      	adds	r7, #40	@ 0x28
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <vApplicationGetIdleTaskMemory>:
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a06      	ldr	r2, [pc, #24]	@ (800489c <vApplicationGetIdleTaskMemory+0x28>)
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4a05      	ldr	r2, [pc, #20]	@ (80048a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2280      	movs	r2, #128	@ 0x80
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	200003dc 	.word	0x200003dc
 80048a0:	20000484 	.word	0x20000484

080048a4 <vApplicationGetTimerTaskMemory>:
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a07      	ldr	r2, [pc, #28]	@ (80048d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4a06      	ldr	r2, [pc, #24]	@ (80048d4 <vApplicationGetTimerTaskMemory+0x30>)
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	bf00      	nop
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000684 	.word	0x20000684
 80048d4:	2000072c 	.word	0x2000072c

080048d8 <vListInitialise>:
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f103 0208 	add.w	r2, r3, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f04f 32ff 	mov.w	r2, #4294967295
 80048f0:	609a      	str	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f103 0208 	add.w	r2, r3, #8
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f103 0208 	add.w	r2, r3, #8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr

08004916 <vListInitialiseItem>:
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	611a      	str	r2, [r3, #16]
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <vListInsertEnd>:
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	605a      	str	r2, [r3, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	609a      	str	r2, [r3, #8]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	605a      	str	r2, [r3, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	609a      	str	r2, [r3, #8]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	611a      	str	r2, [r3, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <vListInsert>:
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d103      	bne.n	8004994 <vListInsert+0x20>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	e00c      	b.n	80049ae <vListInsert+0x3a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3308      	adds	r3, #8
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e002      	b.n	80049a2 <vListInsert+0x2e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d2f6      	bcs.n	800499c <vListInsert+0x28>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	609a      	str	r2, [r3, #8]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	609a      	str	r2, [r3, #8]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	611a      	str	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <uxListRemove>:
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6892      	ldr	r2, [r2, #8]
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6852      	ldr	r2, [r2, #4]
 8004a04:	605a      	str	r2, [r3, #4]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d103      	bne.n	8004a18 <uxListRemove+0x34>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	605a      	str	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	611a      	str	r2, [r3, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	1e5a      	subs	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
	...

08004a38 <xQueueGenericReset>:
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <xQueueGenericReset+0x2c>
 8004a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	bf00      	nop
 8004a60:	bf00      	nop
 8004a62:	e7fd      	b.n	8004a60 <xQueueGenericReset+0x28>
 8004a64:	f002 f8aa 	bl	8006bbc <vPortEnterCritical>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a70:	68f9      	ldr	r1, [r7, #12]
 8004a72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	441a      	add	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	609a      	str	r2, [r3, #8]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	605a      	str	r2, [r3, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a94:	3b01      	subs	r3, #1
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	441a      	add	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	22ff      	movs	r2, #255	@ 0xff
 8004aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	22ff      	movs	r2, #255	@ 0xff
 8004ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d114      	bne.n	8004ae4 <xQueueGenericReset+0xac>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01a      	beq.n	8004af8 <xQueueGenericReset+0xc0>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3310      	adds	r3, #16
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 f986 	bl	8005dd8 <xTaskRemoveFromEventList>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d012      	beq.n	8004af8 <xQueueGenericReset+0xc0>
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b08 <xQueueGenericReset+0xd0>)
 8004ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	e009      	b.n	8004af8 <xQueueGenericReset+0xc0>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3310      	adds	r3, #16
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fef5 	bl	80048d8 <vListInitialise>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3324      	adds	r3, #36	@ 0x24
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fef0 	bl	80048d8 <vListInitialise>
 8004af8:	f002 f890 	bl	8006c1c <vPortExitCritical>
 8004afc:	2301      	movs	r3, #1
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <xQueueGenericCreateStatic>:
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08e      	sub	sp, #56	@ 0x38
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10b      	bne.n	8004b38 <xQueueGenericCreateStatic+0x2c>
 8004b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
 8004b36:	e7fd      	b.n	8004b34 <xQueueGenericCreateStatic+0x28>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <xQueueGenericCreateStatic+0x4a>
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	e7fd      	b.n	8004b52 <xQueueGenericCreateStatic+0x46>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <xQueueGenericCreateStatic+0x56>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <xQueueGenericCreateStatic+0x5a>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <xQueueGenericCreateStatic+0x5c>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10b      	bne.n	8004b84 <xQueueGenericCreateStatic+0x78>
 8004b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	623b      	str	r3, [r7, #32]
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	e7fd      	b.n	8004b80 <xQueueGenericCreateStatic+0x74>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <xQueueGenericCreateStatic+0x84>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <xQueueGenericCreateStatic+0x88>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <xQueueGenericCreateStatic+0x8a>
 8004b94:	2300      	movs	r3, #0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <xQueueGenericCreateStatic+0xa6>
 8004b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	61fb      	str	r3, [r7, #28]
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	e7fd      	b.n	8004bae <xQueueGenericCreateStatic+0xa2>
 8004bb2:	2350      	movs	r3, #80	@ 0x50
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b50      	cmp	r3, #80	@ 0x50
 8004bba:	d00b      	beq.n	8004bd4 <xQueueGenericCreateStatic+0xc8>
 8004bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <xQueueGenericCreateStatic+0xc4>
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00d      	beq.n	8004bfc <xQueueGenericCreateStatic+0xf0>
 8004be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004be8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f805 	bl	8004c06 <prvInitialiseNewQueue>
 8004bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3730      	adds	r7, #48	@ 0x30
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <prvInitialiseNewQueue>:
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	70fb      	strb	r3, [r7, #3]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <prvInitialiseNewQueue+0x1c>
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e002      	b.n	8004c28 <prvInitialiseNewQueue+0x22>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c34:	2101      	movs	r1, #1
 8004c36:	69b8      	ldr	r0, [r7, #24]
 8004c38:	f7ff fefe 	bl	8004a38 <xQueueGenericReset>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <xQueueGenericSend>:
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08e      	sub	sp, #56	@ 0x38
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <xQueueGenericSend+0x34>
 8004c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <xQueueGenericSend+0x30>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <xQueueGenericSend+0x42>
 8004c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <xQueueGenericSend+0x46>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <xQueueGenericSend+0x48>
 8004c92:	2300      	movs	r3, #0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10b      	bne.n	8004cb0 <xQueueGenericSend+0x64>
 8004c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	e7fd      	b.n	8004cac <xQueueGenericSend+0x60>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d103      	bne.n	8004cbe <xQueueGenericSend+0x72>
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <xQueueGenericSend+0x76>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <xQueueGenericSend+0x78>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <xQueueGenericSend+0x94>
 8004cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	623b      	str	r3, [r7, #32]
 8004cda:	bf00      	nop
 8004cdc:	bf00      	nop
 8004cde:	e7fd      	b.n	8004cdc <xQueueGenericSend+0x90>
 8004ce0:	f001 fa40 	bl	8006164 <xTaskGetSchedulerState>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <xQueueGenericSend+0xa4>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <xQueueGenericSend+0xa8>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <xQueueGenericSend+0xaa>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <xQueueGenericSend+0xc6>
 8004cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	e7fd      	b.n	8004d0e <xQueueGenericSend+0xc2>
 8004d12:	f001 ff53 	bl	8006bbc <vPortEnterCritical>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d302      	bcc.n	8004d28 <xQueueGenericSend+0xdc>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d129      	bne.n	8004d7c <xQueueGenericSend+0x130>
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d2e:	f000 fa0f 	bl	8005150 <prvCopyDataToQueue>
 8004d32:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d010      	beq.n	8004d5e <xQueueGenericSend+0x112>
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3e:	3324      	adds	r3, #36	@ 0x24
 8004d40:	4618      	mov	r0, r3
 8004d42:	f001 f849 	bl	8005dd8 <xTaskRemoveFromEventList>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d013      	beq.n	8004d74 <xQueueGenericSend+0x128>
 8004d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e4c <xQueueGenericSend+0x200>)
 8004d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	e00a      	b.n	8004d74 <xQueueGenericSend+0x128>
 8004d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <xQueueGenericSend+0x128>
 8004d64:	4b39      	ldr	r3, [pc, #228]	@ (8004e4c <xQueueGenericSend+0x200>)
 8004d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f001 ff52 	bl	8006c1c <vPortExitCritical>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e063      	b.n	8004e44 <xQueueGenericSend+0x1f8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <xQueueGenericSend+0x13e>
 8004d82:	f001 ff4b 	bl	8006c1c <vPortExitCritical>
 8004d86:	2300      	movs	r3, #0
 8004d88:	e05c      	b.n	8004e44 <xQueueGenericSend+0x1f8>
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <xQueueGenericSend+0x152>
 8004d90:	f107 0314 	add.w	r3, r7, #20
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 f883 	bl	8005ea0 <vTaskInternalSetTimeOutState>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d9e:	f001 ff3d 	bl	8006c1c <vPortExitCritical>
 8004da2:	f000 fdef 	bl	8005984 <vTaskSuspendAll>
 8004da6:	f001 ff09 	bl	8006bbc <vPortEnterCritical>
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004db0:	b25b      	sxtb	r3, r3
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d103      	bne.n	8004dc0 <xQueueGenericSend+0x174>
 8004db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dc6:	b25b      	sxtb	r3, r3
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d103      	bne.n	8004dd6 <xQueueGenericSend+0x18a>
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dd6:	f001 ff21 	bl	8006c1c <vPortExitCritical>
 8004dda:	1d3a      	adds	r2, r7, #4
 8004ddc:	f107 0314 	add.w	r3, r7, #20
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 f872 	bl	8005ecc <xTaskCheckForTimeOut>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d124      	bne.n	8004e38 <xQueueGenericSend+0x1ec>
 8004dee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004df0:	f000 faa6 	bl	8005340 <prvIsQueueFull>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d018      	beq.n	8004e2c <xQueueGenericSend+0x1e0>
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfc:	3310      	adds	r3, #16
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 ff96 	bl	8005d34 <vTaskPlaceOnEventList>
 8004e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e0a:	f000 fa31 	bl	8005270 <prvUnlockQueue>
 8004e0e:	f000 fdc7 	bl	80059a0 <xTaskResumeAll>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f47f af7c 	bne.w	8004d12 <xQueueGenericSend+0xc6>
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e4c <xQueueGenericSend+0x200>)
 8004e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	e772      	b.n	8004d12 <xQueueGenericSend+0xc6>
 8004e2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e2e:	f000 fa1f 	bl	8005270 <prvUnlockQueue>
 8004e32:	f000 fdb5 	bl	80059a0 <xTaskResumeAll>
 8004e36:	e76c      	b.n	8004d12 <xQueueGenericSend+0xc6>
 8004e38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e3a:	f000 fa19 	bl	8005270 <prvUnlockQueue>
 8004e3e:	f000 fdaf 	bl	80059a0 <xTaskResumeAll>
 8004e42:	2300      	movs	r3, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	3738      	adds	r7, #56	@ 0x38
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	e000ed04 	.word	0xe000ed04

08004e50 <xQueueGenericSendFromISR>:
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b090      	sub	sp, #64	@ 0x40
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <xQueueGenericSendFromISR+0x30>
 8004e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	e7fd      	b.n	8004e7c <xQueueGenericSendFromISR+0x2c>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <xQueueGenericSendFromISR+0x3e>
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <xQueueGenericSendFromISR+0x42>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <xQueueGenericSendFromISR+0x44>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10b      	bne.n	8004eb0 <xQueueGenericSendFromISR+0x60>
 8004e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	e7fd      	b.n	8004eac <xQueueGenericSendFromISR+0x5c>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d103      	bne.n	8004ebe <xQueueGenericSendFromISR+0x6e>
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <xQueueGenericSendFromISR+0x72>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <xQueueGenericSendFromISR+0x74>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10b      	bne.n	8004ee0 <xQueueGenericSendFromISR+0x90>
 8004ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	623b      	str	r3, [r7, #32]
 8004eda:	bf00      	nop
 8004edc:	bf00      	nop
 8004ede:	e7fd      	b.n	8004edc <xQueueGenericSendFromISR+0x8c>
 8004ee0:	f001 ff2e 	bl	8006d40 <vPortValidateInterruptPriority>
 8004ee4:	f3ef 8211 	mrs	r2, BASEPRI
 8004ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	61fa      	str	r2, [r7, #28]
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d302      	bcc.n	8004f12 <xQueueGenericSendFromISR+0xc2>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d12f      	bne.n	8004f72 <xQueueGenericSendFromISR+0x122>
 8004f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f28:	f000 f912 	bl	8005150 <prvCopyDataToQueue>
 8004f2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d112      	bne.n	8004f5c <xQueueGenericSendFromISR+0x10c>
 8004f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d016      	beq.n	8004f6c <xQueueGenericSendFromISR+0x11c>
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f40:	3324      	adds	r3, #36	@ 0x24
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 ff48 	bl	8005dd8 <xTaskRemoveFromEventList>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00e      	beq.n	8004f6c <xQueueGenericSendFromISR+0x11c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00b      	beq.n	8004f6c <xQueueGenericSendFromISR+0x11c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	e007      	b.n	8004f6c <xQueueGenericSendFromISR+0x11c>
 8004f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f60:	3301      	adds	r3, #1
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	b25a      	sxtb	r2, r3
 8004f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f70:	e001      	b.n	8004f76 <xQueueGenericSendFromISR+0x126>
 8004f72:	2300      	movs	r3, #0
 8004f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	bf00      	nop
 8004f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f84:	4618      	mov	r0, r3
 8004f86:	3740      	adds	r7, #64	@ 0x40
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <xQueueReceive>:
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08c      	sub	sp, #48	@ 0x30
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <xQueueReceive+0x32>
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	623b      	str	r3, [r7, #32]
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	e7fd      	b.n	8004fba <xQueueReceive+0x2e>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d103      	bne.n	8004fcc <xQueueReceive+0x40>
 8004fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <xQueueReceive+0x44>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <xQueueReceive+0x46>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10b      	bne.n	8004fee <xQueueReceive+0x62>
 8004fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	e7fd      	b.n	8004fea <xQueueReceive+0x5e>
 8004fee:	f001 f8b9 	bl	8006164 <xTaskGetSchedulerState>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <xQueueReceive+0x72>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <xQueueReceive+0x76>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <xQueueReceive+0x78>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <xQueueReceive+0x94>
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <xQueueReceive+0x90>
 8005020:	f001 fdcc 	bl	8006bbc <vPortEnterCritical>
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01f      	beq.n	8005070 <xQueueReceive+0xe4>
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005034:	f000 f8f6 	bl	8005224 <prvCopyDataFromQueue>
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	1e5a      	subs	r2, r3, #1
 800503c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00f      	beq.n	8005068 <xQueueReceive+0xdc>
 8005048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504a:	3310      	adds	r3, #16
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fec3 	bl	8005dd8 <xTaskRemoveFromEventList>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <xQueueReceive+0xdc>
 8005058:	4b3c      	ldr	r3, [pc, #240]	@ (800514c <xQueueReceive+0x1c0>)
 800505a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f001 fdd8 	bl	8006c1c <vPortExitCritical>
 800506c:	2301      	movs	r3, #1
 800506e:	e069      	b.n	8005144 <xQueueReceive+0x1b8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d103      	bne.n	800507e <xQueueReceive+0xf2>
 8005076:	f001 fdd1 	bl	8006c1c <vPortExitCritical>
 800507a:	2300      	movs	r3, #0
 800507c:	e062      	b.n	8005144 <xQueueReceive+0x1b8>
 800507e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d106      	bne.n	8005092 <xQueueReceive+0x106>
 8005084:	f107 0310 	add.w	r3, r7, #16
 8005088:	4618      	mov	r0, r3
 800508a:	f000 ff09 	bl	8005ea0 <vTaskInternalSetTimeOutState>
 800508e:	2301      	movs	r3, #1
 8005090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005092:	f001 fdc3 	bl	8006c1c <vPortExitCritical>
 8005096:	f000 fc75 	bl	8005984 <vTaskSuspendAll>
 800509a:	f001 fd8f 	bl	8006bbc <vPortEnterCritical>
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050a4:	b25b      	sxtb	r3, r3
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d103      	bne.n	80050b4 <xQueueReceive+0x128>
 80050ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050ba:	b25b      	sxtb	r3, r3
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d103      	bne.n	80050ca <xQueueReceive+0x13e>
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050ca:	f001 fda7 	bl	8006c1c <vPortExitCritical>
 80050ce:	1d3a      	adds	r2, r7, #4
 80050d0:	f107 0310 	add.w	r3, r7, #16
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fef8 	bl	8005ecc <xTaskCheckForTimeOut>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d123      	bne.n	800512a <xQueueReceive+0x19e>
 80050e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050e4:	f000 f916 	bl	8005314 <prvIsQueueEmpty>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d017      	beq.n	800511e <xQueueReceive+0x192>
 80050ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f0:	3324      	adds	r3, #36	@ 0x24
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	4611      	mov	r1, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fe1c 	bl	8005d34 <vTaskPlaceOnEventList>
 80050fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050fe:	f000 f8b7 	bl	8005270 <prvUnlockQueue>
 8005102:	f000 fc4d 	bl	80059a0 <xTaskResumeAll>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d189      	bne.n	8005020 <xQueueReceive+0x94>
 800510c:	4b0f      	ldr	r3, [pc, #60]	@ (800514c <xQueueReceive+0x1c0>)
 800510e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	e780      	b.n	8005020 <xQueueReceive+0x94>
 800511e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005120:	f000 f8a6 	bl	8005270 <prvUnlockQueue>
 8005124:	f000 fc3c 	bl	80059a0 <xTaskResumeAll>
 8005128:	e77a      	b.n	8005020 <xQueueReceive+0x94>
 800512a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800512c:	f000 f8a0 	bl	8005270 <prvUnlockQueue>
 8005130:	f000 fc36 	bl	80059a0 <xTaskResumeAll>
 8005134:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005136:	f000 f8ed 	bl	8005314 <prvIsQueueEmpty>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	f43f af6f 	beq.w	8005020 <xQueueReceive+0x94>
 8005142:	2300      	movs	r3, #0
 8005144:	4618      	mov	r0, r3
 8005146:	3730      	adds	r7, #48	@ 0x30
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <prvCopyDataToQueue>:
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10d      	bne.n	800518a <prvCopyDataToQueue+0x3a>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d14d      	bne.n	8005212 <prvCopyDataToQueue+0xc2>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	4618      	mov	r0, r3
 800517c:	f001 f810 	bl	80061a0 <xTaskPriorityDisinherit>
 8005180:	6178      	str	r0, [r7, #20]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	e043      	b.n	8005212 <prvCopyDataToQueue+0xc2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d119      	bne.n	80051c4 <prvCopyDataToQueue+0x74>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6858      	ldr	r0, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	461a      	mov	r2, r3
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	f002 f888 	bl	80072b0 <memcpy>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a8:	441a      	add	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d32b      	bcc.n	8005212 <prvCopyDataToQueue+0xc2>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]
 80051c2:	e026      	b.n	8005212 <prvCopyDataToQueue+0xc2>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68d8      	ldr	r0, [r3, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	461a      	mov	r2, r3
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	f002 f86e 	bl	80072b0 <memcpy>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	425b      	negs	r3, r3
 80051de:	441a      	add	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	60da      	str	r2, [r3, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d207      	bcs.n	8005200 <prvCopyDataToQueue+0xb0>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f8:	425b      	negs	r3, r3
 80051fa:	441a      	add	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	60da      	str	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d105      	bne.n	8005212 <prvCopyDataToQueue+0xc2>
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <prvCopyDataToQueue+0xc2>
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	3b01      	subs	r3, #1
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	639a      	str	r2, [r3, #56]	@ 0x38
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <prvCopyDataFromQueue>:
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d018      	beq.n	8005268 <prvCopyDataFromQueue+0x44>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	441a      	add	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	429a      	cmp	r2, r3
 800524e:	d303      	bcc.n	8005258 <prvCopyDataFromQueue+0x34>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60da      	str	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68d9      	ldr	r1, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005260:	461a      	mov	r2, r3
 8005262:	6838      	ldr	r0, [r7, #0]
 8005264:	f002 f824 	bl	80072b0 <memcpy>
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <prvUnlockQueue>:
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	f001 fca0 	bl	8006bbc <vPortEnterCritical>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005282:	73fb      	strb	r3, [r7, #15]
 8005284:	e011      	b.n	80052aa <prvUnlockQueue+0x3a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528a:	2b00      	cmp	r3, #0
 800528c:	d012      	beq.n	80052b4 <prvUnlockQueue+0x44>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3324      	adds	r3, #36	@ 0x24
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fda0 	bl	8005dd8 <xTaskRemoveFromEventList>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <prvUnlockQueue+0x32>
 800529e:	f000 fe79 	bl	8005f94 <vTaskMissedYield>
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	73fb      	strb	r3, [r7, #15]
 80052aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dce9      	bgt.n	8005286 <prvUnlockQueue+0x16>
 80052b2:	e000      	b.n	80052b6 <prvUnlockQueue+0x46>
 80052b4:	bf00      	nop
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	22ff      	movs	r2, #255	@ 0xff
 80052ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052be:	f001 fcad 	bl	8006c1c <vPortExitCritical>
 80052c2:	f001 fc7b 	bl	8006bbc <vPortEnterCritical>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052cc:	73bb      	strb	r3, [r7, #14]
 80052ce:	e011      	b.n	80052f4 <prvUnlockQueue+0x84>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d012      	beq.n	80052fe <prvUnlockQueue+0x8e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3310      	adds	r3, #16
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fd7b 	bl	8005dd8 <xTaskRemoveFromEventList>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <prvUnlockQueue+0x7c>
 80052e8:	f000 fe54 	bl	8005f94 <vTaskMissedYield>
 80052ec:	7bbb      	ldrb	r3, [r7, #14]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	73bb      	strb	r3, [r7, #14]
 80052f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	dce9      	bgt.n	80052d0 <prvUnlockQueue+0x60>
 80052fc:	e000      	b.n	8005300 <prvUnlockQueue+0x90>
 80052fe:	bf00      	nop
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	22ff      	movs	r2, #255	@ 0xff
 8005304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005308:	f001 fc88 	bl	8006c1c <vPortExitCritical>
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <prvIsQueueEmpty>:
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	f001 fc4e 	bl	8006bbc <vPortEnterCritical>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005324:	2b00      	cmp	r3, #0
 8005326:	d102      	bne.n	800532e <prvIsQueueEmpty+0x1a>
 8005328:	2301      	movs	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e001      	b.n	8005332 <prvIsQueueEmpty+0x1e>
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	f001 fc73 	bl	8006c1c <vPortExitCritical>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <prvIsQueueFull>:
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	f001 fc38 	bl	8006bbc <vPortEnterCritical>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005354:	429a      	cmp	r2, r3
 8005356:	d102      	bne.n	800535e <prvIsQueueFull+0x1e>
 8005358:	2301      	movs	r3, #1
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e001      	b.n	8005362 <prvIsQueueFull+0x22>
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	f001 fc5b 	bl	8006c1c <vPortExitCritical>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <vQueueAddToRegistry>:
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e014      	b.n	80053aa <vQueueAddToRegistry+0x3a>
 8005380:	4a0e      	ldr	r2, [pc, #56]	@ (80053bc <vQueueAddToRegistry+0x4c>)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10b      	bne.n	80053a4 <vQueueAddToRegistry+0x34>
 800538c:	490b      	ldr	r1, [pc, #44]	@ (80053bc <vQueueAddToRegistry+0x4c>)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8005396:	4a09      	ldr	r2, [pc, #36]	@ (80053bc <vQueueAddToRegistry+0x4c>)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	605a      	str	r2, [r3, #4]
 80053a2:	e006      	b.n	80053b2 <vQueueAddToRegistry+0x42>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b07      	cmp	r3, #7
 80053ae:	d9e7      	bls.n	8005380 <vQueueAddToRegistry+0x10>
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr
 80053bc:	20000b2c 	.word	0x20000b2c

080053c0 <vQueueWaitForMessageRestricted>:
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	f001 fbf4 	bl	8006bbc <vPortEnterCritical>
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053da:	b25b      	sxtb	r3, r3
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d103      	bne.n	80053ea <vQueueWaitForMessageRestricted+0x2a>
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053f0:	b25b      	sxtb	r3, r3
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d103      	bne.n	8005400 <vQueueWaitForMessageRestricted+0x40>
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005400:	f001 fc0c 	bl	8006c1c <vPortExitCritical>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <vQueueWaitForMessageRestricted+0x5a>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3324      	adds	r3, #36	@ 0x24
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fcb3 	bl	8005d80 <vTaskPlaceOnEventListRestricted>
 800541a:	6978      	ldr	r0, [r7, #20]
 800541c:	f7ff ff28 	bl	8005270 <prvUnlockQueue>
 8005420:	bf00      	nop
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <xTaskCreateStatic>:
 8005428:	b580      	push	{r7, lr}
 800542a:	b08e      	sub	sp, #56	@ 0x38
 800542c:	af04      	add	r7, sp, #16
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <xTaskCreateStatic+0x2c>
 800543c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	623b      	str	r3, [r7, #32]
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	e7fd      	b.n	8005450 <xTaskCreateStatic+0x28>
 8005454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <xTaskCreateStatic+0x4a>
 800545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	e7fd      	b.n	800546e <xTaskCreateStatic+0x46>
 8005472:	23a8      	movs	r3, #168	@ 0xa8
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2ba8      	cmp	r3, #168	@ 0xa8
 800547a:	d00b      	beq.n	8005494 <xTaskCreateStatic+0x6c>
 800547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	e7fd      	b.n	8005490 <xTaskCreateStatic+0x68>
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01e      	beq.n	80054da <xTaskCreateStatic+0xb2>
 800549c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01b      	beq.n	80054da <xTaskCreateStatic+0xb2>
 80054a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 80054b4:	2300      	movs	r3, #0
 80054b6:	9303      	str	r3, [sp, #12]
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	9302      	str	r3, [sp, #8]
 80054bc:	f107 0314 	add.w	r3, r7, #20
 80054c0:	9301      	str	r3, [sp, #4]
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f851 	bl	8005574 <prvInitialiseNewTask>
 80054d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054d4:	f000 f8f6 	bl	80056c4 <prvAddNewTaskToReadyList>
 80054d8:	e001      	b.n	80054de <xTaskCreateStatic+0xb6>
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4618      	mov	r0, r3
 80054e2:	3728      	adds	r7, #40	@ 0x28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <xTaskCreate>:
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08c      	sub	sp, #48	@ 0x30
 80054ec:	af04      	add	r7, sp, #16
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	80fb      	strh	r3, [r7, #6]
 80054f8:	88fb      	ldrh	r3, [r7, #6]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 fc5f 	bl	8006dc0 <pvPortMalloc>
 8005502:	6178      	str	r0, [r7, #20]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00e      	beq.n	8005528 <xTaskCreate+0x40>
 800550a:	20a8      	movs	r0, #168	@ 0xa8
 800550c:	f001 fc58 	bl	8006dc0 <pvPortMalloc>
 8005510:	61f8      	str	r0, [r7, #28]
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <xTaskCreate+0x38>
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	631a      	str	r2, [r3, #48]	@ 0x30
 800551e:	e005      	b.n	800552c <xTaskCreate+0x44>
 8005520:	6978      	ldr	r0, [r7, #20]
 8005522:	f001 fd1b 	bl	8006f5c <vPortFree>
 8005526:	e001      	b.n	800552c <xTaskCreate+0x44>
 8005528:	2300      	movs	r3, #0
 800552a:	61fb      	str	r3, [r7, #28]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d017      	beq.n	8005562 <xTaskCreate+0x7a>
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 800553a:	88fa      	ldrh	r2, [r7, #6]
 800553c:	2300      	movs	r3, #0
 800553e:	9303      	str	r3, [sp, #12]
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	9302      	str	r3, [sp, #8]
 8005544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f80f 	bl	8005574 <prvInitialiseNewTask>
 8005556:	69f8      	ldr	r0, [r7, #28]
 8005558:	f000 f8b4 	bl	80056c4 <prvAddNewTaskToReadyList>
 800555c:	2301      	movs	r3, #1
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	e002      	b.n	8005568 <xTaskCreate+0x80>
 8005562:	f04f 33ff 	mov.w	r3, #4294967295
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	4618      	mov	r0, r3
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <prvInitialiseNewTask>:
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	461a      	mov	r2, r3
 800558c:	21a5      	movs	r1, #165	@ 0xa5
 800558e:	f001 fe03 	bl	8007198 <memset>
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800559c:	3b01      	subs	r3, #1
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f023 0307 	bic.w	r3, r3, #7
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00b      	beq.n	80055ce <prvInitialiseNewTask+0x5a>
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <prvInitialiseNewTask+0x56>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01f      	beq.n	8005614 <prvInitialiseNewTask+0xa0>
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	e012      	b.n	8005600 <prvInitialiseNewTask+0x8c>
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	7819      	ldrb	r1, [r3, #0]
 80055e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	3334      	adds	r3, #52	@ 0x34
 80055ea:	460a      	mov	r2, r1
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d006      	beq.n	8005608 <prvInitialiseNewTask+0x94>
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	3301      	adds	r3, #1
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	2b0f      	cmp	r3, #15
 8005604:	d9e9      	bls.n	80055da <prvInitialiseNewTask+0x66>
 8005606:	e000      	b.n	800560a <prvInitialiseNewTask+0x96>
 8005608:	bf00      	nop
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005612:	e003      	b.n	800561c <prvInitialiseNewTask+0xa8>
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	2b37      	cmp	r3, #55	@ 0x37
 8005620:	d901      	bls.n	8005626 <prvInitialiseNewTask+0xb2>
 8005622:	2337      	movs	r3, #55	@ 0x37
 8005624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800562a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005630:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	2200      	movs	r2, #0
 8005636:	651a      	str	r2, [r3, #80]	@ 0x50
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	3304      	adds	r3, #4
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff f96a 	bl	8004916 <vListInitialiseItem>
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	3318      	adds	r3, #24
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff f965 	bl	8004916 <vListInitialiseItem>
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005650:	611a      	str	r2, [r3, #16]
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	619a      	str	r2, [r3, #24]
 800565c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005660:	625a      	str	r2, [r3, #36]	@ 0x24
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	2200      	movs	r2, #0
 8005666:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	2200      	movs	r2, #0
 800566e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	3354      	adds	r3, #84	@ 0x54
 8005676:	224c      	movs	r2, #76	@ 0x4c
 8005678:	2100      	movs	r1, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f001 fd8c 	bl	8007198 <memset>
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	4a0d      	ldr	r2, [pc, #52]	@ (80056b8 <prvInitialiseNewTask+0x144>)
 8005684:	659a      	str	r2, [r3, #88]	@ 0x58
 8005686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005688:	4a0c      	ldr	r2, [pc, #48]	@ (80056bc <prvInitialiseNewTask+0x148>)
 800568a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	4a0c      	ldr	r2, [pc, #48]	@ (80056c0 <prvInitialiseNewTask+0x14c>)
 8005690:	661a      	str	r2, [r3, #96]	@ 0x60
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	68f9      	ldr	r1, [r7, #12]
 8005696:	69b8      	ldr	r0, [r7, #24]
 8005698:	f001 f99e 	bl	80069d8 <pxPortInitialiseStack>
 800569c:	4602      	mov	r2, r0
 800569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <prvInitialiseNewTask+0x13a>
 80056a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	bf00      	nop
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20001dc0 	.word	0x20001dc0
 80056bc:	20001e28 	.word	0x20001e28
 80056c0:	20001e90 	.word	0x20001e90

080056c4 <prvAddNewTaskToReadyList>:
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	f001 fa76 	bl	8006bbc <vPortEnterCritical>
 80056d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005788 <prvAddNewTaskToReadyList+0xc4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005788 <prvAddNewTaskToReadyList+0xc4>)
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	4b2c      	ldr	r3, [pc, #176]	@ (800578c <prvAddNewTaskToReadyList+0xc8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <prvAddNewTaskToReadyList+0x32>
 80056e2:	4a2a      	ldr	r2, [pc, #168]	@ (800578c <prvAddNewTaskToReadyList+0xc8>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	4b27      	ldr	r3, [pc, #156]	@ (8005788 <prvAddNewTaskToReadyList+0xc4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d110      	bne.n	8005712 <prvAddNewTaskToReadyList+0x4e>
 80056f0:	f000 fc74 	bl	8005fdc <prvInitialiseTaskLists>
 80056f4:	e00d      	b.n	8005712 <prvAddNewTaskToReadyList+0x4e>
 80056f6:	4b26      	ldr	r3, [pc, #152]	@ (8005790 <prvAddNewTaskToReadyList+0xcc>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <prvAddNewTaskToReadyList+0x4e>
 80056fe:	4b23      	ldr	r3, [pc, #140]	@ (800578c <prvAddNewTaskToReadyList+0xc8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005708:	429a      	cmp	r2, r3
 800570a:	d802      	bhi.n	8005712 <prvAddNewTaskToReadyList+0x4e>
 800570c:	4a1f      	ldr	r2, [pc, #124]	@ (800578c <prvAddNewTaskToReadyList+0xc8>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <prvAddNewTaskToReadyList+0xd0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3301      	adds	r3, #1
 8005718:	4a1e      	ldr	r2, [pc, #120]	@ (8005794 <prvAddNewTaskToReadyList+0xd0>)
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	4b1d      	ldr	r3, [pc, #116]	@ (8005794 <prvAddNewTaskToReadyList+0xd0>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	645a      	str	r2, [r3, #68]	@ 0x44
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005728:	4b1b      	ldr	r3, [pc, #108]	@ (8005798 <prvAddNewTaskToReadyList+0xd4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d903      	bls.n	8005738 <prvAddNewTaskToReadyList+0x74>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005734:	4a18      	ldr	r2, [pc, #96]	@ (8005798 <prvAddNewTaskToReadyList+0xd4>)
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4a15      	ldr	r2, [pc, #84]	@ (800579c <prvAddNewTaskToReadyList+0xd8>)
 8005746:	441a      	add	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f7ff f8ed 	bl	800492e <vListInsertEnd>
 8005754:	f001 fa62 	bl	8006c1c <vPortExitCritical>
 8005758:	4b0d      	ldr	r3, [pc, #52]	@ (8005790 <prvAddNewTaskToReadyList+0xcc>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00e      	beq.n	800577e <prvAddNewTaskToReadyList+0xba>
 8005760:	4b0a      	ldr	r3, [pc, #40]	@ (800578c <prvAddNewTaskToReadyList+0xc8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	429a      	cmp	r2, r3
 800576c:	d207      	bcs.n	800577e <prvAddNewTaskToReadyList+0xba>
 800576e:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <prvAddNewTaskToReadyList+0xdc>)
 8005770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20001040 	.word	0x20001040
 800578c:	20000b6c 	.word	0x20000b6c
 8005790:	2000104c 	.word	0x2000104c
 8005794:	2000105c 	.word	0x2000105c
 8005798:	20001048 	.word	0x20001048
 800579c:	20000b70 	.word	0x20000b70
 80057a0:	e000ed04 	.word	0xe000ed04

080057a4 <vTaskDelayUntil>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	@ 0x28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
 80057ae:	2300      	movs	r3, #0
 80057b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <vTaskDelayUntil+0x2c>
 80057b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	bf00      	nop
 80057cc:	bf00      	nop
 80057ce:	e7fd      	b.n	80057cc <vTaskDelayUntil+0x28>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10b      	bne.n	80057ee <vTaskDelayUntil+0x4a>
 80057d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	e7fd      	b.n	80057ea <vTaskDelayUntil+0x46>
 80057ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005898 <vTaskDelayUntil+0xf4>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <vTaskDelayUntil+0x6a>
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <vTaskDelayUntil+0x66>
 800580e:	f000 f8b9 	bl	8005984 <vTaskSuspendAll>
 8005812:	4b22      	ldr	r3, [pc, #136]	@ (800589c <vTaskDelayUntil+0xf8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	623b      	str	r3, [r7, #32]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	4413      	add	r3, r2
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a3a      	ldr	r2, [r7, #32]
 8005828:	429a      	cmp	r2, r3
 800582a:	d20b      	bcs.n	8005844 <vTaskDelayUntil+0xa0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	429a      	cmp	r2, r3
 8005834:	d211      	bcs.n	800585a <vTaskDelayUntil+0xb6>
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	429a      	cmp	r2, r3
 800583c:	d90d      	bls.n	800585a <vTaskDelayUntil+0xb6>
 800583e:	2301      	movs	r3, #1
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24
 8005842:	e00a      	b.n	800585a <vTaskDelayUntil+0xb6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	429a      	cmp	r2, r3
 800584c:	d303      	bcc.n	8005856 <vTaskDelayUntil+0xb2>
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	429a      	cmp	r2, r3
 8005854:	d901      	bls.n	800585a <vTaskDelayUntil+0xb6>
 8005856:	2301      	movs	r3, #1
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	2b00      	cmp	r3, #0
 8005864:	d006      	beq.n	8005874 <vTaskDelayUntil+0xd0>
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fd06 	bl	8006280 <prvAddCurrentTaskToDelayedList>
 8005874:	f000 f894 	bl	80059a0 <xTaskResumeAll>
 8005878:	61b8      	str	r0, [r7, #24]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d107      	bne.n	8005890 <vTaskDelayUntil+0xec>
 8005880:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <vTaskDelayUntil+0xfc>)
 8005882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	bf00      	nop
 8005892:	3728      	adds	r7, #40	@ 0x28
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20001068 	.word	0x20001068
 800589c:	20001044 	.word	0x20001044
 80058a0:	e000ed04 	.word	0xe000ed04

080058a4 <vTaskStartScheduler>:
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	@ 0x28
 80058a8:	af04      	add	r7, sp, #16
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	463a      	mov	r2, r7
 80058b4:	1d39      	adds	r1, r7, #4
 80058b6:	f107 0308 	add.w	r3, r7, #8
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe ffda 	bl	8004874 <vApplicationGetIdleTaskMemory>
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	9202      	str	r2, [sp, #8]
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	2300      	movs	r3, #0
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	2300      	movs	r3, #0
 80058d0:	460a      	mov	r2, r1
 80058d2:	4924      	ldr	r1, [pc, #144]	@ (8005964 <vTaskStartScheduler+0xc0>)
 80058d4:	4824      	ldr	r0, [pc, #144]	@ (8005968 <vTaskStartScheduler+0xc4>)
 80058d6:	f7ff fda7 	bl	8005428 <xTaskCreateStatic>
 80058da:	4603      	mov	r3, r0
 80058dc:	4a23      	ldr	r2, [pc, #140]	@ (800596c <vTaskStartScheduler+0xc8>)
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	4b22      	ldr	r3, [pc, #136]	@ (800596c <vTaskStartScheduler+0xc8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <vTaskStartScheduler+0x4a>
 80058e8:	2301      	movs	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	e001      	b.n	80058f2 <vTaskStartScheduler+0x4e>
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d102      	bne.n	80058fe <vTaskStartScheduler+0x5a>
 80058f8:	f000 fd16 	bl	8006328 <xTimerCreateTimerTask>
 80058fc:	6178      	str	r0, [r7, #20]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d11b      	bne.n	800593c <vTaskStartScheduler+0x98>
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	bf00      	nop
 8005918:	4b15      	ldr	r3, [pc, #84]	@ (8005970 <vTaskStartScheduler+0xcc>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3354      	adds	r3, #84	@ 0x54
 800591e:	4a15      	ldr	r2, [pc, #84]	@ (8005974 <vTaskStartScheduler+0xd0>)
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	4b15      	ldr	r3, [pc, #84]	@ (8005978 <vTaskStartScheduler+0xd4>)
 8005924:	f04f 32ff 	mov.w	r2, #4294967295
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	4b14      	ldr	r3, [pc, #80]	@ (800597c <vTaskStartScheduler+0xd8>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	4b13      	ldr	r3, [pc, #76]	@ (8005980 <vTaskStartScheduler+0xdc>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	f001 f8cf 	bl	8006ad8 <xPortStartScheduler>
 800593a:	e00f      	b.n	800595c <vTaskStartScheduler+0xb8>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005942:	d10b      	bne.n	800595c <vTaskStartScheduler+0xb8>
 8005944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	e7fd      	b.n	8005958 <vTaskStartScheduler+0xb4>
 800595c:	bf00      	nop
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	080073a4 	.word	0x080073a4
 8005968:	08005fad 	.word	0x08005fad
 800596c:	20001064 	.word	0x20001064
 8005970:	20000b6c 	.word	0x20000b6c
 8005974:	20000014 	.word	0x20000014
 8005978:	20001060 	.word	0x20001060
 800597c:	2000104c 	.word	0x2000104c
 8005980:	20001044 	.word	0x20001044

08005984 <vTaskSuspendAll>:
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
 8005988:	4b04      	ldr	r3, [pc, #16]	@ (800599c <vTaskSuspendAll+0x18>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	4a03      	ldr	r2, [pc, #12]	@ (800599c <vTaskSuspendAll+0x18>)
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	bf00      	nop
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20001068 	.word	0x20001068

080059a0 <xTaskResumeAll>:
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	4b42      	ldr	r3, [pc, #264]	@ (8005ab8 <xTaskResumeAll+0x118>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <xTaskResumeAll+0x2e>
 80059b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	e7fd      	b.n	80059ca <xTaskResumeAll+0x2a>
 80059ce:	f001 f8f5 	bl	8006bbc <vPortEnterCritical>
 80059d2:	4b39      	ldr	r3, [pc, #228]	@ (8005ab8 <xTaskResumeAll+0x118>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	4a37      	ldr	r2, [pc, #220]	@ (8005ab8 <xTaskResumeAll+0x118>)
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	4b36      	ldr	r3, [pc, #216]	@ (8005ab8 <xTaskResumeAll+0x118>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d162      	bne.n	8005aaa <xTaskResumeAll+0x10a>
 80059e4:	4b35      	ldr	r3, [pc, #212]	@ (8005abc <xTaskResumeAll+0x11c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d05e      	beq.n	8005aaa <xTaskResumeAll+0x10a>
 80059ec:	e02f      	b.n	8005a4e <xTaskResumeAll+0xae>
 80059ee:	4b34      	ldr	r3, [pc, #208]	@ (8005ac0 <xTaskResumeAll+0x120>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3318      	adds	r3, #24
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe fff2 	bl	80049e4 <uxListRemove>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe ffed 	bl	80049e4 <uxListRemove>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8005ac4 <xTaskResumeAll+0x124>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d903      	bls.n	8005a1e <xTaskResumeAll+0x7e>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ac4 <xTaskResumeAll+0x124>)
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a27      	ldr	r2, [pc, #156]	@ (8005ac8 <xTaskResumeAll+0x128>)
 8005a2c:	441a      	add	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f7fe ff7a 	bl	800492e <vListInsertEnd>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3e:	4b23      	ldr	r3, [pc, #140]	@ (8005acc <xTaskResumeAll+0x12c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d302      	bcc.n	8005a4e <xTaskResumeAll+0xae>
 8005a48:	4b21      	ldr	r3, [pc, #132]	@ (8005ad0 <xTaskResumeAll+0x130>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ac0 <xTaskResumeAll+0x120>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1cb      	bne.n	80059ee <xTaskResumeAll+0x4e>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <xTaskResumeAll+0xc0>
 8005a5c:	f000 fb62 	bl	8006124 <prvResetNextTaskUnblockTime>
 8005a60:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad4 <xTaskResumeAll+0x134>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	607b      	str	r3, [r7, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d010      	beq.n	8005a8e <xTaskResumeAll+0xee>
 8005a6c:	f000 f844 	bl	8005af8 <xTaskIncrementTick>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <xTaskResumeAll+0xdc>
 8005a76:	4b16      	ldr	r3, [pc, #88]	@ (8005ad0 <xTaskResumeAll+0x130>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	607b      	str	r3, [r7, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f1      	bne.n	8005a6c <xTaskResumeAll+0xcc>
 8005a88:	4b12      	ldr	r3, [pc, #72]	@ (8005ad4 <xTaskResumeAll+0x134>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	4b10      	ldr	r3, [pc, #64]	@ (8005ad0 <xTaskResumeAll+0x130>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <xTaskResumeAll+0x10a>
 8005a96:	2301      	movs	r3, #1
 8005a98:	60bb      	str	r3, [r7, #8]
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad8 <xTaskResumeAll+0x138>)
 8005a9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f001 f8b7 	bl	8006c1c <vPortExitCritical>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20001068 	.word	0x20001068
 8005abc:	20001040 	.word	0x20001040
 8005ac0:	20001000 	.word	0x20001000
 8005ac4:	20001048 	.word	0x20001048
 8005ac8:	20000b70 	.word	0x20000b70
 8005acc:	20000b6c 	.word	0x20000b6c
 8005ad0:	20001054 	.word	0x20001054
 8005ad4:	20001050 	.word	0x20001050
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <xTaskGetTickCount>:
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4b04      	ldr	r3, [pc, #16]	@ (8005af4 <xTaskGetTickCount+0x18>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	607b      	str	r3, [r7, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr
 8005af4:	20001044 	.word	0x20001044

08005af8 <xTaskIncrementTick>:
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	4b4f      	ldr	r3, [pc, #316]	@ (8005c40 <xTaskIncrementTick+0x148>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f040 8090 	bne.w	8005c2c <xTaskIncrementTick+0x134>
 8005b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8005c44 <xTaskIncrementTick+0x14c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	4a4b      	ldr	r2, [pc, #300]	@ (8005c44 <xTaskIncrementTick+0x14c>)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d121      	bne.n	8005b64 <xTaskIncrementTick+0x6c>
 8005b20:	4b49      	ldr	r3, [pc, #292]	@ (8005c48 <xTaskIncrementTick+0x150>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <xTaskIncrementTick+0x4a>
 8005b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	bf00      	nop
 8005b3e:	bf00      	nop
 8005b40:	e7fd      	b.n	8005b3e <xTaskIncrementTick+0x46>
 8005b42:	4b41      	ldr	r3, [pc, #260]	@ (8005c48 <xTaskIncrementTick+0x150>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	4b40      	ldr	r3, [pc, #256]	@ (8005c4c <xTaskIncrementTick+0x154>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a3e      	ldr	r2, [pc, #248]	@ (8005c48 <xTaskIncrementTick+0x150>)
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	4a3e      	ldr	r2, [pc, #248]	@ (8005c4c <xTaskIncrementTick+0x154>)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	4b3e      	ldr	r3, [pc, #248]	@ (8005c50 <xTaskIncrementTick+0x158>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c50 <xTaskIncrementTick+0x158>)
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	f000 fae0 	bl	8006124 <prvResetNextTaskUnblockTime>
 8005b64:	4b3b      	ldr	r3, [pc, #236]	@ (8005c54 <xTaskIncrementTick+0x15c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d349      	bcc.n	8005c02 <xTaskIncrementTick+0x10a>
 8005b6e:	4b36      	ldr	r3, [pc, #216]	@ (8005c48 <xTaskIncrementTick+0x150>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d104      	bne.n	8005b82 <xTaskIncrementTick+0x8a>
 8005b78:	4b36      	ldr	r3, [pc, #216]	@ (8005c54 <xTaskIncrementTick+0x15c>)
 8005b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e03f      	b.n	8005c02 <xTaskIncrementTick+0x10a>
 8005b82:	4b31      	ldr	r3, [pc, #196]	@ (8005c48 <xTaskIncrementTick+0x150>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	607b      	str	r3, [r7, #4]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d203      	bcs.n	8005ba2 <xTaskIncrementTick+0xaa>
 8005b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8005c54 <xTaskIncrementTick+0x15c>)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	e02f      	b.n	8005c02 <xTaskIncrementTick+0x10a>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe ff1c 	bl	80049e4 <uxListRemove>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <xTaskIncrementTick+0xc6>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	3318      	adds	r3, #24
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe ff13 	bl	80049e4 <uxListRemove>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc2:	4b25      	ldr	r3, [pc, #148]	@ (8005c58 <xTaskIncrementTick+0x160>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d903      	bls.n	8005bd2 <xTaskIncrementTick+0xda>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	4a22      	ldr	r2, [pc, #136]	@ (8005c58 <xTaskIncrementTick+0x160>)
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a1f      	ldr	r2, [pc, #124]	@ (8005c5c <xTaskIncrementTick+0x164>)
 8005be0:	441a      	add	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f7fe fea0 	bl	800492e <vListInsertEnd>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c60 <xTaskIncrementTick+0x168>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d3b8      	bcc.n	8005b6e <xTaskIncrementTick+0x76>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	e7b5      	b.n	8005b6e <xTaskIncrementTick+0x76>
 8005c02:	4b17      	ldr	r3, [pc, #92]	@ (8005c60 <xTaskIncrementTick+0x168>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c08:	4914      	ldr	r1, [pc, #80]	@ (8005c5c <xTaskIncrementTick+0x164>)
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	440b      	add	r3, r1
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d901      	bls.n	8005c1e <xTaskIncrementTick+0x126>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	4b11      	ldr	r3, [pc, #68]	@ (8005c64 <xTaskIncrementTick+0x16c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <xTaskIncrementTick+0x13e>
 8005c26:	2301      	movs	r3, #1
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e004      	b.n	8005c36 <xTaskIncrementTick+0x13e>
 8005c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c68 <xTaskIncrementTick+0x170>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3301      	adds	r3, #1
 8005c32:	4a0d      	ldr	r2, [pc, #52]	@ (8005c68 <xTaskIncrementTick+0x170>)
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20001068 	.word	0x20001068
 8005c44:	20001044 	.word	0x20001044
 8005c48:	20000ff8 	.word	0x20000ff8
 8005c4c:	20000ffc 	.word	0x20000ffc
 8005c50:	20001058 	.word	0x20001058
 8005c54:	20001060 	.word	0x20001060
 8005c58:	20001048 	.word	0x20001048
 8005c5c:	20000b70 	.word	0x20000b70
 8005c60:	20000b6c 	.word	0x20000b6c
 8005c64:	20001054 	.word	0x20001054
 8005c68:	20001050 	.word	0x20001050

08005c6c <vTaskSwitchContext>:
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4b2a      	ldr	r3, [pc, #168]	@ (8005d1c <vTaskSwitchContext+0xb0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <vTaskSwitchContext+0x16>
 8005c7a:	4b29      	ldr	r3, [pc, #164]	@ (8005d20 <vTaskSwitchContext+0xb4>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	e047      	b.n	8005d12 <vTaskSwitchContext+0xa6>
 8005c82:	4b27      	ldr	r3, [pc, #156]	@ (8005d20 <vTaskSwitchContext+0xb4>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	4b26      	ldr	r3, [pc, #152]	@ (8005d24 <vTaskSwitchContext+0xb8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e011      	b.n	8005cb4 <vTaskSwitchContext+0x48>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <vTaskSwitchContext+0x42>
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	e7fd      	b.n	8005caa <vTaskSwitchContext+0x3e>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	491c      	ldr	r1, [pc, #112]	@ (8005d28 <vTaskSwitchContext+0xbc>)
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0e3      	beq.n	8005c90 <vTaskSwitchContext+0x24>
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4a15      	ldr	r2, [pc, #84]	@ (8005d28 <vTaskSwitchContext+0xbc>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	605a      	str	r2, [r3, #4]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	3308      	adds	r3, #8
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d104      	bne.n	8005cf8 <vTaskSwitchContext+0x8c>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	605a      	str	r2, [r3, #4]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8005d2c <vTaskSwitchContext+0xc0>)
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	4a08      	ldr	r2, [pc, #32]	@ (8005d24 <vTaskSwitchContext+0xb8>)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	4b08      	ldr	r3, [pc, #32]	@ (8005d2c <vTaskSwitchContext+0xc0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3354      	adds	r3, #84	@ 0x54
 8005d0e:	4a08      	ldr	r2, [pc, #32]	@ (8005d30 <vTaskSwitchContext+0xc4>)
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr
 8005d1c:	20001068 	.word	0x20001068
 8005d20:	20001054 	.word	0x20001054
 8005d24:	20001048 	.word	0x20001048
 8005d28:	20000b70 	.word	0x20000b70
 8005d2c:	20000b6c 	.word	0x20000b6c
 8005d30:	20000014 	.word	0x20000014

08005d34 <vTaskPlaceOnEventList>:
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10b      	bne.n	8005d5c <vTaskPlaceOnEventList+0x28>
 8005d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	e7fd      	b.n	8005d58 <vTaskPlaceOnEventList+0x24>
 8005d5c:	4b07      	ldr	r3, [pc, #28]	@ (8005d7c <vTaskPlaceOnEventList+0x48>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3318      	adds	r3, #24
 8005d62:	4619      	mov	r1, r3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7fe fe05 	bl	8004974 <vListInsert>
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	6838      	ldr	r0, [r7, #0]
 8005d6e:	f000 fa87 	bl	8006280 <prvAddCurrentTaskToDelayedList>
 8005d72:	bf00      	nop
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000b6c 	.word	0x20000b6c

08005d80 <vTaskPlaceOnEventListRestricted>:
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <vTaskPlaceOnEventListRestricted+0x2a>
 8005d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	e7fd      	b.n	8005da6 <vTaskPlaceOnEventListRestricted+0x26>
 8005daa:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3318      	adds	r3, #24
 8005db0:	4619      	mov	r1, r3
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7fe fdbb 	bl	800492e <vListInsertEnd>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <vTaskPlaceOnEventListRestricted+0x44>
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc2:	60bb      	str	r3, [r7, #8]
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	68b8      	ldr	r0, [r7, #8]
 8005dc8:	f000 fa5a 	bl	8006280 <prvAddCurrentTaskToDelayedList>
 8005dcc:	bf00      	nop
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000b6c 	.word	0x20000b6c

08005dd8 <xTaskRemoveFromEventList>:
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <xTaskRemoveFromEventList+0x2e>
 8005dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	e7fd      	b.n	8005e02 <xTaskRemoveFromEventList+0x2a>
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	3318      	adds	r3, #24
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fdea 	bl	80049e4 <uxListRemove>
 8005e10:	4b1d      	ldr	r3, [pc, #116]	@ (8005e88 <xTaskRemoveFromEventList+0xb0>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d11d      	bne.n	8005e54 <xTaskRemoveFromEventList+0x7c>
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fe fde1 	bl	80049e4 <uxListRemove>
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e26:	4b19      	ldr	r3, [pc, #100]	@ (8005e8c <xTaskRemoveFromEventList+0xb4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d903      	bls.n	8005e36 <xTaskRemoveFromEventList+0x5e>
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	4a16      	ldr	r2, [pc, #88]	@ (8005e8c <xTaskRemoveFromEventList+0xb4>)
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4a13      	ldr	r2, [pc, #76]	@ (8005e90 <xTaskRemoveFromEventList+0xb8>)
 8005e44:	441a      	add	r2, r3
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f7fe fd6e 	bl	800492e <vListInsertEnd>
 8005e52:	e005      	b.n	8005e60 <xTaskRemoveFromEventList+0x88>
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	3318      	adds	r3, #24
 8005e58:	4619      	mov	r1, r3
 8005e5a:	480e      	ldr	r0, [pc, #56]	@ (8005e94 <xTaskRemoveFromEventList+0xbc>)
 8005e5c:	f7fe fd67 	bl	800492e <vListInsertEnd>
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e64:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <xTaskRemoveFromEventList+0xc0>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d905      	bls.n	8005e7a <xTaskRemoveFromEventList+0xa2>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	4b0a      	ldr	r3, [pc, #40]	@ (8005e9c <xTaskRemoveFromEventList+0xc4>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e001      	b.n	8005e7e <xTaskRemoveFromEventList+0xa6>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20001068 	.word	0x20001068
 8005e8c:	20001048 	.word	0x20001048
 8005e90:	20000b70 	.word	0x20000b70
 8005e94:	20001000 	.word	0x20001000
 8005e98:	20000b6c 	.word	0x20000b6c
 8005e9c:	20001054 	.word	0x20001054

08005ea0 <vTaskInternalSetTimeOutState>:
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	4b06      	ldr	r3, [pc, #24]	@ (8005ec4 <vTaskInternalSetTimeOutState+0x24>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <vTaskInternalSetTimeOutState+0x28>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	605a      	str	r2, [r3, #4]
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20001058 	.word	0x20001058
 8005ec8:	20001044 	.word	0x20001044

08005ecc <xTaskCheckForTimeOut>:
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10b      	bne.n	8005ef4 <xTaskCheckForTimeOut+0x28>
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xTaskCheckForTimeOut+0x24>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10b      	bne.n	8005f12 <xTaskCheckForTimeOut+0x46>
 8005efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	bf00      	nop
 8005f0e:	bf00      	nop
 8005f10:	e7fd      	b.n	8005f0e <xTaskCheckForTimeOut+0x42>
 8005f12:	f000 fe53 	bl	8006bbc <vPortEnterCritical>
 8005f16:	4b1d      	ldr	r3, [pc, #116]	@ (8005f8c <xTaskCheckForTimeOut+0xc0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d102      	bne.n	8005f36 <xTaskCheckForTimeOut+0x6a>
 8005f30:	2300      	movs	r3, #0
 8005f32:	61fb      	str	r3, [r7, #28]
 8005f34:	e023      	b.n	8005f7e <xTaskCheckForTimeOut+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b15      	ldr	r3, [pc, #84]	@ (8005f90 <xTaskCheckForTimeOut+0xc4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d007      	beq.n	8005f52 <xTaskCheckForTimeOut+0x86>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <xTaskCheckForTimeOut+0x86>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	e015      	b.n	8005f7e <xTaskCheckForTimeOut+0xb2>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d20b      	bcs.n	8005f74 <xTaskCheckForTimeOut+0xa8>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	1ad2      	subs	r2, r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff ff99 	bl	8005ea0 <vTaskInternalSetTimeOutState>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61fb      	str	r3, [r7, #28]
 8005f72:	e004      	b.n	8005f7e <xTaskCheckForTimeOut+0xb2>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	f000 fe4d 	bl	8006c1c <vPortExitCritical>
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4618      	mov	r0, r3
 8005f86:	3720      	adds	r7, #32
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20001044 	.word	0x20001044
 8005f90:	20001058 	.word	0x20001058

08005f94 <vTaskMissedYield>:
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	4b03      	ldr	r3, [pc, #12]	@ (8005fa8 <vTaskMissedYield+0x14>)
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	bf00      	nop
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bc80      	pop	{r7}
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20001054 	.word	0x20001054

08005fac <prvIdleTask>:
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	f000 f852 	bl	800605c <prvCheckTasksWaitingTermination>
 8005fb8:	4b06      	ldr	r3, [pc, #24]	@ (8005fd4 <prvIdleTask+0x28>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d9f9      	bls.n	8005fb4 <prvIdleTask+0x8>
 8005fc0:	4b05      	ldr	r3, [pc, #20]	@ (8005fd8 <prvIdleTask+0x2c>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	e7f0      	b.n	8005fb4 <prvIdleTask+0x8>
 8005fd2:	bf00      	nop
 8005fd4:	20000b70 	.word	0x20000b70
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <prvInitialiseTaskLists>:
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	607b      	str	r3, [r7, #4]
 8005fe6:	e00c      	b.n	8006002 <prvInitialiseTaskLists+0x26>
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4a12      	ldr	r2, [pc, #72]	@ (800603c <prvInitialiseTaskLists+0x60>)
 8005ff4:	4413      	add	r3, r2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fe fc6e 	bl	80048d8 <vListInitialise>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3301      	adds	r3, #1
 8006000:	607b      	str	r3, [r7, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b37      	cmp	r3, #55	@ 0x37
 8006006:	d9ef      	bls.n	8005fe8 <prvInitialiseTaskLists+0xc>
 8006008:	480d      	ldr	r0, [pc, #52]	@ (8006040 <prvInitialiseTaskLists+0x64>)
 800600a:	f7fe fc65 	bl	80048d8 <vListInitialise>
 800600e:	480d      	ldr	r0, [pc, #52]	@ (8006044 <prvInitialiseTaskLists+0x68>)
 8006010:	f7fe fc62 	bl	80048d8 <vListInitialise>
 8006014:	480c      	ldr	r0, [pc, #48]	@ (8006048 <prvInitialiseTaskLists+0x6c>)
 8006016:	f7fe fc5f 	bl	80048d8 <vListInitialise>
 800601a:	480c      	ldr	r0, [pc, #48]	@ (800604c <prvInitialiseTaskLists+0x70>)
 800601c:	f7fe fc5c 	bl	80048d8 <vListInitialise>
 8006020:	480b      	ldr	r0, [pc, #44]	@ (8006050 <prvInitialiseTaskLists+0x74>)
 8006022:	f7fe fc59 	bl	80048d8 <vListInitialise>
 8006026:	4b0b      	ldr	r3, [pc, #44]	@ (8006054 <prvInitialiseTaskLists+0x78>)
 8006028:	4a05      	ldr	r2, [pc, #20]	@ (8006040 <prvInitialiseTaskLists+0x64>)
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	4b0a      	ldr	r3, [pc, #40]	@ (8006058 <prvInitialiseTaskLists+0x7c>)
 800602e:	4a05      	ldr	r2, [pc, #20]	@ (8006044 <prvInitialiseTaskLists+0x68>)
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000b70 	.word	0x20000b70
 8006040:	20000fd0 	.word	0x20000fd0
 8006044:	20000fe4 	.word	0x20000fe4
 8006048:	20001000 	.word	0x20001000
 800604c:	20001014 	.word	0x20001014
 8006050:	2000102c 	.word	0x2000102c
 8006054:	20000ff8 	.word	0x20000ff8
 8006058:	20000ffc 	.word	0x20000ffc

0800605c <prvCheckTasksWaitingTermination>:
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	e019      	b.n	8006098 <prvCheckTasksWaitingTermination+0x3c>
 8006064:	f000 fdaa 	bl	8006bbc <vPortEnterCritical>
 8006068:	4b10      	ldr	r3, [pc, #64]	@ (80060ac <prvCheckTasksWaitingTermination+0x50>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	607b      	str	r3, [r7, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3304      	adds	r3, #4
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe fcb5 	bl	80049e4 <uxListRemove>
 800607a:	4b0d      	ldr	r3, [pc, #52]	@ (80060b0 <prvCheckTasksWaitingTermination+0x54>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3b01      	subs	r3, #1
 8006080:	4a0b      	ldr	r2, [pc, #44]	@ (80060b0 <prvCheckTasksWaitingTermination+0x54>)
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	4b0b      	ldr	r3, [pc, #44]	@ (80060b4 <prvCheckTasksWaitingTermination+0x58>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3b01      	subs	r3, #1
 800608a:	4a0a      	ldr	r2, [pc, #40]	@ (80060b4 <prvCheckTasksWaitingTermination+0x58>)
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	f000 fdc5 	bl	8006c1c <vPortExitCritical>
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f810 	bl	80060b8 <prvDeleteTCB>
 8006098:	4b06      	ldr	r3, [pc, #24]	@ (80060b4 <prvCheckTasksWaitingTermination+0x58>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e1      	bne.n	8006064 <prvCheckTasksWaitingTermination+0x8>
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20001014 	.word	0x20001014
 80060b0:	20001040 	.word	0x20001040
 80060b4:	20001028 	.word	0x20001028

080060b8 <prvDeleteTCB>:
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3354      	adds	r3, #84	@ 0x54
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 f86f 	bl	80071a8 <_reclaim_reent>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d108      	bne.n	80060e6 <prvDeleteTCB+0x2e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 ff3f 	bl	8006f5c <vPortFree>
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 ff3c 	bl	8006f5c <vPortFree>
 80060e4:	e019      	b.n	800611a <prvDeleteTCB+0x62>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d103      	bne.n	80060f8 <prvDeleteTCB+0x40>
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 ff33 	bl	8006f5c <vPortFree>
 80060f6:	e010      	b.n	800611a <prvDeleteTCB+0x62>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d00b      	beq.n	800611a <prvDeleteTCB+0x62>
 8006102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	e7fd      	b.n	8006116 <prvDeleteTCB+0x5e>
 800611a:	bf00      	nop
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <prvResetNextTaskUnblockTime>:
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	4b0c      	ldr	r3, [pc, #48]	@ (800615c <prvResetNextTaskUnblockTime+0x38>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <prvResetNextTaskUnblockTime+0x1a>
 8006134:	4b0a      	ldr	r3, [pc, #40]	@ (8006160 <prvResetNextTaskUnblockTime+0x3c>)
 8006136:	f04f 32ff 	mov.w	r2, #4294967295
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	e008      	b.n	8006150 <prvResetNextTaskUnblockTime+0x2c>
 800613e:	4b07      	ldr	r3, [pc, #28]	@ (800615c <prvResetNextTaskUnblockTime+0x38>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	607b      	str	r3, [r7, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	4a04      	ldr	r2, [pc, #16]	@ (8006160 <prvResetNextTaskUnblockTime+0x3c>)
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20000ff8 	.word	0x20000ff8
 8006160:	20001060 	.word	0x20001060

08006164 <xTaskGetSchedulerState>:
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	4b0b      	ldr	r3, [pc, #44]	@ (8006198 <xTaskGetSchedulerState+0x34>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <xTaskGetSchedulerState+0x14>
 8006172:	2301      	movs	r3, #1
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	e008      	b.n	800618a <xTaskGetSchedulerState+0x26>
 8006178:	4b08      	ldr	r3, [pc, #32]	@ (800619c <xTaskGetSchedulerState+0x38>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <xTaskGetSchedulerState+0x22>
 8006180:	2302      	movs	r3, #2
 8006182:	607b      	str	r3, [r7, #4]
 8006184:	e001      	b.n	800618a <xTaskGetSchedulerState+0x26>
 8006186:	2300      	movs	r3, #0
 8006188:	607b      	str	r3, [r7, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	2000104c 	.word	0x2000104c
 800619c:	20001068 	.word	0x20001068

080061a0 <xTaskPriorityDisinherit>:
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d058      	beq.n	8006268 <xTaskPriorityDisinherit+0xc8>
 80061b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006274 <xTaskPriorityDisinherit+0xd4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d00b      	beq.n	80061d8 <xTaskPriorityDisinherit+0x38>
 80061c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	e7fd      	b.n	80061d4 <xTaskPriorityDisinherit+0x34>
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <xTaskPriorityDisinherit+0x58>
 80061e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <xTaskPriorityDisinherit+0x54>
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061fc:	1e5a      	subs	r2, r3, #1
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	651a      	str	r2, [r3, #80]	@ 0x50
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620a:	429a      	cmp	r2, r3
 800620c:	d02c      	beq.n	8006268 <xTaskPriorityDisinherit+0xc8>
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006212:	2b00      	cmp	r3, #0
 8006214:	d128      	bne.n	8006268 <xTaskPriorityDisinherit+0xc8>
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	3304      	adds	r3, #4
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe fbe2 	bl	80049e4 <uxListRemove>
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	619a      	str	r2, [r3, #24]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006238:	4b0f      	ldr	r3, [pc, #60]	@ (8006278 <xTaskPriorityDisinherit+0xd8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d903      	bls.n	8006248 <xTaskPriorityDisinherit+0xa8>
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4a0c      	ldr	r2, [pc, #48]	@ (8006278 <xTaskPriorityDisinherit+0xd8>)
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4a09      	ldr	r2, [pc, #36]	@ (800627c <xTaskPriorityDisinherit+0xdc>)
 8006256:	441a      	add	r2, r3
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	3304      	adds	r3, #4
 800625c:	4619      	mov	r1, r3
 800625e:	4610      	mov	r0, r2
 8006260:	f7fe fb65 	bl	800492e <vListInsertEnd>
 8006264:	2301      	movs	r3, #1
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000b6c 	.word	0x20000b6c
 8006278:	20001048 	.word	0x20001048
 800627c:	20000b70 	.word	0x20000b70

08006280 <prvAddCurrentTaskToDelayedList>:
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
 800628a:	4b21      	ldr	r3, [pc, #132]	@ (8006310 <prvAddCurrentTaskToDelayedList+0x90>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	4b20      	ldr	r3, [pc, #128]	@ (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3304      	adds	r3, #4
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fba4 	bl	80049e4 <uxListRemove>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d10a      	bne.n	80062ba <prvAddCurrentTaskToDelayedList+0x3a>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <prvAddCurrentTaskToDelayedList+0x3a>
 80062aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	4819      	ldr	r0, [pc, #100]	@ (8006318 <prvAddCurrentTaskToDelayedList+0x98>)
 80062b4:	f7fe fb3b 	bl	800492e <vListInsertEnd>
 80062b8:	e026      	b.n	8006308 <prvAddCurrentTaskToDelayedList+0x88>
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	60bb      	str	r3, [r7, #8]
 80062c2:	4b14      	ldr	r3, [pc, #80]	@ (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	605a      	str	r2, [r3, #4]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d209      	bcs.n	80062e6 <prvAddCurrentTaskToDelayedList+0x66>
 80062d2:	4b12      	ldr	r3, [pc, #72]	@ (800631c <prvAddCurrentTaskToDelayedList+0x9c>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3304      	adds	r3, #4
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f7fe fb48 	bl	8004974 <vListInsert>
 80062e4:	e010      	b.n	8006308 <prvAddCurrentTaskToDelayedList+0x88>
 80062e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006320 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7fe fb3e 	bl	8004974 <vListInsert>
 80062f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006324 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d202      	bcs.n	8006308 <prvAddCurrentTaskToDelayedList+0x88>
 8006302:	4a08      	ldr	r2, [pc, #32]	@ (8006324 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20001044 	.word	0x20001044
 8006314:	20000b6c 	.word	0x20000b6c
 8006318:	2000102c 	.word	0x2000102c
 800631c:	20000ffc 	.word	0x20000ffc
 8006320:	20000ff8 	.word	0x20000ff8
 8006324:	20001060 	.word	0x20001060

08006328 <xTimerCreateTimerTask>:
 8006328:	b580      	push	{r7, lr}
 800632a:	b08a      	sub	sp, #40	@ 0x28
 800632c:	af04      	add	r7, sp, #16
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	f000 fb11 	bl	8006958 <prvCheckForValidListAndQueue>
 8006336:	4b1d      	ldr	r3, [pc, #116]	@ (80063ac <xTimerCreateTimerTask+0x84>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d021      	beq.n	8006382 <xTimerCreateTimerTask+0x5a>
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	1d3a      	adds	r2, r7, #4
 8006348:	f107 0108 	add.w	r1, r7, #8
 800634c:	f107 030c 	add.w	r3, r7, #12
 8006350:	4618      	mov	r0, r3
 8006352:	f7fe faa7 	bl	80048a4 <vApplicationGetTimerTaskMemory>
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	9202      	str	r2, [sp, #8]
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	2302      	movs	r3, #2
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	460a      	mov	r2, r1
 8006368:	4911      	ldr	r1, [pc, #68]	@ (80063b0 <xTimerCreateTimerTask+0x88>)
 800636a:	4812      	ldr	r0, [pc, #72]	@ (80063b4 <xTimerCreateTimerTask+0x8c>)
 800636c:	f7ff f85c 	bl	8005428 <xTaskCreateStatic>
 8006370:	4603      	mov	r3, r0
 8006372:	4a11      	ldr	r2, [pc, #68]	@ (80063b8 <xTimerCreateTimerTask+0x90>)
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	4b10      	ldr	r3, [pc, #64]	@ (80063b8 <xTimerCreateTimerTask+0x90>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <xTimerCreateTimerTask+0x5a>
 800637e:	2301      	movs	r3, #1
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10b      	bne.n	80063a0 <xTimerCreateTimerTask+0x78>
 8006388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	bf00      	nop
 800639c:	bf00      	nop
 800639e:	e7fd      	b.n	800639c <xTimerCreateTimerTask+0x74>
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	2000109c 	.word	0x2000109c
 80063b0:	080073ac 	.word	0x080073ac
 80063b4:	080064f5 	.word	0x080064f5
 80063b8:	200010a0 	.word	0x200010a0

080063bc <xTimerGenericCommand>:
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	@ 0x28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	2300      	movs	r3, #0
 80063cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <xTimerGenericCommand+0x30>
 80063d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	623b      	str	r3, [r7, #32]
 80063e6:	bf00      	nop
 80063e8:	bf00      	nop
 80063ea:	e7fd      	b.n	80063e8 <xTimerGenericCommand+0x2c>
 80063ec:	4b19      	ldr	r3, [pc, #100]	@ (8006454 <xTimerGenericCommand+0x98>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d02a      	beq.n	800644a <xTimerGenericCommand+0x8e>
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	61bb      	str	r3, [r7, #24]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b05      	cmp	r3, #5
 8006404:	dc18      	bgt.n	8006438 <xTimerGenericCommand+0x7c>
 8006406:	f7ff fead 	bl	8006164 <xTaskGetSchedulerState>
 800640a:	4603      	mov	r3, r0
 800640c:	2b02      	cmp	r3, #2
 800640e:	d109      	bne.n	8006424 <xTimerGenericCommand+0x68>
 8006410:	4b10      	ldr	r3, [pc, #64]	@ (8006454 <xTimerGenericCommand+0x98>)
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	f107 0110 	add.w	r1, r7, #16
 8006418:	2300      	movs	r3, #0
 800641a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800641c:	f7fe fc16 	bl	8004c4c <xQueueGenericSend>
 8006420:	6278      	str	r0, [r7, #36]	@ 0x24
 8006422:	e012      	b.n	800644a <xTimerGenericCommand+0x8e>
 8006424:	4b0b      	ldr	r3, [pc, #44]	@ (8006454 <xTimerGenericCommand+0x98>)
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	f107 0110 	add.w	r1, r7, #16
 800642c:	2300      	movs	r3, #0
 800642e:	2200      	movs	r2, #0
 8006430:	f7fe fc0c 	bl	8004c4c <xQueueGenericSend>
 8006434:	6278      	str	r0, [r7, #36]	@ 0x24
 8006436:	e008      	b.n	800644a <xTimerGenericCommand+0x8e>
 8006438:	4b06      	ldr	r3, [pc, #24]	@ (8006454 <xTimerGenericCommand+0x98>)
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	f107 0110 	add.w	r1, r7, #16
 8006440:	2300      	movs	r3, #0
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	f7fe fd04 	bl	8004e50 <xQueueGenericSendFromISR>
 8006448:	6278      	str	r0, [r7, #36]	@ 0x24
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	4618      	mov	r0, r3
 800644e:	3728      	adds	r7, #40	@ 0x28
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	2000109c 	.word	0x2000109c

08006458 <prvProcessExpiredTimer>:
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af02      	add	r7, sp, #8
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
 8006462:	4b23      	ldr	r3, [pc, #140]	@ (80064f0 <prvProcessExpiredTimer+0x98>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	3304      	adds	r3, #4
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe fab7 	bl	80049e4 <uxListRemove>
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d023      	beq.n	80064cc <prvProcessExpiredTimer+0x74>
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	699a      	ldr	r2, [r3, #24]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	18d1      	adds	r1, r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	6978      	ldr	r0, [r7, #20]
 8006492:	f000 f8d3 	bl	800663c <prvInsertTimerInActiveList>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d020      	beq.n	80064de <prvProcessExpiredTimer+0x86>
 800649c:	2300      	movs	r3, #0
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	2300      	movs	r3, #0
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	2100      	movs	r1, #0
 80064a6:	6978      	ldr	r0, [r7, #20]
 80064a8:	f7ff ff88 	bl	80063bc <xTimerGenericCommand>
 80064ac:	6138      	str	r0, [r7, #16]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d114      	bne.n	80064de <prvProcessExpiredTimer+0x86>
 80064b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	bf00      	nop
 80064c8:	bf00      	nop
 80064ca:	e7fd      	b.n	80064c8 <prvProcessExpiredTimer+0x70>
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064d2:	f023 0301 	bic.w	r3, r3, #1
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	6978      	ldr	r0, [r7, #20]
 80064e4:	4798      	blx	r3
 80064e6:	bf00      	nop
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20001094 	.word	0x20001094

080064f4 <prvTimerTask>:
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	f107 0308 	add.w	r3, r7, #8
 8006500:	4618      	mov	r0, r3
 8006502:	f000 f859 	bl	80065b8 <prvGetNextExpireTime>
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4619      	mov	r1, r3
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f805 	bl	800651c <prvProcessTimerOrBlockTask>
 8006512:	f000 f8d5 	bl	80066c0 <prvProcessReceivedCommands>
 8006516:	bf00      	nop
 8006518:	e7f0      	b.n	80064fc <prvTimerTask+0x8>
	...

0800651c <prvProcessTimerOrBlockTask>:
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
 8006526:	f7ff fa2d 	bl	8005984 <vTaskSuspendAll>
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f864 	bl	80065fc <prvSampleTimeNow>
 8006534:	60f8      	str	r0, [r7, #12]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d130      	bne.n	800659e <prvProcessTimerOrBlockTask+0x82>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <prvProcessTimerOrBlockTask+0x3c>
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	429a      	cmp	r2, r3
 8006548:	d806      	bhi.n	8006558 <prvProcessTimerOrBlockTask+0x3c>
 800654a:	f7ff fa29 	bl	80059a0 <xTaskResumeAll>
 800654e:	68f9      	ldr	r1, [r7, #12]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ff81 	bl	8006458 <prvProcessExpiredTimer>
 8006556:	e024      	b.n	80065a2 <prvProcessTimerOrBlockTask+0x86>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d008      	beq.n	8006570 <prvProcessTimerOrBlockTask+0x54>
 800655e:	4b13      	ldr	r3, [pc, #76]	@ (80065ac <prvProcessTimerOrBlockTask+0x90>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <prvProcessTimerOrBlockTask+0x50>
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <prvProcessTimerOrBlockTask+0x52>
 800656c:	2300      	movs	r3, #0
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	4b0f      	ldr	r3, [pc, #60]	@ (80065b0 <prvProcessTimerOrBlockTask+0x94>)
 8006572:	6818      	ldr	r0, [r3, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	4619      	mov	r1, r3
 800657e:	f7fe ff1f 	bl	80053c0 <vQueueWaitForMessageRestricted>
 8006582:	f7ff fa0d 	bl	80059a0 <xTaskResumeAll>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <prvProcessTimerOrBlockTask+0x86>
 800658c:	4b09      	ldr	r3, [pc, #36]	@ (80065b4 <prvProcessTimerOrBlockTask+0x98>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	e001      	b.n	80065a2 <prvProcessTimerOrBlockTask+0x86>
 800659e:	f7ff f9ff 	bl	80059a0 <xTaskResumeAll>
 80065a2:	bf00      	nop
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20001098 	.word	0x20001098
 80065b0:	2000109c 	.word	0x2000109c
 80065b4:	e000ed04 	.word	0xe000ed04

080065b8 <prvGetNextExpireTime>:
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	4b0d      	ldr	r3, [pc, #52]	@ (80065f8 <prvGetNextExpireTime+0x40>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <prvGetNextExpireTime+0x16>
 80065ca:	2201      	movs	r2, #1
 80065cc:	e000      	b.n	80065d0 <prvGetNextExpireTime+0x18>
 80065ce:	2200      	movs	r2, #0
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <prvGetNextExpireTime+0x30>
 80065dc:	4b06      	ldr	r3, [pc, #24]	@ (80065f8 <prvGetNextExpireTime+0x40>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e001      	b.n	80065ec <prvGetNextExpireTime+0x34>
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	20001094 	.word	0x20001094

080065fc <prvSampleTimeNow>:
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	f7ff fa6a 	bl	8005adc <xTaskGetTickCount>
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	4b0b      	ldr	r3, [pc, #44]	@ (8006638 <prvSampleTimeNow+0x3c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	429a      	cmp	r2, r3
 8006612:	d205      	bcs.n	8006620 <prvSampleTimeNow+0x24>
 8006614:	f000 f93a 	bl	800688c <prvSwitchTimerLists>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e002      	b.n	8006626 <prvSampleTimeNow+0x2a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	4a04      	ldr	r2, [pc, #16]	@ (8006638 <prvSampleTimeNow+0x3c>)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	200010a4 	.word	0x200010a4

0800663c <prvInsertTimerInActiveList>:
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	605a      	str	r2, [r3, #4]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	611a      	str	r2, [r3, #16]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	429a      	cmp	r2, r3
 8006660:	d812      	bhi.n	8006688 <prvInsertTimerInActiveList+0x4c>
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	1ad2      	subs	r2, r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	429a      	cmp	r2, r3
 800666e:	d302      	bcc.n	8006676 <prvInsertTimerInActiveList+0x3a>
 8006670:	2301      	movs	r3, #1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	e01b      	b.n	80066ae <prvInsertTimerInActiveList+0x72>
 8006676:	4b10      	ldr	r3, [pc, #64]	@ (80066b8 <prvInsertTimerInActiveList+0x7c>)
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3304      	adds	r3, #4
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f7fe f977 	bl	8004974 <vListInsert>
 8006686:	e012      	b.n	80066ae <prvInsertTimerInActiveList+0x72>
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d206      	bcs.n	800669e <prvInsertTimerInActiveList+0x62>
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d302      	bcc.n	800669e <prvInsertTimerInActiveList+0x62>
 8006698:	2301      	movs	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	e007      	b.n	80066ae <prvInsertTimerInActiveList+0x72>
 800669e:	4b07      	ldr	r3, [pc, #28]	@ (80066bc <prvInsertTimerInActiveList+0x80>)
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3304      	adds	r3, #4
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f7fe f963 	bl	8004974 <vListInsert>
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	20001098 	.word	0x20001098
 80066bc:	20001094 	.word	0x20001094

080066c0 <prvProcessReceivedCommands>:
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08e      	sub	sp, #56	@ 0x38
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	e0ce      	b.n	8006866 <prvProcessReceivedCommands+0x1a6>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	da19      	bge.n	8006702 <prvProcessReceivedCommands+0x42>
 80066ce:	1d3b      	adds	r3, r7, #4
 80066d0:	3304      	adds	r3, #4
 80066d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <prvProcessReceivedCommands+0x32>
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <prvProcessReceivedCommands+0x2e>
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066f8:	6850      	ldr	r0, [r2, #4]
 80066fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066fc:	6892      	ldr	r2, [r2, #8]
 80066fe:	4611      	mov	r1, r2
 8006700:	4798      	blx	r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f2c0 80ae 	blt.w	8006866 <prvProcessReceivedCommands+0x1a6>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d004      	beq.n	8006720 <prvProcessReceivedCommands+0x60>
 8006716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006718:	3304      	adds	r3, #4
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe f962 	bl	80049e4 <uxListRemove>
 8006720:	463b      	mov	r3, r7
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff ff6a 	bl	80065fc <prvSampleTimeNow>
 8006728:	6278      	str	r0, [r7, #36]	@ 0x24
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b09      	cmp	r3, #9
 800672e:	f200 8097 	bhi.w	8006860 <prvProcessReceivedCommands+0x1a0>
 8006732:	a201      	add	r2, pc, #4	@ (adr r2, 8006738 <prvProcessReceivedCommands+0x78>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	08006761 	.word	0x08006761
 800673c:	08006761 	.word	0x08006761
 8006740:	08006761 	.word	0x08006761
 8006744:	080067d7 	.word	0x080067d7
 8006748:	080067eb 	.word	0x080067eb
 800674c:	08006837 	.word	0x08006837
 8006750:	08006761 	.word	0x08006761
 8006754:	08006761 	.word	0x08006761
 8006758:	080067d7 	.word	0x080067d7
 800675c:	080067eb 	.word	0x080067eb
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	b2da      	uxtb	r2, r3
 800676c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	18d1      	adds	r1, r2, r3
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800677e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006780:	f7ff ff5c 	bl	800663c <prvInsertTimerInActiveList>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d06c      	beq.n	8006864 <prvProcessReceivedCommands+0x1a4>
 800678a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006790:	4798      	blx	r3
 8006792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d061      	beq.n	8006864 <prvProcessReceivedCommands+0x1a4>
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	441a      	add	r2, r3
 80067a8:	2300      	movs	r3, #0
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	2300      	movs	r3, #0
 80067ae:	2100      	movs	r1, #0
 80067b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067b2:	f7ff fe03 	bl	80063bc <xTimerGenericCommand>
 80067b6:	6238      	str	r0, [r7, #32]
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d152      	bne.n	8006864 <prvProcessReceivedCommands+0x1a4>
 80067be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	61bb      	str	r3, [r7, #24]
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	e7fd      	b.n	80067d2 <prvProcessReceivedCommands+0x112>
 80067d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067dc:	f023 0301 	bic.w	r3, r3, #1
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80067e8:	e03d      	b.n	8006866 <prvProcessReceivedCommands+0x1a6>
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	619a      	str	r2, [r3, #24]
 8006802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <prvProcessReceivedCommands+0x162>
 800680a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <prvProcessReceivedCommands+0x15e>
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	18d1      	adds	r1, r2, r3
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800682e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006830:	f7ff ff04 	bl	800663c <prvInsertTimerInActiveList>
 8006834:	e017      	b.n	8006866 <prvProcessReceivedCommands+0x1a6>
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d103      	bne.n	800684c <prvProcessReceivedCommands+0x18c>
 8006844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006846:	f000 fb89 	bl	8006f5c <vPortFree>
 800684a:	e00c      	b.n	8006866 <prvProcessReceivedCommands+0x1a6>
 800684c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800685e:	e002      	b.n	8006866 <prvProcessReceivedCommands+0x1a6>
 8006860:	bf00      	nop
 8006862:	e000      	b.n	8006866 <prvProcessReceivedCommands+0x1a6>
 8006864:	bf00      	nop
 8006866:	4b08      	ldr	r3, [pc, #32]	@ (8006888 <prvProcessReceivedCommands+0x1c8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	1d39      	adds	r1, r7, #4
 800686c:	2200      	movs	r2, #0
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fb8c 	bl	8004f8c <xQueueReceive>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	f47f af26 	bne.w	80066c8 <prvProcessReceivedCommands+0x8>
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	3730      	adds	r7, #48	@ 0x30
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	2000109c 	.word	0x2000109c

0800688c <prvSwitchTimerLists>:
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af02      	add	r7, sp, #8
 8006892:	e049      	b.n	8006928 <prvSwitchTimerLists+0x9c>
 8006894:	4b2e      	ldr	r3, [pc, #184]	@ (8006950 <prvSwitchTimerLists+0xc4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	4b2c      	ldr	r3, [pc, #176]	@ (8006950 <prvSwitchTimerLists+0xc4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe f899 	bl	80049e4 <uxListRemove>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	4798      	blx	r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d02f      	beq.n	8006928 <prvSwitchTimerLists+0x9c>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4413      	add	r3, r2
 80068d0:	60bb      	str	r3, [r7, #8]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d90e      	bls.n	80068f8 <prvSwitchTimerLists+0x6c>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	605a      	str	r2, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	611a      	str	r2, [r3, #16]
 80068e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006950 <prvSwitchTimerLists+0xc4>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3304      	adds	r3, #4
 80068ee:	4619      	mov	r1, r3
 80068f0:	4610      	mov	r0, r2
 80068f2:	f7fe f83f 	bl	8004974 <vListInsert>
 80068f6:	e017      	b.n	8006928 <prvSwitchTimerLists+0x9c>
 80068f8:	2300      	movs	r3, #0
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	2300      	movs	r3, #0
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	2100      	movs	r1, #0
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff fd5a 	bl	80063bc <xTimerGenericCommand>
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10b      	bne.n	8006928 <prvSwitchTimerLists+0x9c>
 8006910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	603b      	str	r3, [r7, #0]
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	e7fd      	b.n	8006924 <prvSwitchTimerLists+0x98>
 8006928:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <prvSwitchTimerLists+0xc4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1b0      	bne.n	8006894 <prvSwitchTimerLists+0x8>
 8006932:	4b07      	ldr	r3, [pc, #28]	@ (8006950 <prvSwitchTimerLists+0xc4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	4b06      	ldr	r3, [pc, #24]	@ (8006954 <prvSwitchTimerLists+0xc8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a04      	ldr	r2, [pc, #16]	@ (8006950 <prvSwitchTimerLists+0xc4>)
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	4a04      	ldr	r2, [pc, #16]	@ (8006954 <prvSwitchTimerLists+0xc8>)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	bf00      	nop
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20001094 	.word	0x20001094
 8006954:	20001098 	.word	0x20001098

08006958 <prvCheckForValidListAndQueue>:
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af02      	add	r7, sp, #8
 800695e:	f000 f92d 	bl	8006bbc <vPortEnterCritical>
 8006962:	4b15      	ldr	r3, [pc, #84]	@ (80069b8 <prvCheckForValidListAndQueue+0x60>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d120      	bne.n	80069ac <prvCheckForValidListAndQueue+0x54>
 800696a:	4814      	ldr	r0, [pc, #80]	@ (80069bc <prvCheckForValidListAndQueue+0x64>)
 800696c:	f7fd ffb4 	bl	80048d8 <vListInitialise>
 8006970:	4813      	ldr	r0, [pc, #76]	@ (80069c0 <prvCheckForValidListAndQueue+0x68>)
 8006972:	f7fd ffb1 	bl	80048d8 <vListInitialise>
 8006976:	4b13      	ldr	r3, [pc, #76]	@ (80069c4 <prvCheckForValidListAndQueue+0x6c>)
 8006978:	4a10      	ldr	r2, [pc, #64]	@ (80069bc <prvCheckForValidListAndQueue+0x64>)
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	4b12      	ldr	r3, [pc, #72]	@ (80069c8 <prvCheckForValidListAndQueue+0x70>)
 800697e:	4a10      	ldr	r2, [pc, #64]	@ (80069c0 <prvCheckForValidListAndQueue+0x68>)
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	2300      	movs	r3, #0
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	4b11      	ldr	r3, [pc, #68]	@ (80069cc <prvCheckForValidListAndQueue+0x74>)
 8006988:	4a11      	ldr	r2, [pc, #68]	@ (80069d0 <prvCheckForValidListAndQueue+0x78>)
 800698a:	2110      	movs	r1, #16
 800698c:	200a      	movs	r0, #10
 800698e:	f7fe f8bd 	bl	8004b0c <xQueueGenericCreateStatic>
 8006992:	4603      	mov	r3, r0
 8006994:	4a08      	ldr	r2, [pc, #32]	@ (80069b8 <prvCheckForValidListAndQueue+0x60>)
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	4b07      	ldr	r3, [pc, #28]	@ (80069b8 <prvCheckForValidListAndQueue+0x60>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <prvCheckForValidListAndQueue+0x54>
 80069a0:	4b05      	ldr	r3, [pc, #20]	@ (80069b8 <prvCheckForValidListAndQueue+0x60>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	490b      	ldr	r1, [pc, #44]	@ (80069d4 <prvCheckForValidListAndQueue+0x7c>)
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fce2 	bl	8005370 <vQueueAddToRegistry>
 80069ac:	f000 f936 	bl	8006c1c <vPortExitCritical>
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	2000109c 	.word	0x2000109c
 80069bc:	2000106c 	.word	0x2000106c
 80069c0:	20001080 	.word	0x20001080
 80069c4:	20001094 	.word	0x20001094
 80069c8:	20001098 	.word	0x20001098
 80069cc:	20001148 	.word	0x20001148
 80069d0:	200010a8 	.word	0x200010a8
 80069d4:	080073b4 	.word	0x080073b4

080069d8 <pxPortInitialiseStack>:
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3b04      	subs	r3, #4
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3b04      	subs	r3, #4
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f023 0201 	bic.w	r2, r3, #1
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3b04      	subs	r3, #4
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	4a08      	ldr	r2, [pc, #32]	@ (8006a2c <pxPortInitialiseStack+0x54>)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3b14      	subs	r3, #20
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3b20      	subs	r3, #32
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr
 8006a2c:	08006a31 	.word	0x08006a31

08006a30 <prvTaskExitError>:
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	2300      	movs	r3, #0
 8006a38:	607b      	str	r3, [r7, #4]
 8006a3a:	4b12      	ldr	r3, [pc, #72]	@ (8006a84 <prvTaskExitError+0x54>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a42:	d00b      	beq.n	8006a5c <prvTaskExitError+0x2c>
 8006a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	bf00      	nop
 8006a58:	bf00      	nop
 8006a5a:	e7fd      	b.n	8006a58 <prvTaskExitError+0x28>
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0fc      	beq.n	8006a72 <prvTaskExitError+0x42>
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr
 8006a84:	20000010 	.word	0x20000010
	...

08006a90 <SVC_Handler>:
 8006a90:	4b07      	ldr	r3, [pc, #28]	@ (8006ab0 <pxCurrentTCBConst2>)
 8006a92:	6819      	ldr	r1, [r3, #0]
 8006a94:	6808      	ldr	r0, [r1, #0]
 8006a96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a9a:	f380 8809 	msr	PSP, r0
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f04f 0000 	mov.w	r0, #0
 8006aa6:	f380 8811 	msr	BASEPRI, r0
 8006aaa:	f04e 0e0d 	orr.w	lr, lr, #13
 8006aae:	4770      	bx	lr

08006ab0 <pxCurrentTCBConst2>:
 8006ab0:	20000b6c 	.word	0x20000b6c
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <prvPortStartFirstTask>:
 8006ab8:	4806      	ldr	r0, [pc, #24]	@ (8006ad4 <prvPortStartFirstTask+0x1c>)
 8006aba:	6800      	ldr	r0, [r0, #0]
 8006abc:	6800      	ldr	r0, [r0, #0]
 8006abe:	f380 8808 	msr	MSP, r0
 8006ac2:	b662      	cpsie	i
 8006ac4:	b661      	cpsie	f
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	df00      	svc	0
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	e000ed08 	.word	0xe000ed08

08006ad8 <xPortStartScheduler>:
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4b32      	ldr	r3, [pc, #200]	@ (8006ba8 <xPortStartScheduler+0xd0>)
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	607b      	str	r3, [r7, #4]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	22ff      	movs	r2, #255	@ 0xff
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	70fb      	strb	r3, [r7, #3]
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	4b2a      	ldr	r3, [pc, #168]	@ (8006bac <xPortStartScheduler+0xd4>)
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb0 <xPortStartScheduler+0xd8>)
 8006b08:	2207      	movs	r2, #7
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	e009      	b.n	8006b22 <xPortStartScheduler+0x4a>
 8006b0e:	4b28      	ldr	r3, [pc, #160]	@ (8006bb0 <xPortStartScheduler+0xd8>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	4a26      	ldr	r2, [pc, #152]	@ (8006bb0 <xPortStartScheduler+0xd8>)
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	70fb      	strb	r3, [r7, #3]
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b2a:	2b80      	cmp	r3, #128	@ 0x80
 8006b2c:	d0ef      	beq.n	8006b0e <xPortStartScheduler+0x36>
 8006b2e:	4b20      	ldr	r3, [pc, #128]	@ (8006bb0 <xPortStartScheduler+0xd8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f1c3 0307 	rsb	r3, r3, #7
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d00b      	beq.n	8006b52 <xPortStartScheduler+0x7a>
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	60bb      	str	r3, [r7, #8]
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <xPortStartScheduler+0x76>
 8006b52:	4b17      	ldr	r3, [pc, #92]	@ (8006bb0 <xPortStartScheduler+0xd8>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	4a15      	ldr	r2, [pc, #84]	@ (8006bb0 <xPortStartScheduler+0xd8>)
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	4b14      	ldr	r3, [pc, #80]	@ (8006bb0 <xPortStartScheduler+0xd8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b64:	4a12      	ldr	r2, [pc, #72]	@ (8006bb0 <xPortStartScheduler+0xd8>)
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	4b10      	ldr	r3, [pc, #64]	@ (8006bb4 <xPortStartScheduler+0xdc>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a0f      	ldr	r2, [pc, #60]	@ (8006bb4 <xPortStartScheduler+0xdc>)
 8006b76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb4 <xPortStartScheduler+0xdc>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0c      	ldr	r2, [pc, #48]	@ (8006bb4 <xPortStartScheduler+0xdc>)
 8006b82:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	f000 f8b8 	bl	8006cfc <vPortSetupTimerInterrupt>
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <xPortStartScheduler+0xe0>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	f7ff ff91 	bl	8006ab8 <prvPortStartFirstTask>
 8006b96:	f7ff f869 	bl	8005c6c <vTaskSwitchContext>
 8006b9a:	f7ff ff49 	bl	8006a30 <prvTaskExitError>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	e000e400 	.word	0xe000e400
 8006bac:	20001198 	.word	0x20001198
 8006bb0:	2000119c 	.word	0x2000119c
 8006bb4:	e000ed20 	.word	0xe000ed20
 8006bb8:	20000010 	.word	0x20000010

08006bbc <vPortEnterCritical>:
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	607b      	str	r3, [r7, #4]
 8006bd4:	bf00      	nop
 8006bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c14 <vPortEnterCritical+0x58>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8006c14 <vPortEnterCritical+0x58>)
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <vPortEnterCritical+0x58>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d110      	bne.n	8006c0a <vPortEnterCritical+0x4e>
 8006be8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c18 <vPortEnterCritical+0x5c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <vPortEnterCritical+0x4e>
 8006bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop
 8006c08:	e7fd      	b.n	8006c06 <vPortEnterCritical+0x4a>
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr
 8006c14:	20000010 	.word	0x20000010
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <vPortExitCritical>:
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4b12      	ldr	r3, [pc, #72]	@ (8006c6c <vPortExitCritical+0x50>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10b      	bne.n	8006c42 <vPortExitCritical+0x26>
 8006c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	bf00      	nop
 8006c3e:	bf00      	nop
 8006c40:	e7fd      	b.n	8006c3e <vPortExitCritical+0x22>
 8006c42:	4b0a      	ldr	r3, [pc, #40]	@ (8006c6c <vPortExitCritical+0x50>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	4a08      	ldr	r2, [pc, #32]	@ (8006c6c <vPortExitCritical+0x50>)
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	4b07      	ldr	r3, [pc, #28]	@ (8006c6c <vPortExitCritical+0x50>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d105      	bne.n	8006c60 <vPortExitCritical+0x44>
 8006c54:	2300      	movs	r3, #0
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	20000010 	.word	0x20000010

08006c70 <PendSV_Handler>:
 8006c70:	f3ef 8009 	mrs	r0, PSP
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb0 <pxCurrentTCBConst>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c80:	6010      	str	r0, [r2, #0]
 8006c82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006c86:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c8a:	f380 8811 	msr	BASEPRI, r0
 8006c8e:	f7fe ffed 	bl	8005c6c <vTaskSwitchContext>
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f380 8811 	msr	BASEPRI, r0
 8006c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c9e:	6819      	ldr	r1, [r3, #0]
 8006ca0:	6808      	ldr	r0, [r1, #0]
 8006ca2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ca6:	f380 8809 	msr	PSP, r0
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	4770      	bx	lr

08006cb0 <pxCurrentTCBConst>:
 8006cb0:	20000b6c 	.word	0x20000b6c
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <xPortSysTickHandler>:
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
 8006cd0:	bf00      	nop
 8006cd2:	f7fe ff11 	bl	8005af8 <xTaskIncrementTick>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <xPortSysTickHandler+0x2c>
 8006cdc:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <xPortSysTickHandler+0x40>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <vPortSetupTimerInterrupt>:
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	4b0a      	ldr	r3, [pc, #40]	@ (8006d2c <vPortSetupTimerInterrupt+0x30>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	4b09      	ldr	r3, [pc, #36]	@ (8006d34 <vPortSetupTimerInterrupt+0x38>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a09      	ldr	r2, [pc, #36]	@ (8006d38 <vPortSetupTimerInterrupt+0x3c>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	4a08      	ldr	r2, [pc, #32]	@ (8006d3c <vPortSetupTimerInterrupt+0x40>)
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	4b03      	ldr	r3, [pc, #12]	@ (8006d2c <vPortSetupTimerInterrupt+0x30>)
 8006d20:	2207      	movs	r2, #7
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	bf00      	nop
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bc80      	pop	{r7}
 8006d2a:	4770      	bx	lr
 8006d2c:	e000e010 	.word	0xe000e010
 8006d30:	e000e018 	.word	0xe000e018
 8006d34:	20000004 	.word	0x20000004
 8006d38:	10624dd3 	.word	0x10624dd3
 8006d3c:	e000e014 	.word	0xe000e014

08006d40 <vPortValidateInterruptPriority>:
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	f3ef 8305 	mrs	r3, IPSR
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b0f      	cmp	r3, #15
 8006d50:	d915      	bls.n	8006d7e <vPortValidateInterruptPriority+0x3e>
 8006d52:	4a17      	ldr	r2, [pc, #92]	@ (8006db0 <vPortValidateInterruptPriority+0x70>)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	72fb      	strb	r3, [r7, #11]
 8006d5c:	4b15      	ldr	r3, [pc, #84]	@ (8006db4 <vPortValidateInterruptPriority+0x74>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	7afa      	ldrb	r2, [r7, #11]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d20b      	bcs.n	8006d7e <vPortValidateInterruptPriority+0x3e>
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	607b      	str	r3, [r7, #4]
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <vPortValidateInterruptPriority+0x3a>
 8006d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006db8 <vPortValidateInterruptPriority+0x78>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d86:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <vPortValidateInterruptPriority+0x7c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d90b      	bls.n	8006da6 <vPortValidateInterruptPriority+0x66>
 8006d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	bf00      	nop
 8006da2:	bf00      	nop
 8006da4:	e7fd      	b.n	8006da2 <vPortValidateInterruptPriority+0x62>
 8006da6:	bf00      	nop
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr
 8006db0:	e000e3f0 	.word	0xe000e3f0
 8006db4:	20001198 	.word	0x20001198
 8006db8:	e000ed0c 	.word	0xe000ed0c
 8006dbc:	2000119c 	.word	0x2000119c

08006dc0 <pvPortMalloc>:
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	@ 0x28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	f7fe fdda 	bl	8005984 <vTaskSuspendAll>
 8006dd0:	4b5c      	ldr	r3, [pc, #368]	@ (8006f44 <pvPortMalloc+0x184>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <pvPortMalloc+0x1c>
 8006dd8:	f000 f924 	bl	8007024 <prvHeapInit>
 8006ddc:	4b5a      	ldr	r3, [pc, #360]	@ (8006f48 <pvPortMalloc+0x188>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f040 8095 	bne.w	8006f14 <pvPortMalloc+0x154>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01e      	beq.n	8006e2e <pvPortMalloc+0x6e>
 8006df0:	2208      	movs	r2, #8
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4413      	add	r3, r2
 8006df6:	607b      	str	r3, [r7, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d015      	beq.n	8006e2e <pvPortMalloc+0x6e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f023 0307 	bic.w	r3, r3, #7
 8006e08:	3308      	adds	r3, #8
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <pvPortMalloc+0x6e>
 8006e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	e7fd      	b.n	8006e2a <pvPortMalloc+0x6a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d06f      	beq.n	8006f14 <pvPortMalloc+0x154>
 8006e34:	4b45      	ldr	r3, [pc, #276]	@ (8006f4c <pvPortMalloc+0x18c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d86a      	bhi.n	8006f14 <pvPortMalloc+0x154>
 8006e3e:	4b44      	ldr	r3, [pc, #272]	@ (8006f50 <pvPortMalloc+0x190>)
 8006e40:	623b      	str	r3, [r7, #32]
 8006e42:	4b43      	ldr	r3, [pc, #268]	@ (8006f50 <pvPortMalloc+0x190>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e48:	e004      	b.n	8006e54 <pvPortMalloc+0x94>
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d903      	bls.n	8006e66 <pvPortMalloc+0xa6>
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f1      	bne.n	8006e4a <pvPortMalloc+0x8a>
 8006e66:	4b37      	ldr	r3, [pc, #220]	@ (8006f44 <pvPortMalloc+0x184>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d051      	beq.n	8006f14 <pvPortMalloc+0x154>
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2208      	movs	r2, #8
 8006e76:	4413      	add	r3, r2
 8006e78:	61fb      	str	r3, [r7, #28]
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	1ad2      	subs	r2, r2, r3
 8006e8a:	2308      	movs	r3, #8
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d920      	bls.n	8006ed4 <pvPortMalloc+0x114>
 8006e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4413      	add	r3, r2
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <pvPortMalloc+0xfc>
 8006ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	613b      	str	r3, [r7, #16]
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	e7fd      	b.n	8006eb8 <pvPortMalloc+0xf8>
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	1ad2      	subs	r2, r2, r3
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	605a      	str	r2, [r3, #4]
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	605a      	str	r2, [r3, #4]
 8006ece:	69b8      	ldr	r0, [r7, #24]
 8006ed0:	f000 f90a 	bl	80070e8 <prvInsertBlockIntoFreeList>
 8006ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f4c <pvPortMalloc+0x18c>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	4a1b      	ldr	r2, [pc, #108]	@ (8006f4c <pvPortMalloc+0x18c>)
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f4c <pvPortMalloc+0x18c>)
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8006f54 <pvPortMalloc+0x194>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d203      	bcs.n	8006ef6 <pvPortMalloc+0x136>
 8006eee:	4b17      	ldr	r3, [pc, #92]	@ (8006f4c <pvPortMalloc+0x18c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a18      	ldr	r2, [pc, #96]	@ (8006f54 <pvPortMalloc+0x194>)
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	4b13      	ldr	r3, [pc, #76]	@ (8006f48 <pvPortMalloc+0x188>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	605a      	str	r2, [r3, #4]
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	4b13      	ldr	r3, [pc, #76]	@ (8006f58 <pvPortMalloc+0x198>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	4a11      	ldr	r2, [pc, #68]	@ (8006f58 <pvPortMalloc+0x198>)
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	f7fe fd44 	bl	80059a0 <xTaskResumeAll>
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <pvPortMalloc+0x17a>
 8006f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	e7fd      	b.n	8006f36 <pvPortMalloc+0x176>
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3728      	adds	r7, #40	@ 0x28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20001da8 	.word	0x20001da8
 8006f48:	20001dbc 	.word	0x20001dbc
 8006f4c:	20001dac 	.word	0x20001dac
 8006f50:	20001da0 	.word	0x20001da0
 8006f54:	20001db0 	.word	0x20001db0
 8006f58:	20001db4 	.word	0x20001db4

08006f5c <vPortFree>:
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d04f      	beq.n	800700e <vPortFree+0xb2>
 8006f6e:	2308      	movs	r3, #8
 8006f70:	425b      	negs	r3, r3
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	4413      	add	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	4b25      	ldr	r3, [pc, #148]	@ (8007018 <vPortFree+0xbc>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10b      	bne.n	8006fa2 <vPortFree+0x46>
 8006f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	e7fd      	b.n	8006f9e <vPortFree+0x42>
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <vPortFree+0x66>
 8006faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	60bb      	str	r3, [r7, #8]
 8006fbc:	bf00      	nop
 8006fbe:	bf00      	nop
 8006fc0:	e7fd      	b.n	8006fbe <vPortFree+0x62>
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	4b14      	ldr	r3, [pc, #80]	@ (8007018 <vPortFree+0xbc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01e      	beq.n	800700e <vPortFree+0xb2>
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d11a      	bne.n	800700e <vPortFree+0xb2>
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8007018 <vPortFree+0xbc>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	401a      	ands	r2, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	605a      	str	r2, [r3, #4]
 8006fe8:	f7fe fccc 	bl	8005984 <vTaskSuspendAll>
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800701c <vPortFree+0xc0>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	4a09      	ldr	r2, [pc, #36]	@ (800701c <vPortFree+0xc0>)
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	6938      	ldr	r0, [r7, #16]
 8006ffc:	f000 f874 	bl	80070e8 <prvInsertBlockIntoFreeList>
 8007000:	4b07      	ldr	r3, [pc, #28]	@ (8007020 <vPortFree+0xc4>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	4a06      	ldr	r2, [pc, #24]	@ (8007020 <vPortFree+0xc4>)
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	f7fe fcc9 	bl	80059a0 <xTaskResumeAll>
 800700e:	bf00      	nop
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20001dbc 	.word	0x20001dbc
 800701c:	20001dac 	.word	0x20001dac
 8007020:	20001db8 	.word	0x20001db8

08007024 <prvHeapInit>:
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800702e:	60bb      	str	r3, [r7, #8]
 8007030:	4b27      	ldr	r3, [pc, #156]	@ (80070d0 <prvHeapInit+0xac>)
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00c      	beq.n	8007058 <prvHeapInit+0x34>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3307      	adds	r3, #7
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0307 	bic.w	r3, r3, #7
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	4a1f      	ldr	r2, [pc, #124]	@ (80070d0 <prvHeapInit+0xac>)
 8007054:	4413      	add	r3, r2
 8007056:	60bb      	str	r3, [r7, #8]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	607b      	str	r3, [r7, #4]
 800705c:	4a1d      	ldr	r2, [pc, #116]	@ (80070d4 <prvHeapInit+0xb0>)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	4b1c      	ldr	r3, [pc, #112]	@ (80070d4 <prvHeapInit+0xb0>)
 8007064:	2200      	movs	r2, #0
 8007066:	605a      	str	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4413      	add	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	2208      	movs	r2, #8
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	1a9b      	subs	r3, r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0307 	bic.w	r3, r3, #7
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4a15      	ldr	r2, [pc, #84]	@ (80070d8 <prvHeapInit+0xb4>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4b14      	ldr	r3, [pc, #80]	@ (80070d8 <prvHeapInit+0xb4>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2200      	movs	r2, #0
 800708c:	605a      	str	r2, [r3, #4]
 800708e:	4b12      	ldr	r3, [pc, #72]	@ (80070d8 <prvHeapInit+0xb4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	1ad2      	subs	r2, r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	605a      	str	r2, [r3, #4]
 80070a4:	4b0c      	ldr	r3, [pc, #48]	@ (80070d8 <prvHeapInit+0xb4>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	4a0a      	ldr	r2, [pc, #40]	@ (80070dc <prvHeapInit+0xb8>)
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	4a09      	ldr	r2, [pc, #36]	@ (80070e0 <prvHeapInit+0xbc>)
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	4b09      	ldr	r3, [pc, #36]	@ (80070e4 <prvHeapInit+0xc0>)
 80070be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	bf00      	nop
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	200011a0 	.word	0x200011a0
 80070d4:	20001da0 	.word	0x20001da0
 80070d8:	20001da8 	.word	0x20001da8
 80070dc:	20001db0 	.word	0x20001db0
 80070e0:	20001dac 	.word	0x20001dac
 80070e4:	20001dbc 	.word	0x20001dbc

080070e8 <prvInsertBlockIntoFreeList>:
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	4b27      	ldr	r3, [pc, #156]	@ (8007190 <prvInsertBlockIntoFreeList+0xa8>)
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	e002      	b.n	80070fc <prvInsertBlockIntoFreeList+0x14>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	429a      	cmp	r2, r3
 8007104:	d8f7      	bhi.n	80070f6 <prvInsertBlockIntoFreeList+0xe>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	4413      	add	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d108      	bne.n	800712a <prvInsertBlockIntoFreeList+0x42>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	441a      	add	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	607b      	str	r3, [r7, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60bb      	str	r3, [r7, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	441a      	add	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d118      	bne.n	8007170 <prvInsertBlockIntoFreeList+0x88>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4b14      	ldr	r3, [pc, #80]	@ (8007194 <prvInsertBlockIntoFreeList+0xac>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d00d      	beq.n	8007166 <prvInsertBlockIntoFreeList+0x7e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	441a      	add	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	605a      	str	r2, [r3, #4]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	e008      	b.n	8007178 <prvInsertBlockIntoFreeList+0x90>
 8007166:	4b0b      	ldr	r3, [pc, #44]	@ (8007194 <prvInsertBlockIntoFreeList+0xac>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	e003      	b.n	8007178 <prvInsertBlockIntoFreeList+0x90>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	429a      	cmp	r2, r3
 800717e:	d002      	beq.n	8007186 <prvInsertBlockIntoFreeList+0x9e>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	bf00      	nop
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr
 8007190:	20001da0 	.word	0x20001da0
 8007194:	20001da8 	.word	0x20001da8

08007198 <memset>:
 8007198:	4603      	mov	r3, r0
 800719a:	4402      	add	r2, r0
 800719c:	4293      	cmp	r3, r2
 800719e:	d100      	bne.n	80071a2 <memset+0xa>
 80071a0:	4770      	bx	lr
 80071a2:	f803 1b01 	strb.w	r1, [r3], #1
 80071a6:	e7f9      	b.n	800719c <memset+0x4>

080071a8 <_reclaim_reent>:
 80071a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007260 <_reclaim_reent+0xb8>)
 80071aa:	b570      	push	{r4, r5, r6, lr}
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4604      	mov	r4, r0
 80071b0:	4283      	cmp	r3, r0
 80071b2:	d053      	beq.n	800725c <_reclaim_reent+0xb4>
 80071b4:	69c3      	ldr	r3, [r0, #28]
 80071b6:	b31b      	cbz	r3, 8007200 <_reclaim_reent+0x58>
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	b163      	cbz	r3, 80071d6 <_reclaim_reent+0x2e>
 80071bc:	2500      	movs	r5, #0
 80071be:	69e3      	ldr	r3, [r4, #28]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	5959      	ldr	r1, [r3, r5]
 80071c4:	b9b1      	cbnz	r1, 80071f4 <_reclaim_reent+0x4c>
 80071c6:	3504      	adds	r5, #4
 80071c8:	2d80      	cmp	r5, #128	@ 0x80
 80071ca:	d1f8      	bne.n	80071be <_reclaim_reent+0x16>
 80071cc:	69e3      	ldr	r3, [r4, #28]
 80071ce:	4620      	mov	r0, r4
 80071d0:	68d9      	ldr	r1, [r3, #12]
 80071d2:	f000 f87b 	bl	80072cc <_free_r>
 80071d6:	69e3      	ldr	r3, [r4, #28]
 80071d8:	6819      	ldr	r1, [r3, #0]
 80071da:	b111      	cbz	r1, 80071e2 <_reclaim_reent+0x3a>
 80071dc:	4620      	mov	r0, r4
 80071de:	f000 f875 	bl	80072cc <_free_r>
 80071e2:	69e3      	ldr	r3, [r4, #28]
 80071e4:	689d      	ldr	r5, [r3, #8]
 80071e6:	b15d      	cbz	r5, 8007200 <_reclaim_reent+0x58>
 80071e8:	4629      	mov	r1, r5
 80071ea:	4620      	mov	r0, r4
 80071ec:	682d      	ldr	r5, [r5, #0]
 80071ee:	f000 f86d 	bl	80072cc <_free_r>
 80071f2:	e7f8      	b.n	80071e6 <_reclaim_reent+0x3e>
 80071f4:	680e      	ldr	r6, [r1, #0]
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 f868 	bl	80072cc <_free_r>
 80071fc:	4631      	mov	r1, r6
 80071fe:	e7e1      	b.n	80071c4 <_reclaim_reent+0x1c>
 8007200:	6961      	ldr	r1, [r4, #20]
 8007202:	b111      	cbz	r1, 800720a <_reclaim_reent+0x62>
 8007204:	4620      	mov	r0, r4
 8007206:	f000 f861 	bl	80072cc <_free_r>
 800720a:	69e1      	ldr	r1, [r4, #28]
 800720c:	b111      	cbz	r1, 8007214 <_reclaim_reent+0x6c>
 800720e:	4620      	mov	r0, r4
 8007210:	f000 f85c 	bl	80072cc <_free_r>
 8007214:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007216:	b111      	cbz	r1, 800721e <_reclaim_reent+0x76>
 8007218:	4620      	mov	r0, r4
 800721a:	f000 f857 	bl	80072cc <_free_r>
 800721e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007220:	b111      	cbz	r1, 8007228 <_reclaim_reent+0x80>
 8007222:	4620      	mov	r0, r4
 8007224:	f000 f852 	bl	80072cc <_free_r>
 8007228:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800722a:	b111      	cbz	r1, 8007232 <_reclaim_reent+0x8a>
 800722c:	4620      	mov	r0, r4
 800722e:	f000 f84d 	bl	80072cc <_free_r>
 8007232:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007234:	b111      	cbz	r1, 800723c <_reclaim_reent+0x94>
 8007236:	4620      	mov	r0, r4
 8007238:	f000 f848 	bl	80072cc <_free_r>
 800723c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800723e:	b111      	cbz	r1, 8007246 <_reclaim_reent+0x9e>
 8007240:	4620      	mov	r0, r4
 8007242:	f000 f843 	bl	80072cc <_free_r>
 8007246:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007248:	b111      	cbz	r1, 8007250 <_reclaim_reent+0xa8>
 800724a:	4620      	mov	r0, r4
 800724c:	f000 f83e 	bl	80072cc <_free_r>
 8007250:	6a23      	ldr	r3, [r4, #32]
 8007252:	b11b      	cbz	r3, 800725c <_reclaim_reent+0xb4>
 8007254:	4620      	mov	r0, r4
 8007256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800725a:	4718      	bx	r3
 800725c:	bd70      	pop	{r4, r5, r6, pc}
 800725e:	bf00      	nop
 8007260:	20000014 	.word	0x20000014

08007264 <__libc_init_array>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	2600      	movs	r6, #0
 8007268:	4d0c      	ldr	r5, [pc, #48]	@ (800729c <__libc_init_array+0x38>)
 800726a:	4c0d      	ldr	r4, [pc, #52]	@ (80072a0 <__libc_init_array+0x3c>)
 800726c:	1b64      	subs	r4, r4, r5
 800726e:	10a4      	asrs	r4, r4, #2
 8007270:	42a6      	cmp	r6, r4
 8007272:	d109      	bne.n	8007288 <__libc_init_array+0x24>
 8007274:	f000 f87e 	bl	8007374 <_init>
 8007278:	2600      	movs	r6, #0
 800727a:	4d0a      	ldr	r5, [pc, #40]	@ (80072a4 <__libc_init_array+0x40>)
 800727c:	4c0a      	ldr	r4, [pc, #40]	@ (80072a8 <__libc_init_array+0x44>)
 800727e:	1b64      	subs	r4, r4, r5
 8007280:	10a4      	asrs	r4, r4, #2
 8007282:	42a6      	cmp	r6, r4
 8007284:	d105      	bne.n	8007292 <__libc_init_array+0x2e>
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	f855 3b04 	ldr.w	r3, [r5], #4
 800728c:	4798      	blx	r3
 800728e:	3601      	adds	r6, #1
 8007290:	e7ee      	b.n	8007270 <__libc_init_array+0xc>
 8007292:	f855 3b04 	ldr.w	r3, [r5], #4
 8007296:	4798      	blx	r3
 8007298:	3601      	adds	r6, #1
 800729a:	e7f2      	b.n	8007282 <__libc_init_array+0x1e>
 800729c:	08007440 	.word	0x08007440
 80072a0:	08007440 	.word	0x08007440
 80072a4:	08007440 	.word	0x08007440
 80072a8:	08007444 	.word	0x08007444

080072ac <__retarget_lock_acquire_recursive>:
 80072ac:	4770      	bx	lr

080072ae <__retarget_lock_release_recursive>:
 80072ae:	4770      	bx	lr

080072b0 <memcpy>:
 80072b0:	440a      	add	r2, r1
 80072b2:	4291      	cmp	r1, r2
 80072b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072b8:	d100      	bne.n	80072bc <memcpy+0xc>
 80072ba:	4770      	bx	lr
 80072bc:	b510      	push	{r4, lr}
 80072be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c2:	4291      	cmp	r1, r2
 80072c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072c8:	d1f9      	bne.n	80072be <memcpy+0xe>
 80072ca:	bd10      	pop	{r4, pc}

080072cc <_free_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4605      	mov	r5, r0
 80072d0:	2900      	cmp	r1, #0
 80072d2:	d040      	beq.n	8007356 <_free_r+0x8a>
 80072d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d8:	1f0c      	subs	r4, r1, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bfb8      	it	lt
 80072de:	18e4      	addlt	r4, r4, r3
 80072e0:	f000 f83c 	bl	800735c <__malloc_lock>
 80072e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007358 <_free_r+0x8c>)
 80072e6:	6813      	ldr	r3, [r2, #0]
 80072e8:	b933      	cbnz	r3, 80072f8 <_free_r+0x2c>
 80072ea:	6063      	str	r3, [r4, #4]
 80072ec:	6014      	str	r4, [r2, #0]
 80072ee:	4628      	mov	r0, r5
 80072f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072f4:	f000 b838 	b.w	8007368 <__malloc_unlock>
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	d908      	bls.n	800730e <_free_r+0x42>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	1821      	adds	r1, r4, r0
 8007300:	428b      	cmp	r3, r1
 8007302:	bf01      	itttt	eq
 8007304:	6819      	ldreq	r1, [r3, #0]
 8007306:	685b      	ldreq	r3, [r3, #4]
 8007308:	1809      	addeq	r1, r1, r0
 800730a:	6021      	streq	r1, [r4, #0]
 800730c:	e7ed      	b.n	80072ea <_free_r+0x1e>
 800730e:	461a      	mov	r2, r3
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	b10b      	cbz	r3, 8007318 <_free_r+0x4c>
 8007314:	42a3      	cmp	r3, r4
 8007316:	d9fa      	bls.n	800730e <_free_r+0x42>
 8007318:	6811      	ldr	r1, [r2, #0]
 800731a:	1850      	adds	r0, r2, r1
 800731c:	42a0      	cmp	r0, r4
 800731e:	d10b      	bne.n	8007338 <_free_r+0x6c>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	4401      	add	r1, r0
 8007324:	1850      	adds	r0, r2, r1
 8007326:	4283      	cmp	r3, r0
 8007328:	6011      	str	r1, [r2, #0]
 800732a:	d1e0      	bne.n	80072ee <_free_r+0x22>
 800732c:	6818      	ldr	r0, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4408      	add	r0, r1
 8007332:	6010      	str	r0, [r2, #0]
 8007334:	6053      	str	r3, [r2, #4]
 8007336:	e7da      	b.n	80072ee <_free_r+0x22>
 8007338:	d902      	bls.n	8007340 <_free_r+0x74>
 800733a:	230c      	movs	r3, #12
 800733c:	602b      	str	r3, [r5, #0]
 800733e:	e7d6      	b.n	80072ee <_free_r+0x22>
 8007340:	6820      	ldr	r0, [r4, #0]
 8007342:	1821      	adds	r1, r4, r0
 8007344:	428b      	cmp	r3, r1
 8007346:	bf01      	itttt	eq
 8007348:	6819      	ldreq	r1, [r3, #0]
 800734a:	685b      	ldreq	r3, [r3, #4]
 800734c:	1809      	addeq	r1, r1, r0
 800734e:	6021      	streq	r1, [r4, #0]
 8007350:	6063      	str	r3, [r4, #4]
 8007352:	6054      	str	r4, [r2, #4]
 8007354:	e7cb      	b.n	80072ee <_free_r+0x22>
 8007356:	bd38      	pop	{r3, r4, r5, pc}
 8007358:	20001efc 	.word	0x20001efc

0800735c <__malloc_lock>:
 800735c:	4801      	ldr	r0, [pc, #4]	@ (8007364 <__malloc_lock+0x8>)
 800735e:	f7ff bfa5 	b.w	80072ac <__retarget_lock_acquire_recursive>
 8007362:	bf00      	nop
 8007364:	20001ef8 	.word	0x20001ef8

08007368 <__malloc_unlock>:
 8007368:	4801      	ldr	r0, [pc, #4]	@ (8007370 <__malloc_unlock+0x8>)
 800736a:	f7ff bfa0 	b.w	80072ae <__retarget_lock_release_recursive>
 800736e:	bf00      	nop
 8007370:	20001ef8 	.word	0x20001ef8

08007374 <_init>:
 8007374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007376:	bf00      	nop
 8007378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737a:	bc08      	pop	{r3}
 800737c:	469e      	mov	lr, r3
 800737e:	4770      	bx	lr

08007380 <_fini>:
 8007380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007382:	bf00      	nop
 8007384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007386:	bc08      	pop	{r3}
 8007388:	469e      	mov	lr, r3
 800738a:	4770      	bx	lr
